**TopView - an AOD analysis package for ATLAS top physics analysis**

**Akira Shibata**

**Queen Mary, University of London**

**11 May 2007**

**Abstract**

TopView is a common analysis package which is widely used in the ATLAS top physics working group. The package is fully based on the official ATLAS software Athena and EventView and playing a central role in the collaborative analysis model. It is a functional package which accounts for a broad range issues in implementing physics analysis. As well as being a modular framework suitable as a common workplace for collaborators, TopView implements numerous analysis tools including a complete top-antitop reconstruction and single top reconstruction. The package is currently used to produce common ntuple from Monte Carlo production and future use cases are under rapid development.

In this paper, the design and ideas behind TopView and the performance of the analyses implemented in the package are presented with detailed documentation of the contents and instruction for using the package.

###### Contents

* 1 Ideas Behind TopView
	* 1.1 Motivation
		* 1.1.1 How Common Analysis Framework Helps
		* 1.1.2 Athena Framework and Event Data Model
		* 1.1.3 ATLAS Analysis Model and Scope of TopView
		* 1.1.4 Implementation of Common Analysis Framework
	* 1.2 Design
		* 1.2.1 EventViewAnalysis Framework
		* 1.2.2 Tools and Modules
		* 1.2.3 PhysicsView Packages and HighPtView
		* 1.2.4 Physics Knowledge and Configuration
		* 1.2.5 JobOptions
		* 1.2.6 Distributed Analysis
		* 1.2.7 Root Analysis
	* 1.3 Use Cases
		* 1.3.1 Types of Analysis
		* 1.3.2 Production of Common DPD
		* 1.3.3 Physics Validation
		* 1.3.4 Future Use Cases
	* 1.4 References
		* 1.4.1 References on the web

## 2 Appendix A: Common Ntuple Reference

### TopView Ntuple Availability

#### 2.1.1 How to get ntuples

#### 2.1.2 Currently Available Ntuples

#### 2.1.3 Datasets processed

#### 2.1.4 Naming Convention:

#### 2.1.5 Jobs types:

#### 2.1.6 Check Status and Retrieve Output

#### 2.1.7 Reading Output

#### 2.1.8 Links:

#### 2.2 Object Preselection in TopView

#### 2.2.1 Introduction

#### 2.2.2 Use Preselected Objects in External AOD Analysis

#### 2.2.3 Object Insertion Order and Reconstruction Algorithm

#### 2.2.4 Loose Electron Selection

#### 2.3 TopView Ntuple Variables

#### 2.3.1 Top Ntuple Trees and Variables

#### 2.3.2 FullRecool Tree

#### 2.3.3 FullRecoAnao Tree

#### 2.3.4 FastSim0 and FastSimAna0

#### 2.3.5 Truth0 Tree

#### 2.3.6 TruthAna0 Tree

#### 2.4 Producing TopViewNtuple

#### 2.4.1 Running the Default Job

#### 2.4.2 Running TopView Job on Distributed Analysis

#### 2.4.3 Customizing the Parameters.

## 3 Appendix B: The TopView Manual

### Getting Started

#### 3.1.1 How to Get Started - 12.0.x

#### 3.1.2 How to Get Started - 11.0.x

#### 3.2 Inside TopView

#### 3.2.1 Package Contents

#### 3.2.2 Python Modules (python directory)

#### 3.2.3 JobOptions(share directory)

#### 3.2.4 C++ Tools (src directory)

#### 3.2.5 Root Packages (root and pyroot directory)

#### 3.2.6 Scripts (run directory)

#### 3.3 Physics Validation Using TopView

#### 3.3.1 Validation Histograms

#### 3.3.2 Event Info Histograms

#### 3.3.3 Particle plots

#### 3.3.4 Top Monte Carlo Validation

#### 3.4 TopViewAnalysis

#### 3.4.1 Preparation Stage

#### 3.4.2 Analysis Stage

#### 3.4.3 Other analysis available in TopView

#### 3.5 Customizing TopView

#### 3.5.1 Different Ways of Customization

#### 3.5.2 Using existing jobOption or writing your jobOption

#### 3.5.3 Writing TopView python modules

#### 3.5.4 Writing your own C++ tools

#### 3.6 Root Packages

#### 3.6.1 Root Package (found under root directory)

## Preface

## Chapter 1 Ideas Behind TopView

### 1.1 Motivation

#### How Common Analysis Framework Helps

A large physics collaboration like ATLAS involves a huge number of physicists analysing the same data. Collaboration between physicists commonly takes place even within one analysis and one such analysis may become a part of larger analysis projects. Eventually such analyses may be published but only after detailed investigation of the results through validation of the analysis procedure. Reproduction of results should also be publicly done to maintain the quality of the outcome. The need for common analysis framework arises very naturally in such an environment.

There is a great deal of overlap among different analyses. For example, clustering algorithm for calorimeter cells is used by almost all physics analyses. In addition, there may be several algorithms to do the same job differently and the analysis framework should be flexible enough such that one can just replace one algorithm by another, leaving the rest untouched. It is also required that the same algorithm can be easily used by many people and it need also be possible to write a new algorithm when one wishes to extend the framework.

Therefore, construction of common analysis framework requires a strategy to accommodate flexibility requested by the analysis performed in a collaborative environment. Despite the need to achieve complex tasks, the interface of the framework has to be simple to improve efficiency of analysis development. It must be designed so that common analysis tasks are available to all. Yet the framework has to be flexible so that new components can be added to it without duplicating the efforts that have already been made.

#### Athena Framework and Event Data Model

The Athena framework is the ATLAS software framework used for most part of the offline computing. It is a dynamic modular framework where components can be added to it with runtime configuration. The type of algorithms run byAthena varies broadly, including Monte Carlo event generation, Geant4 detector simulation, event reconstruction, and physics analysis. After each step of data processing, the data (either simulated or real) are written out in Root format using the Pool technology and the contents can be read back to Athena algorithms through a single interface called StoreGate. The end of the chain is particularly important for physics analysis with output files called ESD (Event Summary Data) and AOD (Analysis Object Data). ESD contains the full information from event reconstruction though, because of its size (\(\sim\)MB per event), only smaller part of the information is made available more globally as AOD. One aim of the event data model using ESD/AOD is that the right amount of information is in AOD so that most physics analysis but detailed detector investigation can be carried out with it. Supposing such goal is fulfilled, how do we analyse AOD?

#### ATLAS Analysis Model and Scope of TopView

Since the amount of data produced by ATLAS is so vast to fit in a single computer, both in terms of processing power and disc storage, the Grid computing facility is constructed to analyse the data acquired by the detectors on LHC. ESDs will be available only on the Tier 1 centres though AODs will be made available in all Tier 2 sites. Analysis tasks will be sent to and executed at those locations which hold the datasets requested by the task. The analysis carried out in these jobs can vary from a simple analysis with little processing assuming further local analysis on output DPD (Derived Physics Data), to a complete analysis with output histograms ready to be published. Most analyses are in between these two categories, starting from former and approaching to latter gradually as they grow more mature.

TopView is a physics analysis package which runs on the Athena framework. It aims to be the common AOD analysis framework and its capability ranges from copying AOD information into DPD to doing a complete analysis. Its role in the analysis model lies between the in-framework analysis using Athena and local (using DPD produced on Grid) analysis using Root. As the figure shows, these are the two large functional components of ATLAS analysis model: writing of analysis using TopView (typically done on CERN computing node or on a local machine with Athena installation), submission of TopView jobs to Grid to produce DPD and further local processing using Root.

Although analysis using the framework and Grid lacks interactivity, one of the major motivations for moving a greater part of analysis to a common framework like TopView is to standardise physics contents. It is frequently necessary for the members of the collaboration to agree on using the same methods for parts of their analysis. For example, definition of the analysis objects (electron, particle jet, b-tagged jet) used in an analysis need to be agreed on by all members of the same analysis. Another important aspect of using common framework is the ability to compare results from different analyses. Such comparison becomes necessary when two analyses shows significant discrepancy. Having components of each analysis available through the TopView interface allows one to replace parts of one analysis by ones in another analysis. For example, one analysis may have used different jet calibration from another but having both available as modules in TopView, one can easily assess the effect of different calibration to the final result. Furthermore, availability of such modules in a common framework improves the efficiency of the collaboration as a whole since work done by one can easily be passed to another. These are the considerations that defines the requirements and the role of TopView.

#### Implementation of Common Analysis Framework

Analysis tools necessary to analyse AOD (and ESD) are developed within the activities of PAT (Physics Analysis Tools) working group. The conventional approach for developing common framework is to create a library of algorithms that can be called in order. While this approach can be found in any analysis framework which requires modularisation, the EventView framework takes this further by exploiting Athena's ability to dynamically instantiate arbitrary tools using runtime configuration. Flexibility of this framework is inherent in this design since the dependencies between components of the framework are kept small and each tool is self-contained. This is enhanced by the design of the tools based on object oriented hierarchy which allows optimised abstraction of tools' functionality.

What EventView framework provides is an environment which scales with the complexity and the size of the analysis where specialisation can be achieved by a set of independent tools. TopView is therefore a collection of EventView compatible tools useful for top physics analysis in particular. It also includes a set of configurations which specifies the behaviour of existing tools since the EventView framework provides a collection of fairly general tools which can be configured to work in different contexts.

In summary, TopView is a collection of tools which extends the EventView framework. Such a specialised analysis package is necessary to support communication within the group where standardisation of tools and convention is meaningful and practical. By design the framework also have a simple mechanism to allow communication between different groups with their own specialised packages as described in the next section.

#### 1.2 Design

##### EventViewAnalysis Framework

The TopView package can be simply described as a set of tools and modules which extends the EventView framework. Though details of the EventView framework is beyond the scope of this text, the concept of tools and modules should be introduced here to show how this is done. The figure shows a very crude illustration of an analysis which can be written using EventView. At this point EVTool (or simply Tool) can be thought of as the smallest building block of the analysis and EVModule (or simply Module) as secondary building block which consists of EVTools. An analysis, in this framework, can therefore be thought of as a collection of Tools and Modules chained together in a specific manner.

Tools, being the smallest component, is typically a very simple entity and are only meant to do a single task, though some Tools are more complicated than others. In fact, there's no limitation as to how complex one Tool should be: one can write the whole of his/her analysis in one tool. However, from the point of view of efficient modular analysis,there are several considerations. If one kind of operation is conducted in an analysis repeatedly, maybe with slightly different configuration, that operation should be isolated into a separate Tool so that duplication of code can be minimised. If one part of an analysis is useful for various purposes, including other analyses, again it should become one Tool so that it can be shared with others. Even in other cases, it may still be useful to put parts of the analysis into separate Tools to aid organisation of the analysis. At the basic level, one Tool can be thought of as one action. Often there are practical issues related to what a Tool should do: one tool should become context independent as much as possible for it to be more useful and applicable in many situations.

Modules are similar to Tools as one independent component of the analysis. They are meant to represent something more sophisticated than Tools. Typical actions involved in Tools are e.g. "Calculate this variable", "Combine these objects" and "preselect this kind of objects". One can form more meaningful, but context dependent, operations out of these basic building blocks such as "Leptonic top reconstruction", "Do preselection of all objects" and "Calculate this variable for the daughters of W". One can see that there are several purposes to Modules:

* combine multiple Tools to form a larger action,
* configure one or more Tools to behave in a specific way other than their default, and
* group related actions into one place.

It is clear from the above that functionality of the EventView framework scales very naturally. To add new features, one can simply write a new Tool in case no combination of existing Tools can give the same result, or write a new Module otherwise. TopView therefore consists of EVTools and EVModules as the main part of the package. One thing that has not been explained is the jobOptions. Once Tools and Modules are ready, they are finally scheduled to an Athena job via jobOptions. In the current framework, jobOptions are little more than putting Tools and Modules in order though there are several other complexities involved. This will be explained in a later section.

#### Tools and Modules

EVTools and Modules are treated equivalently under the new configuration scheme. The main algorithm sequencer called EventViewToolLooper takes the list of Tools and Modules in sequence. One of the main differences between them is that Tools are written in C++ and Modules are written in Python. In Athena C++ is the main language for writing algorithmic part of the application. Python on the other hand is an interpreted language which is not suitable for such purposes for performance reasons. On the other hand, Python is a very suitable language for job steering and configuration due to its interactivity. Therefore, in the EventView framework, most algorithmic operations are implemented in C++ Tools. Python part provides manipulation of these Tools: one can dynamically instantiate Tools through runtime configuration (without re-compilation). These differences also contribute to making decision of what to be done in Tools and Modules.

#### PhysicsView Packages and HighPtView

As described in the previous section, one can extend the EventView framework by constructing a set of Tools and Modules relevant for particular purposes. It is by this mechanism that "PhysicsView" packages were constructed and several such packages were developed in physics groups: TopView for top quark physics, SUSYView for SUSY group and a few other packages for individual Higgs analysis. It became apparent that there was much in common between these packages; although all packages made full use of the standard set of EVTools and EVModules, additional efforts were made to develop Derived Physics Data (DPD).

Objects in AODs are only loosely selected and there can be much ambiguity in what one selects to start his/her analysis with. Loose selection in AOD also means that there are significant overlaps between different types of objects, e.g. most of the objects reconstructed as electrons are also reconstructed as jets. EventView comes naturally into the picture: at the beginning of AOD analysis, one need to define the "view" of the event by selecting objects and removing overlap. Although details of selection criteria may differ from one group to another, given the nature of "High Pt" physics (including Higgs, Top, Exotics, and SUSY), a common baseline selection cuts could be derived which includes the objects of interest for most analyses in this subject. This was done in consultation with the detector performance group. The HighPtView package contains this information in the form of EVModules (as parameters configuring Tools). This package also includes all Modules necessary to produce DPD under HighPt requirements, which includes object inserter Modules, variable calculator Module and intuple dumping Module. This provides a common set of machinery for DPD production in all PhysicsView packages and the format of the DPD can be kept the same though they may differ in contents.

Each physics group may still produce their own DPD with more specialised or different object selection and additional variables. A part of this can now be done by providing their own selection criteria to HighPtView Modules (without constructing their own Modules.) Additional Tool and Modules are added to the package as before and no limitations are imposed to extend the framework.

#### Physics Knowledge and Configuration

The top physics group produces their own version of ntuples through this mechanism using TopView. Detailed discussion with performance groups produced a baseline cuts somewhat more specific compared to the HighPtView. In addition, a \(t\bar{t}\) reconstruction analysis is performed and included in the ntuple. This analysis is taken from the "Commissioning Analysis" which is relevant in the early stage of data taking and not only that it is useful in several purposes including determination of jet energy scale and missing et calibration, it forms a reference to all \(t\bar{t}\) analysis within the group. Other analyses are also available in TopView and the performance of these are shown in a later section. By design, the addition of these features is trivial and one can quickly incorporate them in the existing TopView job though runtime configuration.

#### JobOptions

It has been explained that TopView is essentially a collection of Tools and Modules, though one needs to have a job steering, or ljobOption, which assembles all the components. In the EventView framework, jobOptions are relatively simple entities. They merely specify input files and output files and schedule Tools and Modules. However, there are additional material necessary to support broader range of use cases. For example, one can run fast simulation on-the-fly to process generator output files without intermediate processing. Such functionality can be provided by additional job configurations not necessarily within the EventView framework. These jobOptions are useful tools for analysis in any case and included in TopView.

#### Distributed Analysis

Distributed analysis is a central part of any analysis in ATLAS. Considering the amount of data recorded by ATLAS (\(\sim\)Peta Byte), it is impractical to try and process output data on a local resource. The grid service called PANDA provides a robust user front end for Athena job submission. Any Athena job can be sent seamlessly (users just need to use pathena rather than athena with a couple of extra options specifying input data) to the grid resource and the result can be obtained through distributed data management (DDM) tools known as dq2. Given these features of PANDA, TopView needs very little extension to make the most of this service since it is already an Athena package. It does, though, have a small wrapper tools to help submission of TopView jobs. This includes some additional mechanism to organise relevant datasets. Under the rapid processing cycle of MC data like in CSC production, a number of jobs need to be submitted repeatedly with numerous input datasets. Therefore, detailed list of relevant AOD and EVNT files are kept and used as a data card to batch submission.

#### Root Analysis

Though it is not the main scope of TopView to support analysis after Athena and DPD production, Root analysis is another main component of physics analysis in the ATLAS analysis model. TopView includes a simple Root macro with support for event loop so that local analysis using TopView ntuple can be started.

### 1.3 Use Cases

In principle, there is nothing to stop one from doing full analysis in TopView. Athena has a support for interactive analysis which is suitable for later analysis stage after DPD production as well. One of the main practical limitations to this approach is the speed. The current event processing rate is around 1 to 10 Hz in a typical EventView analysis. Performance profiling revealed that much overhead is created from AOD access speed. Work is under way to resolve this issue by separating transient and persistent representation of the object classes and speed increase by a factor of 10 is expected in I/O access. Distributed analysis is another solution to efficiency issues. Performance scales linearly with number of available machines available to physics analysis though this does not improve interactive analysis.

Athena algorithms are optimised for event-level processing. While this is suitable for the purpose of event simulation and reconstruction, physics analysis also requires sample level analysis with global view of the sample over a large number of events. Again, it is possible to do such analysis within Athena, but it is unpractical, specially under slow turn-around.

The current use case of TopView is centred around these areas and the development of the package is related to finding an optimal working point. Suppose one wants to extract jet energy scale from \(t\bar{t}\) events using kinematic fit exploiting the kinematic constraints within the event. Kinematic fitter can be executed every event to calculate an event level estimator for jet energy scale possibly under multiple combinatorial assignments. One can then try to extract energy scale from a large sample e.g. using maximum likelihood fit. Local Root analysis is suitable for the latter part of this analysis.

#### Types of Analysis

It is instructive to divide physics analysis into stages to explain the issue in more detail. There are very many things that are called "analysis" and it is often confusing to just say "I do my analysis using 'TopView" etc.

1. **Pre Physics Analysis** : Event reconstruction usually done in central production system and the result of this is AOD (and ESD). Some components of event reconstruction, though, is used in further analysis to refine, or redefine objects after further processing.
2. **Baseline Analysis** : The first step in AOD is to do preselection and overlap removal. In EventView analysis, this task is done by inserters. In addition, there can be further processing such as calibration, b-tagging, clustering, rerunning of jet reconstruction algorithm etc.
3. **Event Analysis** : Analysis which is done event-by-event and it consists of very many elements. This includes simple event variable calculation (e.g. sphericity and aplanarity), truth match, object reconstruction (top and W reconstruction), event selection and so on. In the current scheme, this is the grey area which is partly done by Athena though in many cases, most of this is done in Root analysis.
4. **Full Sample Analysis** : Per sample analysis after full sample has been processed. It uses the information from the whole sample and usually done in Root but in some special cases done in Athena. This stage of analysis includes e.g. plotting histograms from trees, fitting templates to histograms, generating toy MC for ensemble test, and so on. This part of analysis requires a very high degree of interactivity.

The present working point is to process, using Grid or otherwise, up to some of event analysis in Athena and save the results in Root ntuple. The ntuple is then read in local Root analysis for further processing. For the reasons explained in previous sections, it is beneficial to move larger part of one's analysis into a common framework such as TopView and this is where much of the current effort lie. For example, useful information can be added to baseline analysis such as pre-calculated calibration constants which users can apply when they read the ntuple in an Root analysis. It is also possible to replace, before DPD production, non-calibrated jets with calibrated to gain more consistency. Inclusion of basic \(t\bar{t}\) analysis is beneficial because very many people are working with this channel under different context (mass measurement, cross section measurement, jet calibration, missing et calibration etc.) but top reconstruction is usually common to all.

#### Production of Common DPD

One of the main use case of the TopView package is the production of group DPD. As explained in the previous sections, much of the capability of producing DPD come from HighPtView. In addition to this, there are several event variables and event level analysis as explained in the previous section. The "default" jobOption contains the definition of the analysis contents to be included in the common ntuple production jobs and are submitted to distributed analysis using the PANDA service. Relevant datasets are processed on demand whenever new samples arrive and additional processing required with different set-up are also submitted when needed. A large number of ntuple datasets are created from this effort and distributed through distributed data management (DDM) tools. This enables users to download the ntuple datasets to their local resource for further analysis.

The contents of common ntuple were finalised though discussion on the collaboration meetings in consultation with the performance groups. Some selection cuts were optimised for top analysis and refined though iteration. New variables or analyses are added when needed and development of the tools are aided by contributions from the group members in various forms including discussions in the collaboration meeting and actual implementation of the tools. Several private Root analysis frameworks are now compatible with the format of the TopView ntuple such as SFrame. Comparison of results from different analysis is simplified by using the same ntuple produced with standard selection criteria though it is not mandatory for an analysis to be based on TopView ntuple. There are several other Athena based analysis packages used in various analysis. Comparison of results in this case is slightly tedious since one has to check that every step of the analysis is compatible with what is done in TopView. Therefore, TopView can produce transient StoreGate containers of selected objects. This means that other Athena analysis can access objects preselected by TopView in the same way as reading standard AOD files and the rest of the analysis can stay completely unmodified (Figure below).

[MISSING_PAGE_EMPTY:13]

Since certain level of standardisation has been achieved through the TopView framework within Athena, it is a useful tool to be used for the on-going physics validation effort. Along with the ntuple, the default job produces a set of validation histograms (Figure). These histograms are now being integrated into the Run Time Tester (RTT). RTT automatically processes validation samples and compares the histograms produced with reference histograms on nightly basis. This allows us to continuously monitor the performance of the event reconstruction and the TopView package itself. Besides the automatic validation, manned validation effort is taking place making important contribution to the Physics Validation group. Here, validation sample (sample A) are processed through PANDA when they become available and ntuples are processed locally and compared with previous results.

#### Future Use Cases

The current output of TopView analysis (DPD) is Athena-Aware Root ntuple which provides navigation capability (to go back to AOD and ESD) to the standard "flat" ntuple containing integers and float numbers (and arrays of them). Current developments in Event Data Model will enable reading of structured objects (such as an object of class Electron) directly from Root. This will give more flexibility between Athena analysis and Root analysis since the difference between DPD and AOD will merely be in their contents but both of them can be read by both Athena and Root. This will not alter the main objective of TopView and the current use cases such as common DPD production: there will be a need for common framework for analysis, common preselection of objects and common tools to calculate variables even after structured DPD is introduced. With further development in EventView it will also become possible to write out EventViews in Root-readable format not by copying their contents to flat ntuples. Therefore future developments in EDM will enable us to lower the hedge between Athena and Root analysis by increasing the portability of the analysis code.

#### References

* **ATLAS computing : Technical Design Report ATLAS Collaboration _ATLAS-TDR-017_** (2005)
* Developer Guide ATLAS Collaboration**
* **Physics Analysis Tools 2006 Workshop Summary Report S. Asai and others _Atlas Notes ATL-SOFT-PUB-2006-005_** (2006)
* **Top studies for the Atlas detector commissioning S. Bentvelsen and M. Cobal _ATL-PHYS-PUB-2005-024_** (2005)
* **Investigation of top mass measurements with the ATLAS detector at LHC I. Borjanovic and others** _Eur.Phys. J 63-90_** (2005)
* **Prospects for single top cross-section measurements in ATLAS** **A. Lucotte, A. Fieres, and F. Chevallier** _ATLAS Notes ATL-COM-PHYS-2006-57_** (2006)
* **Commissioning ATLAS using top-quark pair production W. Verkerke and v. I. Vulpen** _ATLAS Notes COM-PHYS-2007-023_** (2007)

#### References on the web

* [leftmargin=*] EventView: The top page for EventView framework. All EventView related information are linked to this page.
* EventViewConfiguration: Explains the configuration method used in TopView.
* SFrame : A Root framework compatible with TopView ntuple
* RTT : ATLAS Run Time Tester
* Top MC Validation : Physics validation using TopView