**ATLAS Internal Note SOFT-NO-012**

**7**April 1994

**SLUG**

This note gives the current status of the

SLUG interface to GEANT

Authors: R.S. DeWolf

Printed April 7, 1993

This document may be obtained from VM using the command

WRITEUP when linked to the PUBZP 197 disk.

The latest information is also available using the command

HELP ATLAS

Version 1.07

**ATLAS-SOFT-12**

**SLUG**

This note gives the current status of the

SLUG interface to GEANT

Authors: R.S. DeWolf

 Printed April 7, 1993

This document may be obtained from VM using the command

WRITEUP when linked to the PUBZP 197 disk.

The latest information is also available using the command

HELP ATLAS

Version 1.07SLUG - Simulations for LHC using GEANT

###### Contents

* Chapter 1: Introduction
* Chapter 2: Code Management for SLUG
* Chapter 3: Running SLUG
* Chapter 3: ATLIBM panel
* Chapter 4: The Structure of SLUG
* Chapter 4.1 General Principles
* Chapter 4.2 Flow Diagrams for SLUG
* Chapter 4.2.1 SLMAIN: The Main Program
* Chapter 4.2.2 GUKINE: Set up the Kinematics
* Chapter 4.2.3 GUOUT: After each event
* Chapter 5: Adding Your Detector to SLUG
* Chapter 6: Print Levels
* Chapter 7: SLUG Input and Output
* Chapter 8: Graphics
* Chapter 9: SLUG Utilities and Faculties
* Chapter 9.1 The Track Filter
* Chapter 9.2 The Magnetic Field Faculty
* Chapter 10: SLUG ZEBRA Banks
* Chapter 11: SLUG Common Blocks
* Chapter 12: SLUG Datacards
* Chapter 13: Generators Interfaced to SLUG
* Chapter 13.1 PYTHIA
* Chapter 13.2 GENCL

## Chapter 1 Introduction

SLUG is a software package that provides an environment for the simulation of LHC events. Broadly speaking, the responsibilities of SLUG are the reading in of LHC events from generators in a standard way, and the simulation of the behaviour of potential LHC detectors.

For the latter job, SLUG uses GEANT, and its facilities and program structures are used wherever possible. GEANT, a large CERN-supported simulation package, provides facilities for tracking particles through an experimental setup defined by the user. It also provides graphical representation of these setups and events. For simple jobs, such as simulating a single detector in a testbeam, SLUG is reduced to a very simple shell around GEANT. In fact, it is intended, even for complicated modes of SLUG, that SLUG not interfere with the business and responsi -bilities of GEANT.

Information about will GEANT will, in general, not be given in this write-up. The user is therefore directed toward the GEANT3 manual to see how to define his detector, his response package, his digitization, and all matters to do with GEANT.

The responsibilities of SLUG itself can be listed as follows:

- To provide an interface into GEANT from a variety of event formats, particularly a standard ZEBRA format, GEME.

- To provide a common structure for the manipulation of the generated events including the handling of additional minimum bias events, and the control of particles fed into GEANT.

- To provide a structure within which sub-detector geometries can be tested together.

- To facilitate the expansion in scope of the memory management of GEANT as is required by a full-sized detector simulation.

Currently, SLUG is maintained on VM and CSF at CERN, on VM at the Rutherford Appleton Lab in the UK, and on the Cambridge Vaxcluster. Where specific, this document refers to use of SLUG at CERN.

Code management is performed by CMZ. The FORTRAN code for SLUG is contained in a small number of CMZ library files. These are files are released infrequently and reside, along with precompiled libraries on official disk areas. The current status of the SLUG code is provided by CMZ correction files that are released more frequently, corresponding to sub-release increments ('levels') of the SLUG code.

The case. ATLIBM, lets the user define his run of

SLUG (or other ATLAS software) by means of full screen panels.

SLUG and GEANT run parameters for a run are determined by a datacard file.

SLUG uses the save FREAD datacard system as GEANT. It uses GEANT-defined

 cards where useful, but defines new ones where needed, the main cases being

SLUG's expanded system for managing detectors, and SLUG's own input/output

 package. The formats of SLUG's own datacards and those of GEANT that are

used by SLUG can be found in the section called 'SLUG Datacards'.

## Chapter 2 Code Management for SLUG

Code management is performed using the CMZ package. The FORTRAN code for

SLUG is contained in a small number of CMZ library files ('CMZ files') :

SLUG CMZ - Contains the majority of the SLUG code.

ZSLUG CMZ - ZBOOK routines for direct reading of ZBOOK tapes

GENSLUG CMZ - Contains dummy routines for direct generator interfaces

 to SLUG

New CMZ files for the above are produced for each release of the SLUG

 software. At the same time, a single precompiled library is produced

 from these three CMZ files.

 Correction files (representing new 'levels' in CMZ jargon ) are produced

 more frequently. The correction file for the three CMZ files is called

 SLUGFIX CORR.

 For the production version of SLUG, the following table summarises

 the names and location of the official files.

 VM

CMZ Libraries SLUG CMZ PUB2P 197

 GENSLUG CMZ *

 ZSLUG CMZ *

 Compiled Library SLUG TXTLIB PUB2P 197

 Correction File SLUGFIX CORR PUB2P 197

 Fixed TEXT File SLUGFIX TEXT PUB2P 197

 The disk PUB2P 197 is the group disk on VM for the ZP group. Nicknames

 for disks for this group are as follows:

 DTN2P 197 - contains the current version of SLUG software.

SLUG - Simulations for LHC using GEANT

PUB2P 213 NEMATLAS - contains the development versions for SLUG.

Users are encouraged to use CMZ for their own code management. See

the entry CMZ in the main ATLAS help menu. CMZ is a useful tool in the

the organizing, editing, and standardizing personal code,maintaining

integration with the code management of the software as a whole.

Users are also encouraged to use the exec CMZCOR provided on the PUB2P

disk to produce corrections files relative to the official released CMZ

files.

Users' corrections files and the standard correction files are used

during the CMZ step that is present in standard SLUG jobs. The CMZ

step is driven by a KUIP macro (KUMAC) file. Besides containing cards

to select the user and official fix filesto read in, these files may

contain cards that select special options in the software, for instance

to select machine dependent code. The official KUNAC file for SLUG jobs

is SLUGIBN KUMAC on PUB2P 197.

Code for ATLAS detector options is kept in the file DICE CMZ also on

the group disks. Development versions are kept on PUB2P 211. See the

file DICE README on that disk for the status of DICE code and datacard

files.

### 3 Running SLUG

Two full-screen panel driving execs have been written in order to generate

SLUG jobs for VM and for the CRAY. These are ATLIBM and ATLCRAY, respectively.

On VM at CERN, these exec are found on the group disk, PUB2P 197.

### 4.1 ATLIBM panel

The ATLIBM exec is used for interactive or batch running of

SLUG on the IBM.

To run the exec, just type

ATLIBM

A panel is displayed with various default options selected.

The user can use the TAB or LINE FEED keys to position at

selected input fields. Any option displayed can be changed

by typing over the default value. When the user has changed all

the options necessary, hit RETURN to continue.

The user can use the same set of the input values as performedIf an error is detected, a message is displayed on the bottom line and the cursor is positioned on the field in error.

The users CMZ KUMAC command file must contain the necessary

FILE, SEQUENCE and SELECT commands plus the users commands and

corrections for the job (see SLUGIBM KUMAC G for example).

The official fix file SLUGFIX CORR G contains corrections

to all known serious bugs in the current version.

The program cannot be guaranteed to work without these corrections,

but the user may run without them by blanking out the file name.

If the user has any other KUMAC files called from the main KUMAC,

then a panel will be displayed for selection of these files.

The program is steered by a set of FFREAD data cards. The user must

create a set appropriate for the task to be performed.

The output from the program run can be directed to the screen or to a

separate file.

The user can specify an input data file on disk or tape. For files

on disk, it is assumed that the appropriate disks have been accessed.

If the input file is on a disk that is not accessed, the disk can be

accessed during the job if the user gives the disk owner and address

in the appropriate fields in the panel. Tapes are assumed to be 3480

cartridges.

If the user has any special disks to be attached or any extra non-standard

FILEDEFs to be specified, then entering Y in the field

Any special FILEDEFs / GIMME (Y/N)?

will display a panel which allows up to 5 GIMEs and 5 FILEDEFs to be

specified. As usual, the new entries in the panel are saved as defaults

for the next run of the exec.

To run the previous version or a development version of the program,

users can specify as owner either GLDATLAS or NNMATLAS in this panel.

A separate panel is displayed for special input tape options if selected.

Currently the following special options are available via this panel :-

1. Stage input tape

2. Concatenation of input tapes

The exec creates another exec SL_JOB EXEC which can then be run

interactively or in batch. If the job is to be run in batch,

the user may need to change the default time limit for the

job. The job name can also be selected, otherwise the normal VM

default name is used.

The options selected are saved in the users LASTING GLOBALV file,

hence the default values used for the next entry into the exec

are those last defined by the user.

If the user wishes to use the standard defaults again on a

later run, then the exec should be called as follows :SLUG - Simulations for LHC using GEANT

### Flow Diagrams for SLUG

The flow charts given in this section are based on those produced by the program FLOW. They show calls to routines that are contained in SLUG TXTLIB plus calls to certain selected GEANT routines; e.g., they show the reference to GRUN, but not those to GLOOK. A few other significant references such as those initializing HPLOT have been included.

The following symbols are used in the flow diagrams:

. ==> terminal node in the tree * ==> external procedure > ==> subtree node, expanded below + ==> multiply called terminal node ==> procedure calling externals? ==> module is in IF clause ( ==> module is in DO loop

#### 4.2.1 SLMAIN: The Main Program

****************

Node name ==> SLMAIN

****************

SLMAIN |------SLHEAD |------JORNAM * |------GENNUM. |------DATIME * |------GLERBRA * |------HLIMTT * |------UGINIT * |------GLERTA |------GLERIN * |------MZFORM * |------MZLINK * |------SBRootT |------SBLKAR |------SLMIB | | | |7---SBTOPOL |------SBTOPO |------SLCHEK |------SLDDRF |------SBDETE |------MZLDDEF |------SBDETE |------SLUGDEF |------SLSETDP |------SLDBTN |------MZBOOK * |------SBDETESLUG - Simulations for LHC using GEANT

[MISSING_PAGE_EMPTY:12]

[MISSING_PAGE_EMPTY:13]

|-------SLBEVT| | |?---TIME| * | |------SBGENE | |?---GENEWT : |?---BEVENT > |?---RDZBOO > |?---ZZSLUG > |?---RDHEPE. |?---UEVENT. |?---SLBEMM| |------SLBENT > | |?---SPTSPA > | |?---SLTSTB | | |------SLDETN > | | |------SBGEVT > | | | |------SLHANG > | | |------SBGEVT > | | |------SLHANG > | |------SLUUCUT. |?---SLGERP. |?---SLTCHK | |(?---SLSCON | |------PDG2GE > | |(??--SLTFLT > |?---SLBACK > |?---SLLOAD | |(---SLKINE > |?---SLBACK > |?---SLBACK > |?---SLBACK > | |(---SLKINE > |?---SLBACK > | | |(---SLBACK > | | |(---SLBACK > | | |(---SLBACK > | | | |(---SLBACK > | | | |------SLPNA > | | | | |------SLPNA > |??---SLCHEK > |?---GVERT |?---GREINE ================================ )

Node name ==> RDEWNT ================  RDEVNT |-------SPTOMO > |------SLIN | |------F2IN | |?---F2IN | | |?---F2IN | | |?---F2IN | | | |---F2IN | | |---F2IN | | |---SLGANM| | | |?---SLCHEK > | |??---F2ENDI * ================================================================ )

Node name ==> RDZBOO

[MISSING_PAGE_FAIL:15]

SLUG - Simulations for LHC using GEANT

|(??--SLHANG >

****************

Node name ==> SLKINE

****************

SLKINE

|?---SLINTE >

|---GSVERT *

|(---PO2GGE >

|(?---SLFFLT >

|(---GSKINE *

****************

Node name ==> SLPNAM

****************

SLPNAM

|?---SLPDAT

****************

Node name ==> SLKANG

|?---SLINTE >

|?---ZSHUNT *

****************

Node name ==> RDEVNT

============

RDEVENT

|---SFIOMO >

|---SLIN

|---PZIN *

|?---PZIN *

|?---ZIN *

|?---ZSHUNT *

|(---PZIN *

|---PZIN *

|---SLGMM

|?---SLCEK >

|??---FZENDI *

****************

Node name ==> RDZBOO

|?---ZAGAIN *

|---BROOKN *

|---ZEPIN *

|??---ZEPMMD *

|(---EPRAND *

|?---PRPAV

|| |=PNAM

[MISSING_PAGE_EMPTY:17]

You should choose a descriptive four letter name for your user detector. (Remember that this name might "stick"!) This name is then fed to SLUG when the detector is booked with a call to SBSETS (see below). This routine will give the user a unique detector number between 1 and 19 that must be used for the following operations:

i) Accessing the current print levels, and other processing flags for that detector.

ii) When defining tracking media, all medium number used for the detector should be offset by the user number times 10. (THIS CONVENTION IS UNDER REVIEW)

iii) The variable IDTYPE in the GEANT calls GSDET,GSDETV must be set to the detector number.

The first two letters of the four-letter name should also be unique and descriptive. This is to allow that detector-specific ZEBRA banks have the first two letters to give the detector, the last two to specify the bank.

The following are the points in SLUG where a user is expected to add calls to his own code, and suggested names for his subroutines.

Operation Subroutine to edit Code to add (example) -------------

Book detector, and set UDDEF CALL SBDETE('XXXX',0,ID) default parameters. CALL XXXDEF

Set up any user FFREAD UCARD CALL XXXCKD cards.

Set up geometry, SETS, and UGEOM CALL XXXGBO

HITS structures.

Do any plots for detector UDRAW CALL XXXDRA

geometry.

Operations at event start. UBEVT CALL XXXDEV

Simulation step. Storage GUSTEP CALL XXXSTE

of HITS.

Digitization UDIGI CALL XXXDIG

Standard Analysis UANAL CALL XXXXNANA

Called just before event output UOUT CALL XXXOUT

Note that the calling of the detector subroutine from within GUSTEP, and not a user ( U....) routine. This exception has been made in order to avoid too many layers of subroutine calls during GUSTEP, a very where the user must supply an subroutine that returns the field, taking the geometry as a whole into account.)

 Some of these insertions are optional. For instance, there may be no need to do anything at event start, or there may be no need for default parameters to be set up, if they are fixed in XXXXGBO  ( though this prevents the effective use of FPRRAD cards).

 When some detectors become more official, most of the the calls described above will migrate to the subroutine one level up. The exceptions are GUDTGI and GUSTEP.

 The following subroutines book a subdetector into SLUG (SBDETE) and return the number of a subdetector given the name (SLDETN).

 SUBROUTINE SDMETE(CDBT,IDW,IDGET)  -----------------------------------  Book a new subdetector system into SLUG by adding the detector name, passed as character*4, CHDET, to the datawords of the DETN Zebra structure, and hang a DETE bank off this structure at the corresponding link index.

 A desired position (index) of the detector can be given in IDW. If that position is already used, or if IDW is passed as 0, the next available position is returned. In either case, DETM will be 'pushed' if necessary.

 The position actually used is returned in IDGET. This becomes the sub-detector's user number. It can be stored seperately or obtained at any time with a call to SLDETN.

 INPUT: CHDET 4-letter name of the subdetector  IDW  position of subdetector requested or 0  OUTPUT: IDGET  position of subdetector name in Mother bank, DETM,  and the index of the link to that detector.

 SUBROUTINE SLDETN(CDBT,IDET)  -----------------------------------  Given a 4-character detector name, return a user detector number  which is the link number in DETM for the desired DETE bank.

 INPUT: CHDET Character Name of detector to whose number you want  OUTPUT: IDET  Integer Detector user number

### 6 Print Levels

 SLUG uses its own system of to control the amount of printing generated  by its own operations and by code supplied by the user. Two print  levels are set for each sub-detector system and for each operation numbers given to GEANT via the DEBU card, and one for all other events.

Print levels are part of the Detector/Faculty system. The program stages or special facilities (for instance the track filter) in SLUG are termed here 'faculties' and are logically equivalent to sub-detector systems within the SLUG code. As is the case with detectors, therefore, each faculty has a four letter code and a number, taking the detector numbers 21 upwards.

The present SLUG default detectors and SLUG faculties are listed below. Their numbers can be retrieved, given the four-letter code, by calls to SLDETN.

 Official Detector and SLUG Faculty Table

Detector/Faculty Number

SLUG SLUG SLOG Mother Volume 20

INIT SLUG initializations 21

ZEBR ZEBRA debugging 22

CONB GEANT materials, constants 23

GINI Generator initialization 24

GENE Generated event manipulation 25

INPUT Event input 26

OUTPUT Event output 27

BACK Background event addition 28

TFLV Track Filter 29

TRAC General event tracing 30

PHYS Physics Printing 31

CAAN Calorimeter Analysis 32

TSTB Testbeam Code 33

MFLD Magnetic Field Code 36

An added feature of this is that a user can book at run time a user faculty ( eg. cluster finding ) and automatically have control over its operations via the "MODE and the "DETP cards, which set levels and pass parameters, respectively. For more information about this, see the help file DETECTOR, and the descriptions of the "MODB and "DETP cards.

### 7 SLUG Input and Output

The SLUG Link and I/O Control Structure

The SLUG Link and Input/Output control structures record the position of ZEBRA top level links and related information, and allow the boxing of specific links to be written or read by ZEBRA. These structuresthe standard SLUG initialization. Some of the routines are also foreseen to be called by users to control the allocation of their own ZEBRA banks.

Three ZEBRA data structures record the status of the Link and I/O system. The link area (LKAR) banks record the position and extent in memory of the link areas of GEANT and SLUG. Each link area has associated with it a link name or specifier, a four-letter character string (or hollerith inside the routines). These link names are also used for the last four letters of the Fortran variables that contain these links. Usually the link name is also the same as the Hollerith bank name (IDM) of the bank that usually resides there. This is true of all GEANT top level links and almost all SLUG ones. A link will have to be given a name that contrasts with its bank name when two links may, under circumstances, hold banks with the same name.

The top level bank recording (TOPL) banks record the position of top-level links in the link areas. The GEANT and official SLUG links are booked at the beginning of a job in subroutine SLINIB. If necessary, users may also register links using the same utilities. These banks will then be able to be output or input in the standard way.

The Input/Output mode (IOMO) banks and the I/O link (IOLK) linear structures that hang from them contain the information as to which banks are to be written or read. An IOMO bank exists for each ZEBRA input or output stream (sequential at the moment). Again, these streams are booked by a subroutine call, so, in principle, extra I/O streams can be set up by the user.

The three standard input/output modes are "physics events", "background" and "output". These are represented in SLUG by the single characters 'P', 'B', and 'O', and are assigned Fortran stream numbers 21,22,and,23 repectively.

There are three separate linear IOLK structures linked to each IOMO bank -- for the stages job start (not currently used), run start, and event. The IOLK banks each contain the names and link areas of the banks to be written or read and are cross-referenced to the corresponding TOPL bank via a reference link. During initialization, the minimum number of banks are set for each I/O stream, these being the GEANT RONG and HEAD banks. Further IOLK banks are booked using "BXIO cards. (Look under "DATACARD in the HELP SLUG menu.)

The IOLK linear structures define the banks to be used in a single call to SLOUT or SLIN. For instance, to write out an event in the standard output stream,

CALL SLOUT('O','E',IER)

the IOLK structure at the third down link from the 'O' mode IOMO bank is followed. This has previously been arranged in decreasing order of priority by calls to ZSORTI and ZTOPSY, thus ensuring that the GEANT event header bank be written out first. A first pass down the links count the number of valid links to be written out and marks the valid links. The second pass writes the banks out.

The SLUG Link and I/O control structure is illustrated below, showing 

[MISSING_PAGE_EMPTY:22]

SLUG - Simulations for LHC using GEANT

----------------

The primary control of graphics is via the graphics ( 'GRAP' ) component of the subdetector's "MODE card. The integer following the 'GRAP' token should encode for what subdetector views are produced in the run.

The first 4 bits of this graphics flag are reserved for official views to be drawn by SLSTAND, a SLUG utility program.They are interpreted as follows:

BIT PLOT SCALE :

1 y-z slice of detector SCALE = 0.75 * MIN(DIMY,DIMZ)

2 x-y slice of detector SCALE = 0.75 * MIN(DIMX,DIMY)

3 projection of detector SCALE = 0.75 * MIN(DIMX,DIMY,DIMZ)

4 (unused) (unused)

The remaining bits are available to the subdetector code.The official views produced by SLSTAND are saved. The view numbers saved for each subdetector are recorded in DETV banks at link -2 from the DETE banks; the view number for bit 1 in word 1, the view number for bit 2 in word 2 etc...

The scales of the official views are determined by the arguments DIMX, DIMY, and DIMZ passed to SLSTAND. These should be set by the subdetector code to be approximately the maximum extents of the detector along the respective axes. A factor of 75% is put in by SLSTAND to comfortably fit the detector in the views. The scales used for the various views are summarized in the table above.

The detector 'SLUG' is always present to allow the booking of global graphics of the whole geometry. The same conventions as above are followed. Only the official bits are used.

Event Graphics

----------------

Graphical presentation of an event can be produced by using the "DREV card. (See help for "DREV.) With this card, the user selects the subdetector that he wishes to view, ( or the SLUG geometry as a whole) and the view that he wishes to use (1 for bit 1, 2 for bit 2, etc..). Since the DREV card will have been entered when the views are saved, further information can be input on the DREV card to customize the view to be used for event graphics: arguments 4,5,6 can be used to enter the new position of the centre of the view (NOT IMPLEMENTED FOR THE PROJECTIVE VIEW), and parameter 7 can introduce a magnification factor over the scale that would normally be calculated by SLSTAND. Parameter 3 has been reserved for other uses of the parameters that follow it, (for instance centring on the intersection of the testbeam and the detector) but is not interpreted in the current version.

## Chapter 9 SLUG Utilities and Faculties

The following documentation gives information on utilities available in SLUG. Some utilities are refered to as 'faculties'. This term was invented for aspects of SLUG (usually embodied in a group of subroutines that behave like virtual detectors; i.e., they have MODE and DETP banks and can therefore be controlled via these cards. Often the MODE card categories such as GEOM do not have relevance for these 'faculties' but usually the print levels are useful. In future, standard histograms associated with the faculties may be filled and controlled by the

HIST mode.

### 9.1 The Track Filter

The SLUG Track Filter System

It is very often the case that only a small number of the particles from a simulated event need to be fed into GEANT. This is most often because a detector covers a fixed but limited range of phase space, or because one is only interested in the particles surrounding a very specific particle such as an electron. The SLUG track filtering facility is designed to help the user select he particles that he wants.

The two examples above contrast in that, while in one case the region of phase space that needs to be retained is fixed, in the other case the region is different for every event. For this reason, two

ZEBRA data structures are used by the track filtering system. The

Track Filter Definition (TTL) banks contain the specification for cuts that the user enters in his datacard (see below).

The Track Filter Temporary (TTL) banks reside in the short-term

division and are therefore dropped between events. The routine

SLCHEK, called at the beginning of an event once the event is fully

read in or generated, fill these banks using the information in the

TFLD banks and the information from the GENE event structure.

The following track filter cuts are understood by SLUG. The cut name

plus the (REAL) parameters form the data part of the "TFLT datacard.

Cut Name Parameters

-------

ETAP Eta-phi cut 1 Minimum pseudorapidity D=-3.

2 Maximum pseudorapidity D= 3.

3 Minimum phi D= 0.

4 Maximum phi D= 2*PI

CONE Fixed cone 1 x component of cone axis

2 x component of cone axis* 4cone angle in radians (sorry!)
* 5SCONSmart cone 1particle to look for 2cone angle in radians 3minimum pt 4( for 5future 6use )

For example, the track filter card

* "TFLT'SCON' 11..1 20.

will find all the electrons with PT greater than 20 GeV/c, and keep only the particles within.1 radian.

A distinction should be made between the types of track filter listed above and the type of cut that each generates event-by-event. These are the entities stored in the TFLT banks. So far there are only rapidity-phi regions and cones:

* 10Eta-phi cut 1Minimum pseudorapidity D=-3. 2Maximum pseudorapidity D= 3. 3Minimum phi D= 0. 4Maximum phi D= 2*PI

1Fixed cone 1x component of cone axis 2y component of cone axis 3z component of cone axis 4cone angle in radians (sorry!)

The TFLT banks form a linear structure in ZEBRA, and a new TFLT bank is added to the structure every time that a new valid cone is found.

Below are listing the subroutines that make up the track filter system.

* 5SURROUTINE SFFLD(CFILT,NARG,ARG)
* 6Book the cut in a track filter cut description bank,TFLD.
* 7INPUT: CFILT 4-letter descriptor for type of cut 8ARG  number of arguments 8ARG  argument vector

Contents of Bank:

* 8QCILTLD-5Cut number (IDN of bank) 8QCILTLD-5Cut number (IDN of cut) 8ARG  number of cut IQ(LTFLD+2) Cut vector type generated by this cut IQ(LTFLD+3) Running total of # of times this cut produces a cut vector IQ(LTFLD+4) * * * * within exclusive acceptance IQ(LTFLD+5) - unused - Q(LFFLD+6) First parameter of cut Q(LTFLD+IQ(LTFLD-1) ) Last parameter of cut

 SUBROUTINE SLSCON(LTFLD,IVENT)

 Set up the temporary TFLT bank for the current event using the smart cone cut described by a TFLD bank:

 Q(LTFLD+6) particle to look for Q(LTFLD+7) cos of opening angle Q(LTFLD+8) minimum pt Q(LTFLD+9) ancestor to demand (not available yet) Q(LTFLD+10) maximum number to find (not available yet) IVENT IDN of event in LGEVT structure to look through (If IVENT=0, LGEVT = LKGSVT)

 SUBROUTINE SPTPLT

 Prints the present cut definitions

### The Magnetic Field Faculty

As of version 6 of SLUG, a crude apparatus has become available to input parameters for a magnetic field.Since GUFLD remains of necessity to be coded by the user or from an official set of code (e.g. DICE), the current usage is to provide a common means of entering parameters into that code.

 The 'MFLD' faculty of SLUG allows *MODE card levels to be set for magnetic field code: print levels, graphics, histograms, etc.. IN addition, real parameters can be input via a 'DETP 'MFLD' card. The current assignment of these real parameters is as follows:

 parameter 2 = Maximum coil field (Kilogauss) parameter 3 = Maximum toroid field(Kilogauss)

 For example,

 *DETP 'MFLD' 2=15. 3=15.

Two CCE sequences TEMPORARILY introduced from the DICE code to allow the integration of DICE code into SLUG, SCHFLD and SCTPAR, contain quantities relevant to magnetic fields.These are set to default values by MFLDDEF and initialized, after the datacards have been read, by MFLDINI. This assignments are to be viewed as a temporary apparatus to run the DICE code, not a premanent solution to the setting of magnetic field parameters or tracking medium parameters.

*KEEP, SCHFLD. COMMON/SCMFLD/FIELDCC,FIELD,CFFLAG,TFFLAG

LOGICAL CFFLAG,TFFLAG

REAL FIELDLC,FIELDCT

COMMON/SCMFLC/CMOTHE

CHARACTER* CMOTHE

C FIELDC - max field in coil

C FIELDT - max field in toroid

C CFFLAG - on/off for field in coil

C TFFLAG -. *. toroid

C CMOTHE - volume name for mother of detectors( SLUG of COIL)

*KEEP, SCTPAR. COMMON/SCTPAR/INONS,INONF,FIELD,TMAXFD,DMAXMS,

* DEBMAX, EPSIL, STMIN,TMUBUF

 REAL FIELD,TMAXPD,DMAXMS,DEBMAX,EPSIL,STMIN,TMUBUF(2)

INTEGER INONS,INONF

C INONF - on/off for field in the tracking medium

C FIELDT - max field in this. *. C (other parameters as in arguments to GSTMED)

A permanent top-level ZERRA link has been set aside for use by the

magnetic field faculty. This is for future use in relation to field maps

or other means of calculating the field at a position efficiently.

Users who might be developing such an apparatus (A future mag. field

guru?) is welcome to use this link for now.

## Chapter 10 SLUG ZERRA Banks

This section contains the definitions of all ZEBRA banks that are

introduced by SLUG. (For descriptions of the GEANT banks, see the

GEANT manual. Descriptions of GEME banks can be found in the GENIZ

manual.) The latest bank descriptions are available online by typing

HELP SLUG while linked to PUBZP 197 and then selecting *BANKS.

Bank DETE Detector/Faculty BankNL=1 NS = 1 ND = 10

Format : -I Up : LKDETM Origin : LQ(LKDETM-1) Next : 0

Links : -1 : User link to an optional DETP bank input via the "DETP card. The link is structural such that further links that might be pushed by the user will also be structural.

Data : +1 : the present print level. MODE card keyword = 'PNOW' +2 : the normal print level. MODE card keyword = 'PRIN' +3 : the debug print level. MODE card keyword = 'PDES' +4 : the geometry user mode. MODE card keyword = 'GEOM' +5 : the histogramming mode. MODE card keyword = 'HIST' +6 : the graphics mode. MODE card keyword = 'GRAP' +7 : the simulation mode. MODE card keyword = 'SIMU' +8 : the digitization mode. MODE card keyword = 'DIGI' +9 : the analysis level. MODE card keyword = 'ANAL' Notes: i) The various levels and modes are often not applicable for SLUG faculties. In these cases, in general, the print levels are always relevant, while the histogramming and graphics may be used at a later date.

Bank DETM Detector structure mother bank ------------

NL=var NS = var ND = var.

Format : -H Up : 0 Origin : 0 Next : 0

Links : -i : Link to i-th subdetector/faculty (DETE) bank

Data : +i : Hollerith of subdetector/faculty name

Bank DETP Detector Parameter Bank ------------

NL=0 NS = 0 ND = var q

Format : -R Up : LDETE Origin : LQ(LDETE-1) Next : 0

Link :SLUG - Simulations for LHC using GEANT

Data : +i - User data input via "DETP card

Notes: i) This bank is booked on demand from a "DETP card and takes the

length needed to accept the given information. The number of

parameters is therefore limited by the length of vector RRTEMP

in common SCTEMP.

Bank DETV Detector View Bank

................................

NL=0 NS = 0 ND = var q

Format : -I

Up : LDETE

Origin : LQ(LDETE-2)

Next : 0

Links :

Data : +i Geant view number as stored for bit i of the subdetector

graphics flag

Notes: i) This bank is filled (and booked if necessary) by the SLUG

utility SLSTOWN. For example,

CALL SLSTOWN('ECAL',2.IVIEW),

stores Geant view # IVIEW as word 2 in the subdetector RCAL's

DETV bank.

Bank IOMO I/O Link information Bank

................................

NL=3 NS = 3 ND = 3

Format : 1H -I

Up : LKROOT

Origin : LQ(LKROOT-3) or last LIOMO

Next : next LOMO

Links :

-1 : Link to job start IOLK banks.

-2 : Link to run start IOLK banks.

-3 : Link to event IOLK banks.

Data :

+1 : Single letter Hollerith input/output mode

+2 : I/O code (-1 for input, 1 for output)

+3 : Unit number

Notes : i)

Bank IOLK I/O Link information Bank

................................

NT : 1H -I -I

[MISSING_PAGE_FAIL:30]

*2 : Hollerith of default bank name +3.4: Hollerith of link area (incl. slashes,eg.,'/SCLINK') +5 : ZEBRA division number +6 : Offset of link area from LVROOT(1) +7 : Position of bank's link within link area Note: i) The top level link is, therefore, given by the expression  LVROOT(IQ(LTOPL+6)+IQ(LTOPL+7))  This can be passed directly into FZIN and FZOUT.

Bank TFLD  Track Filter Cut Descriptor Bank ------------ ------------

NL=0 NS = 0 ND = 11

Format : 4I -F  Up : LKTTFLM  Origin : LQ(LKTTFLM-1)  Next : 0

Links :

Data : -5 : Cut number (IDN of bank) +1 : Hollerith name for this cut. +2 : Code for temporary cut vector generated by this cut. +3 : Running total # of times this cut produces a cut vector +4 : * * * within exclusive acceptance +5 : -unused - +6 : First parameter of cut +IQ(LTFLD-1) ) : Last parameter of cut Notes: i) See the help for the track filter for meanings of temporary cut  codes and their parameter lists.

Bank TFLT  Track Filter Temporary Bank ------------

NL=0 NS = 0 ND = 11

Format : 4I -F  Up : 0  Origin : LKTTFLT or previous TFLT bank  Next : next TFLT bank

Links :

Data : +1 : Temporary cut vector code. +2 : IDN of TFLD bank that inspired this cut. +3 : IDN of GEVT bank for the inspiring event. +4 : IDN of the GPRT bank that inspired this cut. +5 : phase space of cut (units of eta-phi) +6 : first cut parameter.. +11 : last cut paramterSLUG - Simulations for LHC using GEANT page 28

Notes: i) See the help for the track filter for meanings of temporary cut codes and their parameter lists.

## Chapter 11 SLUG Common Blocks

The Fortran common blocks for SLUG are contained in the directory SLUGCDES of the SLUG CMZ library (i.e., Patch SLUGCDES ). The commons are listed in the online Help for SLUG, or available in the file COMMONS HELPSLUG on the ZP group disk.

To extract the directory SLUGCDES from the SLUG CMZ library, the following CMZ session could be used to put commons in fn.ft.fm:

FILE SLUG -R CTOY fn.ft.fm SLUGCDES EXIT

## Chapter 12 SLUG Datacards

The following datacards are either defined within SLUG alone, or are GEANT cards that are interpreted in a specific way by SLUG.

CARD Num type Description Default

ANAL 1 I Controls SLUG standard analysis (DUMBY AS YET) 1 I = 0, set ANALFL=.FALSE. D=1 = 1, set ANALFL=.TRUE.

*BKIO 5 M Book a specific top level link to a specific I/O mode.
1 C Single letter output mode. no default 2 C Four letter link specifier no default 3 C Four letter bank name. D = link specifier 4 C Single letter I/O stage name. D = 'E' 5 I I/O priority. Banks are written in D = 1 order of decreasing numerical value.

i) Examples:

* this books the Geant HITS bank for output every event.

* this books the bank with name GENE for reading on the primary

input stream, reading in to link GEN2. High priority.

ii) Possible I/O stage names are 'B' for 'event', 'R' for run start.

iii)Priority must be less than 1000.

 *DETP V M Accepts real parameters for a given detector, books a DETP

bank if necessary, and fills it with the parameters.

1 - name of a SLUG detector or faculty

i - floating point parameters. The maximum number of

parameters is 100. Parameter list inaccessible; the

first useable parameter is 2.

For example, the card

*DETP 'XCTP' 0. 4..123 7*4.6

sets a hypothetical detector's (XXTP's) parameters 2 to 0..

3 to 4..

4 to 0..123,

7 to 4.6

If the DETP bank exists, (for instance if the user has booked one

in the xcDEFA routine), then DETP just changes the values of the

parameters present in the DETP card. If a DETP bank has to be booked,

it is booked long enough to store the last initialized parameter.

Untialized parameters are set to zero.

 DIGI 1 I Controls whether to call GUDIGI or not.

1 I = 0, set DIGIFL=.FALSE. D=0

 = 1, set DIGIFL=.TRUE.

 *DREV V M Controls the DRawing of EVent graphics. Data is stored in

common block SCDREV.

1 C 'CDET' - subdetector name

2 I!SUBMV - subview of detector (1 for bit 1, 2 for bit 2 etc...)

3 I! MODREV - mode of operation (Not implemented yet) D=1

4 R  DREPOS(1)- x | Positions relevent for drawing off D=0.

5 R  DREPOS(2)- y | detector views (Centre for MODREV = 1) D=0.

6 R  DREPOS(3)- z |

7 R! ZOOM factor

e.g. *DREV 'ECAL' 2 4=100. 7=3.

This plots the event's tracks using the view controlled by bit 2 of the standard graphics. The centre of the plot will be at x=100 cm, y=0,z=0. A zoom factor of 3 will be applied over the default scale.

------------------------------------------------

KINE 11 M User control of event generation modes.

1 I Mode used to steer GUKINE. D=0 =1 Generate physics event time(GENEVT) =0 Generate single particle (SLBEAM) =-1 Read event from ZEBRA structure(RDEVENT) =-2 Read event from UA2 ZBOOK file (RDZBOO) =-3 HEPEVT event input (RDZPE) =-4 Read in non-standard format(UEVENT)

In the case of mode 0, the testbeam parameters are given by the TBPA card. For backward compatibility, the parameters may be entered as follows on the KINE card:

2 R PDG particle code D=11.( e-) 3 R minimum momentum (GeV/c) 40. 4 R maximum momentum (GeV/c) 40. 5 R minimum pseudorapidity -1. 6 R maximum pseudorapidity 1. 7 R minimum phi (in radians) 0. 8 R maximum phi (in radians) 2*pi

------------------------------------------------

*MODE V M Controls detector modes/flags/status

1 - name of a SLUG detector or faculty

2*i - keyword ( see list below)

2*i+1 - level to set for the preceeding keyword.

This datacard modifies the contents of the Detector/Faculties bank, DETE. For a description of this bank see HELP SLUG BANKS MODE. The datacard consists first of the four letter name of the detector or SLUG faculty that the card refers to. This is then followed by pairs of keywords and integers. Th possible keywords are

'PRIN' sets the normal print level

'DEBUG' sets the debug print level ( when IDEBUG=1)

'GEOM' sets the geometry mode ( 0 = no geometry ).

'GRAPH' sets the graphics mode word (See SLUG GRAPRICS help).

'HISP' sets the histogram level.

'SIMU' controls the setting up and storage of HITS (STEP routine)

'DIG' controls the setting up and filling of DIGI structure.

'ANAL' controls any standard analysis

'MFLD' flags for magnetic field. 0 = no field;

For example, the card

'MODE 'STIP' 'GEOM' 1 'GRAP' 2 'PRIN' 0normal print level to 0. The values of other levels are not changed from their defaults.

As another example, modifying a SLUG faculty,

"MODE 'TFUL' 'PRIN' 4

sets the print level for the SLUG track filter code to 4.

------

SIMU 1 I Controls simulation in GEANT

1 I = 0, set SIMUFL=.FALSE. D=1

= 1, set SIMUFL=.TRUE.

------

*TBGE V M Sets up SLUG testbeam mode geometry

2*i-1 - name of SLUG detector

2*i - z position relative to origin

The presence of a *TBGE (testbeam geometry) card tells SLUG that the

geometry desired is like that for testbeam. The card is interpreted as

follows:

*TBGE 'delt' z1 'det2' z2 'det3' z3.........

where 'detti' is the outermost volumes for subdetectors ( subdetector

mother volumes ). This switches a logical variable TSTBFL in common

block SCFLAG to.TRUE.. If this flag is.TRUE.,users' geometry routines

should not position their outermost volumes(I call this the subdetector

mother volumes). After all user geometries have been executed, SLUG then

positions each subdetector mother volume on the z axis at the z position

indicated for that volume.

In many cases, there will only be one such outermost mother volume for

a particular subdetector. In such a case, the name used for the mother

volume should be the same as the name declared to SLUG in SDPETE calls,

(The official SLUG subdetector name) though this is only for clarity.

------

*TBPA V M Parameters for testbeam; 'collider style' or linear.

1 I mode = 0 mode = 1

( for collider geometry) ( for testbeam geometry)

2 R PDG particle code

3 R minimum momentum momentum (GeV/c)

4 R maximum momentum elevation angle

5 R minimum eta lateral angle

6 R maximum eta momentum spread (rms)

7 R minimum phi vertical angular spread (rms)

8 R maximum phi lateral angular spread (rms)

Notes:

1) Position of the horn origin is taken from the upper end ii) "TBPA with l=0 has the same arguments as the old KINE card testbeam facility, which continues to work iii) This card is not coupled to the TBGE card, so that running with "TBPA 1 will put a particle down the z-axis even if there is no TBGE card. ------------------------------------------------
*TFLT 7 M Set up track filters
1 C Hollerith name of the cut type i R Parameters for the cut. See Help info for TRACKFLT.

VERT 6 R Vertex information ( given in cm)
1 R Average x position of interaction 0.
2 R Average y position of interaction 0.
3 R Average z position of interaction 0.
4 R Rms of interaction point in x 0.0015
5 R Rms of interaction point in y 0.0015
6 R Rms of interaction point in z 5.0

### 13 Generators Interfaced to SLUG

Some code exists in SLUG for interfaces to PYTHIA (version 5) and to GENCL, the UA5 Minimum Bias event generator.

The output of the interface code for generators is handled byCMZ 'SELects' ( e.g SELECT PYTHIA, SELECT GENCL ).The code for the interfaces resides in the various patches of GENCLNG CME. In addition, some high-level steering between the generators is present in the routines of patch GENCODE of SLUG. These patches must therefore be recompiled in a generator job, with the proper SELECTrin effect. These additions to the standard KUMAC files can be seen in the example files.

In addition to using a modified KUMAC file, the event generator code itself must be supplied in the form of a library or object file. On IBMAs, TEXT files are more reliable in supplying the generator's BLOCK DATAs. For example, for PYTHIA5, files such as PYTHIA56 TEXT and JETSET73 TEXT need to be loaded, which can be done from the the ATLBM panel.

It is foreseen that the above two generators will remain in SLUG as package.

### Pythia

An interface to PYTHIA exists within SLUG. PYTHIA events are generated in the subroutine GENEVT if the first argument of the GEANT KINE card is > 0. The code accessed by GENEVT must be forced to be compiled by using a special CME macro file (KUMAC file) that contains the following: The CME 'SELC'. SELC PYTHIA, to flag the GENCL parts of the code for compilation) and a CTOF command with the patches //GENSLUG/PYTSET/* and //SLUG/GENSCODE/* included in the list of things to be compiled. E.g.:

CTOF -R //GENSLUG/PYTSET/* //SLUG/GENSCODE/* //SLUG/SLUGOCORE/SLMAIN SUSE

Example KUMAC files for PYTHIA can be found in SLPYIBM KUMAC for SLUG and in DIPYIBM KUMAC for SLUG+DICE.

PYTHIA5n and JETSET7n must also be included in the text files that must be included in the libraries to be loaded with SLUG.

PYTHIA events can be added as background using the BACK card by setting its first parameter > 0. Again, the CMZ commands listed above must be present in the KUMAC file, and PYTHIA5n and JETSET7n TEXT must be loaded with SLUG. The second parameter of the BACK card must be set equal to 1 indicating that the generator adds its events at the GENZ level. See the help file for the BACK card for further information on its parameters.

A set of datacards for PYTHIA has been defined which allows the PYTHIA parameters to be set. These FFFREAD cards are the same as those used in MCGENKL/U2GENN. Consult the UA2GENN writeup for the definition of these cards.

### Gencl

An interface to GENCL as a generator of background events is present in SLUG. GENCL events are generated in the subroutine GENKIN if the first argument of the BACK card is > 0. Because the events are added at the GEANT KINE bank level, the second argument of the BACK card must be 2.

To compile the correct code for a job interfaced to GENCL, the CMZ SELECT GENCL must be present and the routines in patches //SLUG/GENSCODE/ and //GENSLUG/GCLSET/* must be compiled.

Example KUMAC files for this can be found in SLGCIBM KUMAC for SLUG and in DIGCIBM KUMAC for SLUG+DICE.

GENCL TXTLIB must be included in the libraries to be loaded with SLUG.

See the help file for the BACK card for further information on its parameters.