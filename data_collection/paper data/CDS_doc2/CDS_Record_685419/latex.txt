# Dead Time in the LAr Calorimeter Front-End Readout

D.M. Gingrich & S. Liu,

_University of Alberta_

October 7, 2002

We present readout time, latency, buffering, and dead-time calculations for the switched capacitor array controllers of the LAr calorimeter. The dead time is compared with algorithms for the dead-time generation in the level-1 central trigger processor.

## 1 Introduction

The switched capacitor arrays (SCA) provide the level-1 trigger latency and front-end de-randomizing buffers for the LAr calorimeter. The SCA controllers set the trigger latency and control the input and output of the front-end buffers. The ATLAS level-1 trigger system issues accept signals to the SCA controllers. The level-1 trigger system also incorporates a dead-time generator that inhibits the trigger-accept signals when the readout buffers are almost full.

## 2 Level-1 Trigger Parameters

The LHC bunch-crossing frequency is 40.08 MHz. To the accuracy of the calculations presented here, we take the LHC clock period to be 25 ns.

There will be 3564 bunches in the LHC, of which 2808 will be filled. The maximum level-1 trigger rate integrated over many full machine cycles, including gaps, will be 100 kHz. The front-end boards must be able to initially handle 75 kHz, but be up-gradable to 100 kHz.

The design of the level-1 trigger system aims at a trigger latency of less than 2 \(\mu\)s. A 500 ns contingency has been added to this latency [1].

## 3 SCA Controller Parameters

The SCA write operations occur every 25 ns, while the period of the SCA read clock is 200 ns [2]. The number of SCA capacitor addresses is 144.

## 4 Front-End Readout Buffering

We present the parameters of the SCA controller readout buffering. A clock cycle is defined to be 25 ns.

### Readout Time

The \(readout\_time\) is the time required to readout each event. More specifically, it is the time required to transfer the sample commands from the SCA controllers to the gain selectors, plus some time required by the gain selectors before they can accept more sample commands.

The \(readout\_time\) is given by

\[readout\_time=[(9+insert)\times n\_samples+peak]\times 8\times 25\ \mathrm{ns}, \tag{1}\]

where

the factor of 8 converts 200 ns read clock cycles to 25 ns clock cycles.

The factor of 9 is the number of clock cycles required to serially shift out each 8-bit sample command from the SCA controllers to the gain selectors.

\(n\_samples\) is the number of time samples read.

\(peak\) is extra clock cycles required by the gain selector. The values are

8 for auto-gain mode and

5 for fixed-gain modes.

\(insert\) is the number of clock cycles inserted between sample commands required by the gain mode. The values are

0 for auto- or single-gain modes,

8 for double-gain mode, and

16 for triple-gain mode.

For 5 samples in auto-gain mode,

\[readout\_time=[(9+0)\times 5+8]\times 8\times 25\ \mathrm{ns}=424\times 25\ \mathrm{ns}=10.6\ \mathrm{\mu s}. \tag{2}\]

The \(readout\_time\) depends only on the number of samples and the gain mode. It has a fixed value during the run.

### Readout Latency

The readout \(latency\) is the time between when the trigger accept signals are received at the SCA controllers until the capacitor addresses are inserted back into sequence in the pool of free capacitor addresses.

The readout \(latency\) is given by

\[latency=(readout\_time+trig\_delay+read\_time+seq\_time)\times 25\ \mathrm{ns}, \tag{3}\]

where\(trig\_delay\) is the number of clock cycles between the arrival of the level-1 trigger accept signals at the SCA controllers and when the readout state machines starts. The actual value depends on the phase of the 200 ns clock with respect to the accept signal arrival time. The value can range from 9 to 16 clock cycles. \(read\_time\) is the time required by the read cycle in the SCA controllers. The value is fixed at 88 clock cycles. \(seq\_time\) is the time required to insert the addresses of the read capacitors back into sequence in the pool of free capacitor addresses. The value depends on the history of the timing sequence of the trigger accepts. 143 is the maximum number of clock cycles required.

For the maximum readout \(latency\) parameters and the nominal \(readout\_time\),

\[latency\leq(424+16+88+143)\times 25\ \mathrm{ns}=671\times 25\ \mathrm{ns}=16.775 \ \mu\mathrm{s}. \tag{4}\]

### Buffer Space

The derandomizing _buffer_ space is the number of events that can be stored in the SCA on top of the trigger latency pipeline. The number of _buffers_ is given by

\[\textit{buffers}=\frac{144-trigger\_latency-L1A\_delay}{n\_samples}, \tag{5}\]

where

\(trigger\_latency\) is the trigger latency in units of 25 ns clock cycles. \(L1A\_delay\) is the extra clock cycles from when the level-1 trigger accept signals arrive at the SCA controllers until they propagates to the logic that pushes the SCA address onto the read FIFO. The values are

1 for non-encoded triggers and

2 for encoded triggers.

For the case of maximum trigger latency of 2.5 \(\mu\)s, 5 samples, and encoded triggers,

\[\textit{buffers}=\frac{144-100-2}{5}=8.4\sim 8. \tag{6}\]

## 5 Modelling Parameters

At any random trigger rate, there is a finite probability that there will be no free SCA capacitors available for writing. Therefore the triggers have to be inhibited during periods when the free capacitor address FIFO is almost empty. In ATLAS, the triggers will be inhibited by the central trigger processor (CTP) dead-time generator. The CTP will count the number of triggers and generate dead time if the buffers are nearly full.

We present the dead time of the SCA controller as a function of the trigger parameters. Modelling the SCA controller dead time is complicated by the fact that the readout latency of the SCA controller is variable and depends to some extend on the entire history of the level-1 trigger accept time distribution since the last initialization was performed. The results of the dead-time algorithms that will be implemented in the CTP are compared with the SCA controller dead time for different trigger parameters. Throughout this note we speak of the event buffer filling up. However, in the SCA controller this means that the free FIFO has "underflowed", or in other words there are no free capacitors in the SCA that can be written to.

### Parameter Space

The parameter space covered by the models is

\[2.0\ \mu\mathrm{s}\leq trigger\_latency\leq 2.5\ \mu\mathrm{s}\quad \mathrm{and}\] \[75\ \mathrm{kHz}\leq R\leq 100\ \mathrm{kHz}.\]

The range of trigger latencies require \(82-102\) capacitor addresses to be stored in the SCA controller latency FIFO when the trigger accept signals are encode. This leaves \(42-62\) capacitor addresses free to be used as a derandomising buffer. For 5 samples per event, this gives an event buffer range of \(8.4-12.4\). For models that queue events, we use an integer buffer range of \(8-13\). This integer buffer range corresponds to the trigger latency range of

\[1.925\ \mu\mathrm{s}\leq trigger\_latency\leq 2.550\ \mu\mathrm{s}.\]

### Trigger Model

The distribution of the triggers is binomially distributed in each filled LHC bunch. The probability of a trigger accept signal is calculated using the mean level-1 trigger accept rate \(R\). In most simulations the LHC bunch filling scheme is taken into account according to the so-called 72 bunch scheme in the PS [3]. Thus no triggers will be generated in empty LHC bunches and the triggers occurring in the filled LHC bunches will occur at a rate such that the average rate over all bunches (filled and not filled) is \(R\).

In most simulations we do not allow two consecutive level-1 triggers to be separated by less than 4 un-triggered bunch crossings (125 ns). We have not re-adjusted the mean of the trigger distribution to compensate for the lost of triggers due to the dead time of this algorithm. This "simple dead-time algorithm" can be implemented in the CTP [4]. We find that the algorithm introduces a dead time of 0.7% at a 75 kHz trigger rate and 1.0% at a 100 kHz trigger rate. We obtain agreement with reference [4] only if we use a "constant time" of 5 bunch crossing rather than 4 as stated in the reference.

## 6 Verilog Model of SCA Controller Dead Time

The verilog model of the SCA controller has been used to simulate the dead time. Each time the free FIFO goes empty, the triggers are inhibited. The inhibit is released when addresses are placed back into the free FIFO. This is an ideal model that represents the dead time of SCA controller only. The triggers are required to be separated by more than 125 ns but the dead time due to this algorithm is not counted against the dead time due to the SCA controller. The dead time versus trigger rate for different trigger latencies is shown in figure 1.

## 7 Constant Readout Time Models

The simplest model of the SCA controller considers the readout process to take a fixed time period. If the triggers are poisson distributed and the readout time is constant, an analytical solution for the dead time exists and is given by [5]

\[d_{N}=1-\frac{S_{N}}{1+\rho S_{N}}, \tag{7}\]

where \((N-1)\) is the number of buffers, \(\rho=R\tau\), \(R\) is the trigger rate, \(\tau\) is the processing time, and

\[S_{N}=e^{N\rho}\sum_{j=0}^{N-j}\frac{(N-j)^{j}(-\rho e^{-\rho})^{j}}{j!}. \tag{8}\]

The difficulty with using this simple model is what to use for the processing time, \(\tau\)? The processing time should have a value somewhere between the \(readout\_time\) and the

Figure 1: Dead time versus trigger rate for different trigger latencies, for a verilog simulation of the SCA controller. (0.55 s simulation time.)

maximum \(latency\) as defined above. Figure 2 shows the dead time versus trigger rate for different trigger latencies, for the case of possion distributed triggers and a constant readout processing time given by the \(readout\_time\).

This is a simple model and only overestimates the dead time at most by 1%. The model could not be implemented in the CTP, although it is useful for hand calculations. Since events are being queued in this model, the number of buffer is an integer and thus each dead-time curve covers a range of trigger latencies.

For other trigger distributions, we can no longer use an analytical form for the dead time and thus we have written a simple simulation program. From now on it is implicit that the more realistic trigger model that requires a gap of 4 bunch crossings has been included. Figure 3 shows the dead time versus trigger rate for different trigger latencies in which the triggers must be separated by at least 4 bunch crossings, for the case of possion distributed triggers and a constant readout time given by the \(readout\_time\). Using this more realistic trigger model, adds 0.7% to 0.8% to the dead time of the model.

## 8 Leaky-Bucket Model

A simple model to implement in the trigger processor is the "leaky-bucket" model [4]. As long as there are events in the buffer, a counter is decremented each clock cycle. When a level-1 trigger accept signal is generated, the counter is incremented by a value given by the \(readout\_time\). If the counter goes above the, so called, _high-water_ level, the triggers

Figure 2: Dead time versus trigger rate for different trigger latencies, for poisson distributed triggers and constant readout time of 10.6 \(\mu\)s.

are inhibited. The triggers are asserted again when the counter drops below the _high-water_ level.

The difficulty with this model is determining the _high-water_ level. To reduce the dead time we want to use as high a value as possible. Yet since the leaky-bucket model is still a model, there is a possibility that the buffers will overflow if too high a value for the _high-water_ level is chosen. By running the real hardware for periods of about 48 hr, we have determined the approximate optimal values for the _high-water_ levels shown in table 1 for different trigger latencies.

Figures 4 and 5 show the dead time and mean-water level, respe

\begin{table}
\begin{tabular}{|c c|} \hline Trigger Latency & High-Water Level \\ (\(\mu\)s) & (\(\mu\)s) \\ \hline
2.550 & 72.100 \\
2.425 & 82.800 \\
2.275 & 97.050 \\
2.175 & 104.400 \\
2.075 & 112.650 \\ \hline \end{tabular}
\end{table}
Table 1: Approximate high-water levels for different trigger latencies.

Figure 3: Dead time versus trigger rate for different trigger latencies, for poisson distributed triggers with at least a gap of 125 ns and constant \(readout\_time\) of 10.6 \(\mu\)s. (1 s simulation time.)

rate for different trigger latencies, using the leaky-bucket model. The leaky-bucket model overestimates the dead time by at most 2%. This is because we have used safe _high-water_ levels that ensure the free FIFO will not underflow. The mean water level is at most 56% full.

## 9 Discussion

The verilog simulation of the dead time should be realistic. Unfortunately, the simulation runs with small time steps and we have thus only run the simulation for about half a second of real time. There is a chance the buffers have not reached a steady state by this time.

Since the readout latency of the SCA controller is variable, a realistic model of the level-1 trigger dead-time generator must take this variability into account. Clearly this is not possible at the global ATLAS level were more than just the LAr calorimeter participates in the trigger.

Compared to the verilog simulation, the leaky-bucket model appears to give dead times accurate to better than about 2%. Unfortunately, there is a tradeoff between dead time and ensuring that the free FIFO does not underflow when choosing the _high-water_ level. Obtaining values for the _high-water_ level using hardware on the bench is not easy. In ATLAS, it should be a simple and quick study to obtain optimal values. Most likely other detector systems in ATLAS will have different buffering requirements that may make the determination of optimal _high-water_ levels meaningless.

Figure 4: Dead time versus trigger rate for different trigger latencies, for the leaky-bucket model. (10 s simulation time.)

We point out a subtle feature of the SCA controller operation when the free FIFO has underflowed. When the free FIFO underflows invalid capacitor addresses are written to. These invalid addresses are stored in the trigger latency FIFO and will be discarded if the level-1 trigger accept signal does not arrive when they are popped out of the latency FIFO. However if the trigger accept signal does arrive at this time, the data for that event will be meaningless. In this way, the SCA controller can still operate correctly during brief periods even when the free FIFO is empty. If the free FIFO underflows, a bit in the status register is set and this condition will be flagged in the data stream. The free FIFO underflow condition must eventually be recognized and the triggers inhibited, or the read FIFO could eventually fill up with invalid addresses.

## 10 Results

The dead-time requirements are less than 1% at 75 kHz and less than 6% at 100 kHz trigger rates [1]. With the current system, we begin to violate the 6% requirement only above a trigger rate of 95 kHz. If the leaky-bucket model is used with safe _high-water_ levels, the 1% requirement at a 75 kHz trigger rate will be violated above a trigger latency of about 2.1 \(\mu\)s. The 6% requirement will be violated at a trigger rate of between 90 kHz to 95 kHz, depending on the trigger latency.

Figure 5: Mean water level versus trigger rate for different trigger latencies, for the leaky-bucket model. (10 s simulation time.)

[MISSING_PAGE_FAIL:10]