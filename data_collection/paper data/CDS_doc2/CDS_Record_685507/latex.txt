**A public program to get the magnetic field of ATLAS**

**in any point**

T.Nikitina, Universite de Besancon, France

Abstract

This note presents a Fortran 90 public program which gives the magnetic field of the ATLAS detector in an arbitrary point. In the tilecal the user has the possibility to obtain a global (average) field or a local field (individual tiles are visible). The contribution of all coils is included.

The model used for the calculation is described in note ATL-MAGNET-2001-02.

## Introduction

After the development of a model for the calculation of the Atlas magnetic field [1], a postprocessor for public use was created. The idea was to build a program that users can change and include in their applications.

The postprocessor is written in Fortran90, many comments are added. The f90 language gives better structured and more readable code than f77, in addition it gives the possibility to use dynamic memory allocation and pointers. Dynamic memory allocation and pointers are used to obtain a nodal averaged solution. In this case, for the nodes which are in elements of different material, the nodal values of the field must be stored separately for each material. Use of pointers permits fast access to the nodal averaged field for each node and it gives elegant code.

Other advantages of the postprocessor is that it is compact and fast. As the mesh of the model is regular, the element in which a given point is situated is found fast. The data base with parameters of the model and solution is reduced to 4.5 MB only.

The postprocessor has different options:

- global or local field in tileal, girder and fingers

- nodal averaging on/off

- coil fields on/off

All figures are made with Matlab [6].

## 1 Model used for the calculations

The model was described in [1]. It includes the iron of tileal, girder, fingers, crack region and shielding plate. The mesh covers only 1/16 of total space using the symmetry of the detector. It represents 45 degrees in the xy-plane(\(x\), \(y\geq 0\), \(y\geq x\)) and \(z\leq 0\). In the postprocessor the magnetic field is extended to the total space.

The tileal and the spokes in the girder are not build in detail but they are replaced by homogeneous material, since it is impossible to model the tiles in detail. For the tileal a material with two lamination factors in z- and \(\phi\)-directions is used [2]. For the spokes in the girder and the fingers a material with one lamination factor in \(\phi\)-direction is used. The local field (tiles, plates, scintillators or spokes) is reconstructed in the postprocessor by formulas from [1] and [2].

The approximation of the tileal with two lamination factors permits to have a model that can simulate an air gap ( for the moment set to 1.5 mm) between the 64 segments of the tileal. This is impossible in commercial programs as Tosca and Ansys. The effect of the air gaps is a higher penetration of the magnetic field inside the tileal. The maximum of the magnetic field inside the tileal is around 0.3 T, as one can see from fig.1. In the model without air gap between the segments the magnetic field goes mainly through the girder [1]. From fig.1b and 2 follows that the magnetic field inside the tileal is quite asymmetric. This asymmetry is caused by interference between the field of toroid and solenoid. This effect can have influence on the trajectory of particles, especially on the matching of tracks between inner detector and muon spectrometer.

For the magnetic field calculations a two-scalar potential method was used, see [5]. The solution gives the total field for the iron regions, and only the contribution of the iron in the air region where the coils are situated. Thus in the air region the coil field must be added. In the past it was done using Tosca [8]. Now the toroid field is calculated by a program from the Saclay Muon Software Group (SaMuSoG), the solenoid field is calculated by formulas from [3] and [4]. For details on the coil field calculations see the comments of the program 'atlmp.f90'.

A new fast iterative solver from [7] was installed. This solver uses the Jacobi conjugate gradient algoritm and economic storage of the matrix. The new solver permits to increase the number of nodes drastically. For the present model a number of 200.000 nodes was chosen because it gave enough precision. This is possible because of the economic methods applied: the tilecal approximation using two lamination factors and the two-scalar potential method [5] (the mesh has to be dense only in and around the iron). A number of nodes in excess of \(10^{6}\) will be possible.

## 2 Using the program

The user has to give his xyz-coordinates in the input file 'input1.dat'. The dimensions are in meter, the beam-axes is the z-axes, y is up and the system is right-handed. After running the post-processor the corresponding values of H\({}_{\rm x}\), H\({}_{\rm y}\), H\({}_{\rm Z}\) and B\({}_{\rm x}\), B\({}_{\rm y}\), B\({}_{\rm Z}\) can be found in the file 'out-put.dat'. As default option, the global field is given in the tilecal, local field is given in the girder and in the fingers, the coil field is added in the air region. Calculation of the coil field takes some additional time. If the user is interested only in the contribution of the iron in the air region, it will be better to change the coil field option ihs (see paragraph 4.3).

### Which files do you need?

-postprocessor: atlmp.f90

-data base with parameters of model and solution: testbtp.dat

-input file with xyz-points in [meter]: input1.dat

### Where they are?

-on the website http: //cern.ch/ fxb/atlm

There are also some examples of the input files. To use these files, the name of the input file in the program has to be changed. This name is given in the module 'param', witch is situated in the beginning of the program 'atlmp.f90'.

### Compilation

-on LXPLUS using pgf90

-on NICE using Compaq Visual Fortran

### Results

The results are put in the output file'output.dat'. For each given xyz-point 6 numbers are written in the output file: H\({}_{\rm x}\), H\({}_{\rm y}\), H\({}_{\rm Z}\) in [A/m] and B\({}_{\rm x}\), B\({}_{\rm y}\), B\({}_{\rm Z}\) in [Tesla]. To obtain B in [Gauss] in the program 'atlmp.f90' the value of variable mu0 has to be changed to 4*\(\pi\)*10-3.

### 2.5 Examples

On fig.1a the magnetic field corresponding to the input file 'input1.dat' is shown. This input file represents the XY-plane at z = 0.0 m. Radius=sqrt(x\({}^{2}\)+y\({}^{2}\)) changes from 1.5 m to 6.0 m. As the default option of the postprocessor is chosen, the global field is given in the tThe input files 'inpgd1.dat' and 'inpfn1.dat' give a 'closer look' to the girder and the fingers respectively. They represent the XY- plane with radius changing from 3.5 m to 4.5 m and the angle \(\phi\) changing from 90 degrees to 45 degrees. Z is equal to 0.0 m for the girder and Z is equal to -3.0 m for the fingers. Fig.3a,b gives the magnetic field in the girder, corresponding to the input file 'inpgd1.dat'. Fig.3a gives \(|\)B\(|\)- field, fig.3b gives sqrt(B\({}_{\rm x}^{2}\)+B\({}_{\rm y}^{2}\)). Fig.3c,d represent the magnetic field in the fingers, corresponding to the input file 'inpfn1.dat'. Fig.3c gives \(|\)B\(|\)- field, fig.3d gives sqrt(B\({}_{\rm x}^{2}\)+B\({}_{\rm y}^{2}\)). The maximum of the color scale is 1.5T.

Fig.3 Magnetic field in [T] in the girder and in the fingers.

Fig.3a,b Field in the girder at z = 0.0m

Fig.3c,d Field in the fingers at z = -3.0m

## 3 Structure of the program

As the program code is public, it can be changed, for example the way input/output data is handled. To help the user, many comments were added. In this paragraph a short overview is given, more detail can be found in the program comments.

The postprocessor is a Fortran90 program 'atlmp.f90'. It requires the files'testbtp.dat' and input file 'input1.dat'. The program 'atlmp.f90' uses two modules, they are situated in the top of the program. Module 'param' contains the dimensions of the model (number of nodes and elements), name of the data base ('testbtp.dat') and names of the input and output files ('fname1',fname2'). Second module used in the program is 'toroidini'. This module initializes the parameters of the toroid coils.

The main program 'atlmp.f90'contains three parts. In part I all used variables and switches are initialized. There are four main switches (variables):

-iloct gives global or local field in the tileal

-ilocg gives global or local field in the girder and in the fingers

-ihs is used to switch on/off the calculation of the coil field in the air around the iron region

-naverag gives nodal averaged or not nodal averaged field.

Defaults are: iloct=1 (global field in the tileal), ilocg=0 (local field in the girder and in the fingers), ihs=0 (the coil field in the air is added), naverag=1 (averaged field). For more details see paragraph 4.

In part II of the program the list of nodes, elements and materials is reconstructed from the data base 'testbtp.dat', using subroutine 'list'. In the same part the nodal field data base'hn0' is created. This data base is used for the calculation of the nodal averaged field.

In part III the coordinates of points are red from the input file, the corresponding magnetic field is calculated and the results are written in the output file. This part also includes some examples how the input files were created.

## 4 Options of the postprocessor

As mentioned in previous paragraphs, the postprocessor has different options for the local field, averaged field and coil field. For changing these options the values of corresponding variables (switches) have to be changed. They are situated in the program 'atlmp.f90' in part I.

### Global/local field switches iloct and ilocg.

In the model used for the calculations, the tileal is not meshed exactly, but it is approximated using homogeneous material. For the reconstruction of the local field formulas from [2] are used. They give the field in the tiles, scintillators and plates. To obtain the local field the value of the switch iloct has to be changed to 0. In this case the user has to be careful with the input xyz-values. The dimensions of the tiles, scintillators and plates are very small in the z-direction, they are between 0.004 m and 0.005 m. Thus, for the visualization of the details, the distance between the input points in the z-direction must be smaller that 0.004m. On the website you can find an example of an input file for the tileal reconstruction. It is called 'inptl1.dat' and it shows a part of the tileal in the YZ-plane. Y changes from 3.0 m to 3.45 m and z changes from -1.5 m to -1.545m.

In figure 4 one can see the local field (sqrt(B\({}_{\rm r}^{2}\)+B\({}_{\rm z}^{2}\))) for this part of the tileal at z = 0.0 m, at z=-1.5 m and at z=-2.0 m. The picture in the center corresponds to 'inptl1.dat'.

Figure 5 gives the layout of the tiles with different field configurations.

Figure 5: The schema of the magnetic field in the tilecal

In fig. 5 two cases are shown: first case with the global magnetic field perpendicular to the plates and second case with diagonal global field.

When the global field is perpendicular to the plates, the local field in the plates goes up and down with the same absolute value. This case is corresponding to the left picture of fig.4(at z = 0 m).

When the global field becomes diagonal, the local field in the plates gets different 'up' and 'down' components. The more the global field is parallel to the plates, the more one component will dominate. This effect can be seen in the center and in the right pictures of fig.4.

In the present model girder and fingers are not meshed exactly but simulated using a lamination factor in the \(\phi\)-direction. In the postprocessor they are reconstructed, as shown in fig. 3. But it is possible to have the global field in this region by changing the value of switch ilocg to 1.

### Coil field switch ihs.

As default the variable ihs is set to 0 and the coil field is added in the air around the iron region.The coil field calculation takes some time. If you are only interested in the contribution of the iron in the air region without coil field, change the value of ihs to 1. It will give the total field in the iron and only the contribution of the iron in the air region.

It can be interesting to see the field from the magnetized iron only, without coil contribution. For this reason the third option was added. If the value of ihs is equal to 2, the coil field is subtracted from the total field inside the iron.

Fig.6 gives \(|\)B\(|\) in the RZ-plane at \(\phi=78.75\) deg. for the three possibilities of the coil field switch ihs. Fig.6a shows the magnetic field in the case of ihs=0 (default option). The solenoid and toroids coils are included, in the tilecal the total field is given. Fig.6b shows the case with ihs=1. In this case the field in the tilecal is total, but in the air the coil field is not added, only the contribution of the iron is present.

Fig.6c shows the case with ihs=2. Only the contribution of magnetized iron is shown. For the air region it gives the same result as fig.6b, but in the tilecal the coil field is subtracted.

Fig.6 The his options shown in the RZ-plane.

### Averaged field switch naverag.

To give the nodal averaged magnetic field the nodal field data base 'hn0' is created in the top of the program (part II). In this data base for each node the averaged field is stored. To obtain this averaged field first the nodal field in each element, containing this node, is calculated. Then the calculated values are averaged using the solid angles of the elements as a weight. For the nodes with different materials, the averaged nodal field is stored separately for each material using dynamic memory allocation and pointers.

Once the data base 'hn0' is created, for a given point the averaged magnetic field can be quickly calculated. Due to the regularity of the mesh it is easy to find the element in which a given point is situated. The averaged field is directly calculated from 'hn0' using interpolation.

It is also possible to obtain the non-averaged field by changing the value of variable naverag to 0. In this case the magnetic field for each point will be calculated directly from the solution without using 'hn0'.

## 5 Conclusions

Present postprocessor gives the values of the magnetic field in the ATLAS detector in any point. It is written in Fortran 90, compiled on LXPLUS using pgf90 and on NICE using Compaq Visual Fortran. Due to the used regular mesh the program is fast and compact, it has a data base with only 4.5MB. The code is public and includes many comments, so it can be adapted for other applications, such as tracking.

## 6 Next

The model will be kept up to date with the changes in the ATLAS design, for example the size of the air gap between the end of the girder and the shielding plate, changes in the dimensions of the fingers and of the crack region, changes in the tilecal after its assembling (air gap between the segments), etc.

A better aproximation of the tile calorimeter is in preparation. The theory of homogenization for periodic structures will be used. This will give rise to non-diagonal components in the homogeneous permeability tensor. The description of this technique can be found in [1], appendix II. This project is developed together with the Laboratory of Scientific Calculation at the University of Besancon.

Another project is the study of the influence of the field in the tile calorimeter on the trajectory of particles, especially on track matching between inner tracker and muon spectrometer. The idea is to make a simple, 'home-made' program for tracking of single particles to study the influence of the global and local field. If a significant effect will be found, a more profound study using general programs as GEANT can be envisaged.

## Acknowledgements

The auteur wish to thank the Saclay Muon Software Group (SaMuSoG) for the program to calculate the field of the toroids.

## References

* [1] F.Bergsma, T.Nikitina 'A program to calculate the Atlas magnetic field' internal note ATL-MAGNET-2001-002
* [2] F.Bergsma 'Calculation of the average magnetic permeability of the ATLAS tile calorimeter' internal note ATL-MAGNET-2001-001
* [3] M.Guimesi, D.Lavers, T.Pawlak, D.Ostergaard 'Biot-Savart Integration for Bars and Arcs' IEEE Transactions on Magnetics, vol.29, N6, november 1993
* Revisited' BIT, Vol.40, 2000, pp.84-101.
* [5] K.J.Binns, P.J.Lawrenson, C.W.Trowbridge 'The Analytical and Numerical Solution of Electric and Magnetic Fields' John Wiley&Sons Ltd., 1994
* [6] MATLAB, The MathWorks, Inc. www.mathworks.com
* [7] ITPACK 2C software package from the Center for Numerical Analysis, University of Texas at Austin, www.ma.utexas.edu/CNA/ITPACK
* [8] OPERA-3d reference manual Vector Fields Limited, 24 Bankside, Kidlington, Oxford, OX5 1JE, England