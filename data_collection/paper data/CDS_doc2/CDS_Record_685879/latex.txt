**ATLAS Internal Note**

**INDET-NO-042**

**14 March 1994**

Feasibility Study Towards Optical Control

of Micro-Strip Chambers

V.Cerny*

Footnote *: Institute of Physics, Faculty of Mathematics and Physics, Comenius University,

Mlynska dolina, 842 15 Bratislava, Slovakia

e-mail: cerny@fmph.uniba.skIntroduction

Micro-strip gas chambers (MSGC) [1] are promising detectors for high energy physics for situations where good tracking close to the interaction point is needed. This new type of detectors consists of thin parallel metal strips layed down on a substratum. The strips act as anodes and cathodes of the chamber. Typical spacing between the anode electrodes is of the order of 200 \(\mu\)m. The typical length of the strips is of the order of 5 to 10 cm on standard wafers, even larger lengths up to 50 cm are possible using different technologies. A typical layout of the electrodes int the MSGC is shown in Fig.1.

The whole technology is rapidly developing and various problems are still to be solved. Among the problems one also mentions disruptions of strips. For durable operation under extreme conditions it is necessary to assure the quality of the strip edges and to exclude usage of defective strips like those presented in Figs. 2, 4 and 6.

It is difficult to find such edge defects by means of electric control. The optical control is a clear option here.

We have investigated the possibility to use computer picture processing and pattern recognition methods to detect defective spots like defective edges or disrupted strips on a small sample of microphotographs. Our study was meant as a feasibility study concerning a possible larger project of building an semiautomatic device capable of performing optical quality control of strips.

## 2 Hardware considerations

Image processing and recognition is a rapidly developing field of computer technology with lots of applications, quality control being one of the most frequent. We have used for our experiments a relatively simple system consisting of a CCD video camera and a PC equipped with a fairly standard frame grabber. The video image digitization for industrial purposes usually works with resolutions \(512\times 512\) pixels (sometimes even \(256\times 256\)), with 256 greylevels (8 bit D/A). We have used the device having just these parameters. Instead of directly attaching the camera to the microscope we have used microphotographs and scanned them by the CCD TV camera. Its videosignal was fed into the frame grabber and the computer. In this way we had even worse quality digitized images with respect to real usage of camera attached directly to the microscope. The figures presented in this note are actually the digitized images as printed on a laser printer.

The anode strips can by typically 10 \(\mu\)m wide. To be able to evaluate the edge quality we need of the order of 6 to 10 pixel across the width of the wire. Having 256 \(\times\) 256 pixel resolution this gives about 250 \(\times\) 250 square microns area to be evaluated on one shot. With 512 \(\times\) 512 pixel resolution the area is four times larger.

## 3 Edge detection and control

There are basically two approaches to optical quality control, template matching and feature detection/evaluation.

The template matching method is based on comparing the controlled image with a template (ideal) image stored in the memory. This is usually used to check for the presence of some objects: the matching is almost never perfect, but if in some area level of matching is above some threshold the object is assumed to be present. Here our objects are long thin strips and there are just a few pixels across the width of the strips. To test for the quality of edges just counting number of unmatched pixels sound not feasible, the method is too general to be enough sensitive to small defects but insensitive to uncorrelated fluctuations.

So we decided to design a more specific method aimed at specific defects of edges. So we first have to define abstractly what we consider for good edge. Our objects are very specific: long thin objects characterized by sharply defined direction. Then a good edge has the following properties:

* Edge is the set of pixels on the boundary between objects and background.
* Edges look like long thin lines, basically one pixel wide.
* Edges have the same direction as strips. This roughly means that having an edge pixel and making one pixel step in the strip direction one has to find again an edge pixel.

Having these characteristics in mind we basically need three different algorithms to perform the following steps
1. Find the strips, separate them from background.
2. Find their direction.
3. Check that the edges have the same direction and are enough long.

### Segmentation - thresholding

The scene in the image seems to be almost ideal for object segmentation, uniform objects (strips) on a uniform background. The obvious choice for the segmentation is thresholding with a threshold value found from the histogram minimum. We found that the simple method did not worked well, due to nonuniformity in scene illumination. We were able to correct for it by local thresholding with the threshold value locally adapted to average local extrapolated background illumination. We do not go into details here since the problem was perhaps specific to our situation and should be handled individually for a specific microscope -- illumination -- camera chain of hardware. Our message is that problems of this kind can be solved. So we were able to obtain rather well defined objects (strips) by thresholding. The object look well connected with random fluctuations of the size of single pixels. These can be easily filtered out.

### Edges and direction

Having well segmented objects it is fairly simple to tag edge pixels: growing objects one pixel into background and subtracting from it the original segmented objects gives very well segmented edges. The problem of direction is somewhat more tricky. The idea is that most of the edges are good and defects are seldom. We work with the image with segmented edges and the rough direction of edges is known (say horizontal). The point is to make it more precise. Starting with an edge pixel, we are trying to make a step one pixel long in the roughly horizontal direction to the next edge pixel. _Roughly horizontal_ technically means that we try to make a step first in the same horizontal line and if this does not work then check the diagonal neighbours as well. In this way we are able to make steps further and further along the edge pixel. If we really get far, we stop and have two points on the edge: the starting point and the stopping point. (If we cannot get far enough we forget about the starting point.) These two points define a unit vector which is the representation of the direction. We repeat it several times until we have several good representatives of very long good edges. Averaging the corresponding unit vectors we find very good description of the notion _strip direction_.

### Edge quality

Now we can check the quality of edges. Basically we repeat the procedure of making steps along the edges, but with the opposite strategy. Looking for the direction we basically followed the neighbours and got the direction. However, in specific cases we could have been walking along a curve instead of along a straight line. (We got rid of such bad cases by taking an average over many instances.)

Now we can do the opposite. We start at any pixel and try to walk in the strip direction and check whether we are walking along the edge, with a \(\pm 1\) line tolerance. If we can get far enough in this way we label the starting point as a good edge point. If we cannot get too far it means that most probably the edge ends somewhere close to the starting point or that it turns and does not follow the general strip direction. All such starting points we mark as bed edge points. We check all the edge points to be either good starting points or bad starting points..

The examples are presented in Fig. 3, 5, and 7 with bad edge points superimposed on the original image as white pixels. We see that really the bad edge points are outlining the strips in regions of edge defects and close to defects.

We do not thing it is necessary to look for more intelligent algorithms trying to evaluate the severity of the defect (suspected defect). We assume that if the defect is found, the automatic regime might be interrupted, the problem making scene displayed with the defect outlined. The decision could be then taken by the operator.

## 4 Conclusions

Our simple exercise in picture processing has shown that the optical control of the quality of the strip edges in MSGC is feasible. In real time the control should be done with the help of positioning automaton controlled by the same computer. The controlled wafer would be moved in 250 or 500 \(\mu\)m steps, the scenes captured by a camera, digitized and evaluated. Our experience showed that for the digitization plus evaluation of one local scene some 0.1 to 1 second will be needed on a PC 486. A \(5\times 5\) cm GMSC consists of about 10,000 such scenes, so the time needed to control one wafer could be anything between 20 minutes and three hours. We cannot make a more precise estimate, since we worked in a model situation.

Our results suggest that optical control is feasible. If really needed, we believe that working dedicated control automaton can be constructed in reasonable time.

## References

* [1] A.Oed et al, Nucl.Instr.Methods A263, 351 (1988)Figure 1: Typical layout of electrodes in a GMSC

Figure 3: Processed image, scene A

Figure 2: Original image, scene A

Figure 4: Original image, scene B

Figure 5: Processed image, scene B

Figure 6: Original image, scene C

Figure 7: Processed image, scene C