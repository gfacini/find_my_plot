**ATLAS note DAQ-No-073**

**1\({}^{\rm st}\) August 1997**

**Rol Information from the ATLAS L1 e/\(\gamma\) Trigger**

Alan Watson

_University of Birmingham_

**Abstract**

The level-2 trigger requires information about both the position of an Rol within the detector and its significance in the level-1 trigger decision. This note describes how these requirements may be met for the e/\(\gamma\) trigger with minimal additional overhead for the level-1 trigger system and only a modest data transfer to the Rol builder.

**Introduction**

The ATLAS level-2 trigger system uses the "region of interest" (Rol) concept to minimise processing and bandwidth requirements. This requires that the level-1 trigger provides pointers to regions of the detector containing potentially interesting objects. To minimise data transfer, the Rol coordinate should be precisely specified, allowing as small as possible an Rol to be defined. It is foreseen that the Rol selection should include objects which might not contribute to the (highly inclusive) level-1 trigger decision, but which could be useful in level-2 decisions (e.g. low-E\({}_{\rm T}\) electron or jet candidates).

It is advantageous (and in some level-2 concepts, essential) for the level-2 system to know which Rols contributed to the level-1 decision ("primary" Rols) and which did not ("secondary" Rols). For example, this allows "sequential" processing of Rols, in which the secondary Rols are investigated only if the primary Rols (or sufficient of them to make the event interesting) are verified. This then requires that the level-1 triggers provide information which may be used to determine which Rols are primary and which are secondary.

Against such demands must be balanced the increased complexity in the level-1 triggers required to meet them. The level-1 triggers are hard-wired systolic processor arrays, and the actual level-1 decisions are made a long way upstream of the parts of the processing chain which would have to identify regions of interest. Thus sufficient provision (pins, pcb tracks, pipeline memories) must be made to store the required data for all possible Rols in all bunch-crossings until the level-1 accept returns to the level-1 processors themselves.

Most seriously, in the case of the level-1 electron/photon trigger the partitioning of the processing which provides the least demanding solution (in terms of I/O density and data fanout) meeting the level-1 requirements does not allow the _classification_ of Rols in terms of trigger thresholds passed to be made within the level-1 processors themselves. Alternative architectures, in which this would be possible, place severe additional requirements on what is already the most demanding part of the level-1 calorimeter trigger processor.

This note describes a possible solution which would meet the level-2 requirements without large additional demands upon the level-1 system. Some extra processing is required in the region of the level-1 - level-2 interface ("Rol builder"), but the algorithms needed are simple and the data volumes modest.

In the following sections, the constraints from the level-1 side are described. This is followed by a description of the proposed solution, and finally with the results of simulations of the performance of this solution in a "typical" ATLAS trigger environment.

### The Level-1 e\(\gamma\) Algorithm

The basic level-1 electromagnetic trigger algorithm is illustrated in figure 1 below. The algorithm is based upon a 4\(\times\)4 array of 0.1\(\times\)0.1 "trigger towers" in the em and hadronic calorimeters.

Within the central 2\(\times\)2 em towers, four "clusters" are formed from the sums of the two horizontal and two vertical pairs of towers. In addition, the summed E\({}_{\rm T}\) in the outer ring of 12 em towers and also in the 16 hadronic towers are used for isolation tests. The trigger condition is then that at least one of the four clusters is above the "cluster threshold", and also that both the em and the hadronic isolation sums are below their respective "isolation thresholds". This is the algorithm used in the Technical Proposal, and no alternative algorithm has been identified which offers better overall performance (i.e. lower rate for the same physics efficiency).

The 4\(\times\)4 trigger windows described above slide by 1-tower steps in either eta or phi, so that the entire calorimeter is covered by overlapping trigger windows. In terms of actual implementation, it is proposed that 16 overlapping windows will be processed within a single Cluster Processing (CP) ASIC (which then requires data from 7\(\times\)7 em and hadronic trigger towers). A "Cluster Processing Module" (CPM) would contain four such ASICs, and thus process 64 trigger windows (and require data from 11\(\times\)11 em and hadronic trigger towers).

For the task of providing Rol information for level-2, this algorithm has two drawbacks:

1. The location of a window containing a "hit" is a poor indicator of the shower position, as it could be anywhere within the central 2\(\times\)2 em towers. Greater coordinate precision is therefore desirable.

Figure 1: The Level-1 electron/photon trigger algorithm

2. Because of the overlap between neighbouring 4\(\times\)4 tower windows, a shower in one trigger tower may pass the trigger selections in up to four such windows. This complicates the classification of the Rol, as we will see. These issues requires that additional logic, not required for the first-level trigger decision, be added to improve the Rol information. This is discussed below.

### Rol Coordinate Generation

The volume of data which needs to be processed for an e/\(\gamma\) Rol depends strongly on the precision with which the Rol coordinate can be specified. The limiting factor on the Rol precision is the trigger tower granularity1. The chosen definition is then that the Rol coordinate is the position of an electromagnetic trigger tower which is a local E\({}_{\rm T}\) maximum (defined below) and also part of a cluster passing an (adjustable) threshold.

Footnote 1: It is impractical for the L1 processors to either compute or store the position of shower centroids with greater precision, and in any case the cluster definition is hardly optimal for such a calculation.

The "local E\({}_{\rm T}\) maximum" condition is illustrated in Figure 2. The Rol candidate is required to be the most energetic em trigger tower in a 3\(\times\)3 region. To retain efficiency in the few cases where a shower is shared equally between two towers, this requirement is loosened to the condition that the tower E\({}_{\rm T}\) is greater than that of its neighbours on 2 sides and greater than or equal to those on the opposite two sides.

In addition, the Rol candidate is required to be part of a cluster passing an "Rol verification" threshold, expected to be around 6-7 GeV (to be efficient for 10 GeV electrons or photons). For this, four clusters are formed, from the Rol tower plus each of its four horizontal or vertical neighbours. The combination of the local maximum condition plus any of these four clusters passing the threshold will result in the generation of an Rol flag.

### Rols and Isolation

While both the trigger and Rol generation use a two-tower cluster, there is a difference between the way in which the clustering is performed in the two cases. For the trigger, the basic unit is a 4\(\times\)4 tower window, with clusters formed within the

Figure 2: The “local E\({}_{\rm T}\) maximum” condition for Rol coordinate.

central 2\(\times\)2 "core". In contrast, the Rol algorithm is based on a 3\(\times\)3 window, within which both clustering and tower E\({}_{\rm T}\) comparisons are performed. The way in which these two algorithms coexist in one ASIC is illustrated in Figure 3 below.

Consider the tower marked "R": For trigger generation within this window, it may be paired with the towers marked "H+" or "V+" to form clusters. For Rol generation, however, it may _also_ be paired with the "H-" or "V-", towers, which lie within the isolation region in this window. Of course, the window slides, and these clusters ("R" + "H-" and "R" + "V-") are used in trigger generation within neighbouring windows, which is the reason why they have to be included for Rol verification.

The 4\(\times\)4 window is large enough to form all of these clusters, and so perform both the Rol and trigger generation. However, it is _not_ large enough to form the isolation sums corresponding to these "extra" clusters used for Rol verification. Hence there is an important consequence:

* _With this ASIC architecture, it is_ **impossible** _to apply isolation conditions to Rol generation._

One should note however that if a _single_ set of criteria are to be used for Rol flagging, then isolation is prohibited anyway by the requirement that the Rol conditions should _include_ all selections contributing to the trigger (since isolation will not be required for the highest-E\({}_{\rm T}\) e/\(\gamma\) candidates). Hence this is actually less of a restriction than might at first appear to be the case.

An alternative architecture would be to base the CP ASICs on a 5\(\times\)5 environment, centred on the Rol. This would be large enough to form the (4\(\times\)4) isolation sums for all 4 clusters containing the Rol candidate tower R. In such an environment there would be no need for separate (if related) "trigger generation" and "Rol flagging" algorithms, and most of the problems with which we are here concerned would disappear. The drawback of this otherwise attractive idea is that the larger environment requires 30% more signals into each CP ASIC, and increases the number of signals which need to be fanned-out to more than one ASIC or module by a similar amount. Given that the CP system already has the greatest (and extremely demanding) density of signals in the level-1 calorimeter trigger system, and that studies to date show no improvement in level-1 trigger performance resulting from this alternative design, it is extremely unlikely that this solution will be adopted.

Figure 3: Different clustering for trigger and Rol generation

### Rol Generation Within CP ASICs

As mentioned above, it is intended that each CP ASIC should process 16 overlapping cluster/isolation windows. This then requires inputs from a 7\(\times\)7 tower region of the calorimeter, as illustrated below.

It is highly desirable that each tower may only be flagged as an Rol by a single ASIC. This both simplifies Rol building (as there is no duplication of Rols) and greatly reduces the volume of data which must be generated and stored within the level-1 trigger system (and transferred to the Rol builder). In this case each ASIC, processing 16 windows, is responsible for 16 Rol candidate towers, as shown in Figure 4. However, because within each window clusters are formed in a 2\(\times\)2 tower region, there are in fact 25 towers which are used to form em clusters within each ASIC. The remaining 9 are flagged (or not) as Rols by neighbouring ASICs. This, however, has profound consequences for the Rol-building algorithm, as described below.

### Rols and Hit Information

Level-2 would like to know which Rols are "primary" and which are "secondary". The closest to this that the level-1 calorimeter processors can provide is to indicate which cluster/isolation threshold combinations (referred to as "selections" in what follows) are passed by each Rol. Only by combining this with the level-1 CTP decision information can the desired classification be made.

The problem, indicated above, is that in the preferred architecture a single shower may produce trigger "hits" and Rol flags in _different_ CP ASICs. This means that the ASIC producing the Rol cannot, in general, produce a complete list of the trigger selections passed by that Rol. Indeed, the information required to produce such a complete list may not only not exist in a single ASIC, in some cases it will not exist in a single crate! Hence the only solution is for this information to be combined downstream of the cluster processors. Since this operation has no effect on the

Figure 4: CP ASIC, showing towers contributing to cluster and Rol formation in the different trigger windows.

level-1 decision, the obvious solution is to perform the combination in the "Rol builder" for only those events which pass the level-1 trigger.

Figure 5 shows how Rols within different towers in an ASIC can produce hits in different ASICs. Note that the different ASICs will form different cluster and isolation combinations using the Rol tower, and so the Rol need not pass the same selections in each of the possible ASICs. Indeed, it is possible for an Rol to be flagged by one ASIC but produce hits _only_ in the neighbouring ASIC(s). The problem is then how to ensure that we assign to each Rol all hits which may have been produced by it?

The answer is implicit in Figure 6: consider two "maps", one 64\(\times\)64 map of Rol flags (with each cell corresponding to an em trigger tower) and one 16\(\times\)16 map of hits (with each cell corresponding to an ASIC). The two are superimposed as in the figure (with the Rol map cells within each ASIC cell corresponding to the towers marked "R" in Figure 4). There are then four possibilities:

1. Rol unique to ASIC (Figure 5a): if the Rol lies within the top-right 3\(\times\)3 towers within an ASIC, then it can only contribute to clusters in that ASIC. Hence assign to it only hits found in that cell of the hitmap.
2. Rol shared below (Figure 5b): if the Rol lies along the bottom edge of the hitmap cell, it may also be responsible for hits in the cell below. Hence it should be assigned the hits from both the cell in the hitmap containing the Rol _and_ that below.

Figure 5: Different possibilities for hit-Rol matching.

3. Rol shared to left (Figure 5c): if the Rol lies along the left-hand edge, it may similarly be responsible for any hits in the cell to the left. Hence it should be assigned the hits from the cell containing it _and_ that to the left.
4. Rol shared four ways (Figure 5d): if the Rol lies in the bottom-left corner, it clearly satisfies both conditions 2 and 3. In addition, it can also contribute to hits in the ASIC diagonally below-and-left. Hence it should be assigned any hits in any of the 4 ASICs.

Both the mapping of Rols to hit maps and the identification of the different conditions above are simple operations. For example, let us number the cells of the Rol map from 0 to 63 in both eta and phi, and the hit map cells from 0 to 15\({}^{(2)}\). One can then translate the eta & phi indices of the Rol map into those of the hit map merely by dividing by four. Moreover, the remainders from these divisions identify which of the above conditions applies: if the remainder in either eta or phi indices is zero, then the Rol lies along the corresponding "shared" boundary of that ASIC, and hits in the appropriate neighbouring cells of the hit map must also be assigned to it.

Using such an algorithm, it should be straightforward to assign to each Rol all of the selections it may have passed with 100% efficiency.

The one complication is in events with multiple Rols: if a pair of Rols are nearby, they may both possibly be responsible for hits in a given ASIC (Figure 6). In this case, there is no way of determining which Rol was responsible for hits at which threshold. The best solution is then to assign to _each_ Rol _all_ hits which it might possibly be responsible for, irrespective of the presence of other Rols nearby. This ensures that no hits are "missed", and no Rol is flagged as "secondary" when it was in fact "primary". However, it can result in a "secondary" Rol being flagged as "primary" if it is near to a genuine primary Rol. If this were to be a common event, resulting in a large over-estimation of the number of primary Rols, this could be problematic for level-2. Hence it was important to study the performance of this algorithm in events passing the level-1 trigger.

Figure 6: Examples of ambiguous hit-Rol matches.

### Performance of Matching Algorithm:

The performance of the matching algorithm was studied using datasets produced for the ATLAS Technical Proposal. Two samples were used:

1. QCD jets produced in order to study the level-1 e/\(\gamma\) trigger rate. These events were used to study the performance of the matching algorithm with a "typical" sample of e/\(\gamma\) triggered events3.

Footnote 3: Only events passing the e/\(\gamma\) triggers are relevant for this study, since events not passing these triggers by definition only contain secondary e/\(\gamma\) Rols, and hence there can be no ambiguity in their classification.
2. H\({}^{0}\)\(\rightarrow\)4e events. These events contain a higher multiplicity of e/\(\gamma\) Rols than the "typical" events, and were used to study how the algorithm performed with higher Rol multiplicities and more complex event topologies.

Both datasets had been simulated using the full DICE detector model. Only events passing the e/\(\gamma\) trigger were studied.

In estimating the performance, two tests were applied:

1. Did the algorithm assign all "hits" correctly to an Rol, i.e. all of the hits which the Rol was responsible for and no others?
2. Did the matching produce the correct classification an Rol as "primary" or "secondary"?

In practise it is the second test which is of real importance.

The distinction between "primary" and "secondary" depends on both the L1 selections applied and also on the event selections passed. For this study, the following level-1 selections were used:

* single cluster, \(\rm E_{T}>80\) GeV, no isolation required.
* single cluster, \(\rm E_{T}>50\) GeV, hadronic isolation required.
* single cluster, \(\rm E_{T}>30\) GeV, em and hadronic isolation required.
* pair of clusters, \(\rm E_{T}>40\) GeV, no isolation required.
* pair of clusters, \(\rm E_{T}>25\) GeV, hadronic isolation required.
* pair of clusters, \(\rm E_{T}>15\) GeV, em and hadronic isolation required.

In analysing the performance of the matching algorithm, the distinction was made between the "single" selections (where any object passing the selection will trigger the event, and hence such Rols are "primary" in all cases) and "pair" selections (which will be "primary" if two or more such are found in an event, but "secondary" if only one is found). In practise, in events passing the e/\(\gamma\) trigger most of the "pair" Rols will be primary.

In addition, an inclusive "Rol flag" selection of \(\rm E_{T}>6\) GeV, with no isolation required, was applied. Clusters passing this selection only were classed as "secondary".

4350 events4 were studied, of which 45 passed the level-1 selection. These events contained a total of 115 RoIs, of which 77 were primary (23 single and 54 pair) and 38 secondary.

Footnote 4: The events had been pre-selected at the 4-vector level to exclude those with no prospect of passing the trigger from the detector simulation.

Using the matching algorithm to assign hits to RoIs, 113/115 RoIs had all hits assigned correctly, while the remaining 2 were assigned one or more selections which they had not in fact passed. As expected, there were no cases of an Rol producing a hit which was not assigned to it by the algorithm.

Looking instead at the classifications of RoIs, we found that:

all "single" and "pair" RoIs were correctly classified

hence all primary RoIs were correctly classified as primary

2/38 secondary RoIs were incorrectly classified as primary (as "pair" in both cases)

Thus about 5% of secondary RoIs were incorrectly classified, which equals 1.7% of all RoIs. The effect of this was to increase the number of apparent "primary" RoIs level-2 would have to process by \(\sim\)2.5%.

In contrast, if the matching of RoIs to hits in neighbouring ASICs was neglected, and each Rol was assigned only the hits from the ASIC flagging the Rol, \(\sim\)11% of primary RoIs were misclassified as secondary. This inefficiency would clearly be unacceptable.

As a cross-check, the study was repeated with a looser "Rol verification" requirement. Instead of requiring that the Rol tower be part of a cluster with \(\mathrm{E_{T}}\geq 6\) GeV, it was simply required that the Rol tower itself have \(\mathrm{E_{T}}\geq 3\) GeV. With this looser cut, the number of secondary RoIs almost doubled to 71, while the number of these misclassified as "primary" increased to 7. Clearly the "standard" Rol definition is preferable, but even with this loose definition the misclassified secondary RoIs made up only 8% of the "primary" RoIs seen by level-2.

_Performance with \(\mathrm{\textit{H}}^{\beta}\)\(\rightarrow\) 4e events:_

In this channel, 204/206 events passed the level-1 e/\(\gamma\) selection, including all of the events which genuinely contained at least 2 electrons within \(\left|\eta\right|<2.5\). The accepted events contained a total of 933 RoIs, of which 285 were "single", 318 "pair" and 330 "flag". Thus the ratio of "primary" to "secondary" RoIs is similar to that of the QCD background events, but the average Rol multiplicity approximately twice as large.

Of these 933 RoIs, 921 were assigned the correct set of selections, while 12 were assigned selections which they had not passed. Hence only about 1% of RoIs were assigned extra hits.

Looking at the classification of RoIs, we found that:

all primary RoIs were correctly classified as primary 3 "pair" Rols were incorrectly classified as "single"

3 secondary Rols were incorrectly classified as primary (2 as "single" and 1 as "pair")

Thus in these more complex events, misclassification contributed only 0.5% to the number of "primary" Rols seen by level-2.

### Conclusions and Summary

The level-1 cluster processor cannot, without a considerable increase in complexity, make a unique assignment of trigger selections passed by each Rol. However, by providing the Rol builder with both Rol coordinates and trigger hitmaps, it is possible to reconstruct the assignment of hits to Rols. The proposed algorithm is simple, and does not allow a primary Rol to be misclassified as secondary. The misclassification of secondary Rols as "primary" should contribute only a few percent to the total rate of primary Rols.