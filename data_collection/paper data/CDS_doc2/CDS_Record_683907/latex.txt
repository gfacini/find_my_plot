Multilanguage Package of slow control programs for the ATLAS Hadronic End-Cap Calorimeter Test Beam Experiment

Valeri  Sytnik

Institute for High Energy Physics, Protvino, Russia[http://nicewww.cern.ch/svtnik/default.html](http://nicewww.cern.ch/svtnik/default.html)

###### Abstract

In this article the package of slow control applications for the Liquid Argon (LAr) Hadronic End-Cap Calorimeter (HEC) [1] test beam set-up is described. As compared to realise [2], new applications have been included to fit needs of the experiment. New approaches were used to boost software reliability and to improve timing characteristics.

In order to implement different part of the software the relevant programming languages were chosen:

software dealing with apparatus was implemented in _Labview_;

asynchronous slow control TCP server was implemented in \(C++\);

Web monitoring of slow control system parameters was implemented in _Java_.

The platform of slow control software is Microsoft Windows. The Java applet based monitoring of combined slow control data may also run on any platform using Netscape or Microsoft Internet Explorer.

## 1 Slow control system.

The block diagram of the slow control system of the experiment is shown in the fig. 1. The software components developed by author and presented in this article are following:

1. High Voltage control and monitoring application.
2. Application for monitoring of liquid argon vapour pressure in the test cryostat.
3. TCP client programs performing transmission of measured values of High Voltage (HV), Pressure and Temperature1 applications to slow control TCP server.
4. Slow control TCP server that accumulates, formats and transmits the slow control data to DAQ program and to any number of Java applications.
5. Java applet based application that allows flexible combined slow control data monitoring.
6. Two HTTP servers2 that provide the remote observation of slow control data by means of html documents and Java applets.

The items 1,2,3 were implemented in in Labview 4.1. The item 4 was written in C++ using OWLSOCK class library. The item 5 was written in Java using Microsoft J++ 1.1. The servers from item 6 were installed as part of Internet Developers toolkit for G [4].

Footnote 1: Temperature measurements are performed by Dubna subgroup of HEC community

2. HTTP servers were just installed and configured by author 

## 2 High Voltage (HV) software.

The High Voltage application deals with LeCroy 1458 intelligent (80486 processor ) mainframe crate [5] and plugged into it LeCroy HV modules of different types. The LeCroy HV modules 1469P, 1461N, and 1468N have relevant characteristics to power the calorimeter electrodes, photomultipliers, and wire chambers respectively [6-7].

High Voltage application is organised as a loop in which two basic functions are continuously performed:

Readout of all HV parameters of all HV modules and presentation of the results in the user interface.

Reaction to any parameter setting by sending appropriate command to LeCroy mainframe in order to accomplish the actual setting of the parameter's value.

The High Voltage application provides:

Communication with LeCroy mainframe via two interfaces: RS232 and Ethernet (telnet is used as protocol for communication via Ethernet; BSD sockets protocol has been also tested).

Appropriate timing characteristics to control and monitor HV system comprising 1500 parameters. (average time going into readout of whole system, settings of new values, and processing of all obtained data is about 2 seconds).

Control and monitoring of HV modules of three different types ( LeCroy 1469P, 1461N, and 1468N) powering three different detector's subsystems.

Means of software configuration to fit changes in hardware configuration.

Graphical user interface including

control/monitoring of HV system;

presentation of readout data in tables and plots;

control over HV application' parameters;

on-line help.

Visual database of HV modules parameters.

Error processing and automatic recovery from loss of serial or telnet connection.

The fig.2 shows fragment of user interface with front panel to control/monitor parameters of only one HV module belonging to module type LeCroy 1469.

## 3 The Liquid Argon vapour pressure program.

The pressure application is interfaced with pressure device \(*\)Membranovac DM11 meter\(*\) via a RS-232.

The application provides:

Control over pressure device and periodic obtaining of measured pressure.

Graphical user interface including presentation of measured results on plots with changeable time scales.

Error processing and automatic recovery from loss of serial connection.

Figure 1: Slow control system block diagram.

[MISSING_PAGE_EMPTY:4]

## 4 The slow control network.

The slow control (SC) network consists of the following components:

1. Asynchronous TCP server.
2. Three TCP clients in HV, Pressure (P) and Temperature (T) programs correspondingly.
3. TCP client in DAQ program.
4. TCP client(s) in Java application(s).
5. Two HTTP servers.

The goal of the slow control network is to obtain slow control data from "transmitters" (\(HV\), \(P\) and \(T\) TCP clients) and then to send the data to "receivers" (\(DAQ\) and \(Java\) TCP clients). This goal is achieved in following way:

1. TCP server establishes asynchronous communications with all TCP clients available.
2. By request(s) coming from "receivers" (\(DAQ\) and \(Java\) TCP clients) TCP server starts the accumulation of all available slow control data arriving from "transmitters" (\(HV\), \(P\), and \(T\) TCP clients). When it is done the server sends the formatted SC data packet to the "receivers".

TCP server provides:

1. TCP communications in asynchronous regime.
2. Synchronisation of network transfers between "receivers" and "transmitters".
3. Synchronisation of communications with different "receivers".
4. Communication with any number of Java applications.
5. Flexible configuration of SC network that means that any of TCP client may be absent.

As all SC programs are assumed to run continuously, the SC TCP server as well as TCP clients are able to restore lost TCP connection automatically without operator's intervention.

The HTTP servers as a part of SC network allow the Java application to be launched on remote computer. They also provide an access to static on-line images of High Voltage and Pressure applications front panels via URLs:

[http://atlpc0-h6.cern.ch:9999/mainfram](http://atlpc0-h6.cern.ch:9999/mainfram) snap.htm

[http://atlpc2-h6.cern.ch:9999/pressure](http://atlpc2-h6.cern.ch:9999/pressure) snap.htm

## 5 Java monitoring of combined slow control data.

The application is based on Java applet and is called via URL:

[http://atlpc0-h6.cern.ch:9999/mynet/scmonitor.htm](http://atlpc0-h6.cern.ch:9999/mynet/scmonitor.htm)

Once the program has been called it connects to TCP server and obtains the combined SC data as frequent as possible. The received data are shown on plots. The display of Java monitoring of slow control data is shown in fig.3. User interface list boxes, buttons and text edit box are used to view different portions of the data in different time scales (see details in the figure caption). On-line help is available. Number of simultaneously running Java programs is practically unlimited that is provided by slow control TCP server. The application is portable across different Web browsers and platforms.

It has been tested for Microsoft Internet Explorer (versions 3,4,5) and Netscape Communicator (version 4). The better performance corresponds to Microsoft Internet Explorer (version 4 or higher).

The software was developed in Microsoft Visual J++ 1.1.

* Display of combined slow control Java monitoring consists of plot and control elements: list boxes, buttons and text box. The list boxes allow an access to any portion of slow control data. The slow control data are presented on plot as value dependencies versus time. The time point indication is decoded as hour, minutes, day and month. The time interval between points is variable through text box "additional time interval". The entering of negative value into this text box sets the time interval to indefinite value that can be used to obtain the data only by pressing the "Obtain all measurements" button. The plot stores the data in FIFO logic and contains up to 24 points. Beside the boxes visible in the figure the additional tools to view data are available:
* the actual y-co-ordinate on any plot can be probed by right clicking on interested point;
* all HV channels (in HV mode) can be unselected at once by double clicking somewhere on the plot.

All details of operation are available through on-line help.

## 6 Conclusions.

1. The described slow control software package is currently in successful use in ATLAS/HEC test beam experiment.
2. Thanks to ATLAS and to CERN-Russian fund for the support of the work.
3. Web Java monitoring can be complimented with Web control over High Voltage system.
4. Java application can be expanded to calorimeter data monitoring.

## References.

* [1] Liquid Argon Calorimeter, Technical Design Report, CERN/LHCC 96-41, p. 279.
* [2] H. Braun, S.Los, V.Sytnik; Slow Control for the ATLAS Hadronic End-Cap Calorimeter Test Beam Experiment ATLAS Int. Note LARG-085.
* [3] Temperature measurements are performed by Dubna subgroup of HEC community.
* [4] Internet Developers Toolkit for G. Reference Manual, National Instruments Corp. 1997.
* [5] 1454 / 1458 HV Mainframe, User's Guide V3.04, LeCroy Corp.
* [6] Model 1469 High Voltage Module, Operators Manual, LeCroy Corp.
* [7] Model 1461 High Voltage Module, Operators Manual, LeCroy Corp.
* [8] Model 1468 High Voltage Module, Operators Manual, LeCroy Corp.