**ATLAS Internal Note**

**DAQ-NO-112**

**16 June 1998**

A logical model for event building in DAQ -1

GAmbrosini\({}^{\rm b}\), H-P.Beck\({}^{\rm a}\), D.Francis\({}^{\rm b}\), M.Joos\({}^{\rm b}\), G.Lehmann\({}^{\rm a}\),

L.Mapelli\({}^{\rm b}\), GMornacchi\({}^{\rm b}\), M.Niculescu\({}^{\rm b,c}\), J.Petersen\({}^{\rm b}\), D.Prigent\({}^{\rm b}\), J.Rochez\({}^{\rm b}\),

R.Spiwoks\({}^{\rm b}\), L.Tremblet\({}^{\rm b}\), T.Wildish\({}^{\rm b}\)

a. Laboratory for High Energy Physics, University of Bern, Switzerland.

b. CERN, Geneva, Switzerland.

c. Institute of Atomic Physics, Bucharest, Romania.

NoteNumber : 042

Version : 1.0

Date : 12-05-97

Reference : [http://atddoc.cern.ch/Atlas/Notes/042/Note042-1.html](http://atddoc.cern.ch/Atlas/Notes/042/Note042-1.html)

## 1 Introduction

### Purpose of the document

This note describes a _logical model_ for event building in DAQ prototype -1 [1]. It expands upon the discussions and ideas of the event building working group [2]. The note addresses specifically a high-level design, invariant to technology or implementation and is the basis of a detailed design.

### Boundaries of the logical model

Event building is a sub-system of the DataFlow system in the DAQ prototype -1. As such, it interfaces with other sub-systems of the DataFlow system, namely, the DAQ-Unit and the LDAQ. It is assumed that the boundary between the event building sub-system and the DAQ-Unit is a buffer. The specification of the interfaces to this buffer will be done as part of sub-system integration, likewise the interface with the LDAQ.

The boundary with the network is a network interface [2]. The packetization, de-multiplexing of packets from the network link and the re-assembly of crate event fragments from packets is considered to be specific to the network interface, ergo technology specific. Conversely, the network interface has no concept of an event. One or more structures, implemented in either hardware or software, define the interface between the logical model and the network interface.

The relationship of the event building sub-system to other DataFlow sub-systems is shown in Figure 1:

There may be a requirement for the event building sub-system to interface with the high-level trigger systems. This interface will be addressed at the level of systems integration.

Figure 1: Relationship between the Event building sub-system and other DataFlow sub-systemsThe sub-system will have to receive run control commands from the LDAQ [6] and use other functionalities of the LDAQ. This interface will be addressed at the level of sub-systems integration.

### Document overview

In section 3 a general description of the logical model is given. In subsequent sections, the detailed functionality required of the high-level protocol and each logical object, introduced in section 3, is given.

### Definitions, acronyms and abbreviations

See reference [3].

## 2 Purpose and Function of event building

The event building sub-system is an integral part of the DAQ prototype -1. It provides _the coordinated, concurrent transfer of different sets of event fragments to different destinations_. It allows one or more sub-detectors (or partial sub-detector1) to operate in stand-alone mode2, while all other sub-detectors participate to collective event building. In addition, it allows events of a specific type, defined by a system wide attribute, to be built at a set of unique destinations. This is shown schematically in Figure 2:

Footnote 1: A partial sub-detector is a sub-set of sub-detector ROCâ€™s.

Footnote 2: The events are built from a sub-detectors event fragments independently of other sub-detectors.

## 3 General Requirements

The main requirement of the high level model for the DAQ prototype -1 event builder is that it should be capable to be integrated with different communication technologies.

We address, in this document, the problem of merging event fragments into a complete event, this process is characterised by the following constraints:

Figure 2: Schematic of event building in DAQ prototype -1.

* An event is defined by: a global event identifier (Gid), an event type (Etype) and the partition identifier (Pid).
* An event fragment is defined by: a global event identifier (Gid), an event type (Etype), a source identifier (Sid).These concurrently determine the set of destinations of the event fragment.
* Each event fragment is transferred to one and only one destination.
* The number of sources that send event fragments from the same event to the same (set of) destinations does not change during the run. A partition is statically defined at run start time.
* The number of sources that send event fragments to the same set of destinations depends only on the partition source and destinations belong to.
* A destination assigned to a particular event shall be able to receive that event.
* Error conditions are detected and flagged. Occurrence of an error condition leads to loss of the event.

The above may turn into requirements of the event builder components.

## 4 The logical model

The model consists of logical objects and a high-level protocol. The high-level protocol is a set of mechanisms which define how the logical objects interact. Three logical objects have been identified: _the source_, _the destination_ and _the Data Flow Manager_ (DFM). The relationship between the logical objects and the high-level protocol and the time ordered sequence of the high-level protocol are shown in Figure 3: and Figure 4: respectively.

The source inputs event fragments, the destination receives events and DFM coordinates the transfer of event fragments.

The source (destination) uses a _GetId_ mechanism between itself and the DFM to obtain the Did and the Gid of an event fragment which has to be exchanged with the destination (source). The actual event fragment exchange is performed by a _Transfer_ mechanism. The destination notifies the DFM, via the _End-of-Transfer_ (EoT) mechanism, when an event fragment has been

Figure 3: The logical objects and the high level protocol (for a push implementation)

received. The _End-of-Event_ (EoE) mechanism is used by the DFM to inform the destination that a complete event has been exchanged between the destination and sources. In the case where a destination becomes "busy", a _Busy/Busy_ (B/\(\overline{\text{B}}\)) mechanism is used between the destination and the DFM to halt the flow of event fragments to the destination. This mechanism is also used to resume the flow of event fragments.

## 5 The logical objects

### The source

The source is a component of an I/O module. It is technology invariant, the technology specific layer is provided by the network interface. The source provides the following functionality: initialisation of the network interface, event fragment sending and error handling.

The source exchanges an event fragment with a destination. The Gid of an event fragment and the Did of the destination may be obtained from the DFM (e.g. for a push) or from the destination (e.g. a pull). The source uses the Gid to access the event fragment buffer and, with the Did, initialises the network interface. The latter subsequently performs the send of the event fragment. When transmission has terminated (or a transmission error occurs) the network interface notifies the source. The source subsequently performs those actions necessary to complete the event fragment exchange. The latter, in case of error, may include a re-send of the event fragment.

### The destination

The destination is a component of an I/O module. It is technology invariant, the technology specific layer is provided by the network interface. The destination provides the following functionality: initialisation of the network interface, event fragment "ordering", buffer management, and error handling.

The destination has the concept of an event and that events consist of a set of event fragments, the set may by identified by one or more attributes (e.g. Gid and event type and Sid). The destination provides the network interface with the parameters necessary to perform the event fragment exchange with sources. When an exchange has terminated (or an error occurs) the network interface notifies the destination. The destination subsequently performs those actions necessary to complete the event fragment exchange. A required action is to inform the DFM which source an event fragment has been received from.

Figure 4: The time ordered sequence of the high-level protocol (for a push implementation)

The destination must provide the functionality to cope with the concurrent transfer of more than one set of event fragments i.e. more than one event. There is no requirement to buffer event fragments in any specific order. However, the destination must provide a means of mapping a Sid into a buffer location. The latter must be appended to the event data as it is required by subsequent elements for event re-formatting or event decoding.

### The DFM

The DFM is the logical object which ensures the correct flow of event fragments between sources and destinations. It assigns Did's to event fragments and traces the reception of event fragments at destinations.

The Did assignment policy is based on the fact that event fragments are grouped into a set and on the choice of partitioning sources as well as destinations. We define as a partition a given mapping between a pre-defined set of sources and a pre-defined set of destinations. The possible partitions are static, non-intersecting and, in association with a Gid and, possibly, other common attributes, are used by the DFM to assign Did's. The attributes which are common to a set of event fragments are the following:

1. a range of sources given by a set of Sid's (not necessarily a continuous range),
2. a range of crates defined by a set of Cid's. This is the case when single ROBs are input source to the event building so, in order to avoid partitioning at ROB level, the crate in which the ROBs reside defines the minimum granularity.
3. the event type.

The identification of these attributes allows:

1. sub-detectors to operate in stand-alone mode,
2. collective event building,
3. event building based on specific event types.

Within a single partition several logical sub-partitions can also be identified. These are the ones selected on the basis of the event type and correspond to different logical partitions of the set of destinations.

The assignment policy must also be able to select a Did from a possible set of Did's. While the association of a set of Did's with a set of Sid's (or Cid's) is static and performed at initialisation the final selection of a particular Did within the set to pair with a Gid is done at the time of event merging.

For each Gid and Did pairing the DFM must record which sources have exchanged an event fragment with the destination. When all sources (statically set at initialisation) have exchanged event fragments, the DFM informs the appropriate destination that the event is complete. The DFM may also inform a destination that an event is incomplete when it deems that one or more sources, based on a pre-defined criteria, will not complete the exchange of an event fragment.

In addition to the provision of the specific mechanisms which define the high level protocol, the DFM will deal with those synchronization issues inherent to the high-level protocol. In particular, the implementation of the _Busy/Busy_ mechanism must be safe and free from race conditions.

The DFM is, however, not responsible for the initialisation, management or monitoring of the switching network. Neither it is responsible for the handling of network congestion or network errors. These are the tasks of the network manager.

### 6 The high level protocol

#### Protocol Primitive Operations

#### The GetId mechanism

This mechanism is used to obtain from the DFM a Gid and Did pairing. Any parameters that must be supplied to the DFM assignment policy (e.g. Sid, Gid and event type see section 5.3) are passed to the DFM using this mechanism.

#### The Transfer mechanism

This is the mechanism by which the source and destination exchange an event fragment. It may include a additional high-level transactions to enure the exchange. For example, it may be used by the destination to inform the source that the event fragment has been received. The exact details of the mechanism will be defined during the detailed design.

#### The EoT mechanism

This is the mechanism by which the destination informs the DFM that the exchange of a event fragment with a particular source has terminated. The mechanism should convey to the DFM the Gid and Sid.

#### The EoE mechanism

This mechanism is used by the DFM to notify a destination that it has received a full or partial event. The mechanism should be used by the DFM to pass to the destination the Gid of the event and event status information. The later conveys information about the event fragment exchange between each source and the destination.

#### The B/\(\overline{\text{B}}\) mechanism

This is the mechanism by which the DFM is informed that a destination is temporarily unable to participate in the event building sub-system. Specifically, a destination resource may become exhausted and lead to the loss of data if more events are received. The destination signals this temporary condition via this mechanism. Subsequently, when the resource is again available the destination use this mechanism to inform the DFM.

### Protocol Type

Up to this point we have kept the definition of the event building protocol at a generic level. In particular we have made no assumption on who, between event builder source and destination, initiates a protocol transaction. In this respect the event builder protocol may be of one of two types:* Push-like protocol: the event builder source is "told" that a new event fragment (with its associated Gid) is available to be merged. As a consequence of this, via the GetId mechanism, the source is notified of which destination (Did) will build the related event. The protocol will then proceed as described in section 4.
* Pull-like protocol: an event builder destination "needs" to receive a new full event, possibly with a specific Gid. It then informs the DFM and/or the event builder sources directly that it will build the event with such Gid. The sources will then start sending their fragments and the protocol proceeds as described in section 4.

Between the two flavours of event builder protocols, we have selected the push-like one. This choice is justified by the following considerations:

* A push-like protocol is the continuation of the protocol, for the flow of event data, started within the detector front-end electronics.
* There is no requirement in any part of the system, and in any destination in particular, for a specific Gid to be sent to a specific Did.
* A push-like protocol is amenable to a simpler implementation, in particular as regards the communications between sources and destinations.

## 7 References

[1]Note on DAQ prototype -1.

[2]Summary document and work plan of the event building working group for the ATLAS LVL3/DAQ Prototype

[3]Definitions, acronyms and abbreviations in ATLAS DAQ prototype -1. In preparation.

[4]Note on the L3if application (To Be Done).

[5]Note on the event filter farm.

[6]Note on the LDAQ.

[7]Note on the buffer manager in the pre-design of the front-end crate.