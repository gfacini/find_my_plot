**TileCal ROD Motherboard Software Library**

User's Manual

_B. Salvachua, J. Castelo, V. Castillo, C. Cuenca, A. Ferrer, E. Fullana, E. Higon, C. Iglesias, A. Munar, J. Poveda, A. Ruiz-Martinez, C. Solans, J. Valls_

IFIC

(CSIC-Universidad de Valencia)

Valencia - SPAIN

**Abstract**

This note describes the software library and an associated standalone application program to handle the TileCal ROD VME motherboard. The library uses the CMT' packages vmc_rec and rec_error, from the ATLAS Online Data Flow to handle the standard crate controller, VP-110 from Concurrent Technologies, and the custom bit3_rec CMT package to handle an alternative crate controller, the BIT-3 from \(\mathrm{SBS_{TM}}\) Technologies.

The ROD library defines several C++ classes which can be used in either standalone applications to control and debug the RODs or with the TDAQ online software integration of the back-end hardware for the TileCal detector.

The library also includes special auxiliary classes to handle additional back-end boards related to the ROD operation like the TBM or the ROD injectors.

## Index

* 1 INTRODUCTION
* 1 INTRODUCTION
* 2 ROD MOTHERBOARD VME ADDRESS SPACE
	* 2.1 Booting of the CRATE VP-110 CONTROL
* 3 SOFTWARE ORGANIZATION
* 4 ERROR RETURN CODES
* 5 APPLICATION EXAMPLE
* 6 FUTURE UPGRADES
* 7 CLASS CRATE
	* 7.1 CRATE
	* 7.2 \(\sim\)CRATE( )
	* 7.3 ROD Error CRATEInit(int NOROD, int NoAUX, int DeviceNAME)
	* 7.4 ROD Error CRATEShutDown( )
* 8 CLASS ROD
	* 8.1 ROD ( )
	* 8.2 \(\sim\)ROD( )
	* 8.3 ROD_Error RODInit(int NoPu, int Slot)
* 9 CLASS AUX
	* 9.1 AUX ( )
	* 9.2 \(\sim\)AUX( )
	* 9.3 ROD_Error AUXInit(int Slot)
* 10 CLASS LOCAL
	* 10.1 LOCAL ( )
	* 10.2 \(\sim\)LOCAL( )
	* 10.3 ROD_Error WriteBaseAdd(U_INT DATA, INT MODE)
	* 10.4 ROD_Error ReadBaseAdd(U_INT
* VALUE, INT MODE)
	* 10.5 void PrintBaseAdd(U_INT VALUE)
	* 10.6 ROD_Error GeneralResNet(int MODE)
	* 10.7 ROD_Error ReadStatus(U_INT
* VALUE, INT MODE)
	* 10.8 void PrintStatus(U_INT status)
	* 10.9 ROD_Error ReadBand(U_INT
* VALUE, INT MODE)
* 10.10 void PrintBoARD(U_INT
* VALUE, INT MODE)
* 10.11 ROD_Error ForceBy(U_INT DATA, INT MODE)
* 10.12 ROD_Error ReadVarVersion(U_INT
* VALUE, INT MODE)
* 10.13 void PrintVarVersion(U_INT VALUE)
* 11 CLASS OC
	* 11.1 OC
	* 11.2 \(\sim\)OC( )
	* 11.3 ROD_Error WriteDummy(U_INT DATA, INT MODE)
	* 11.4 ROD_Error ReadDummy(U_INT
* VALUE, INT MODE)
	* 11.5 void PrintDummy(U_INT VALUE)
	* 11.6 ROD_Error ReadTest(U_INT DATA, INT MODE)
	* 11.7 ROD_Error ReadStatus(U_INT
* VALUE, INT MODE)
	* 11.8 void PrintStatus(U_INT VALUE)
	* 11.9 ROD_Error WriteConfig(U_INT DATA, INT MODE)

[MISSING_PAGE_EMPTY:3]

* [14.10] ROD Error ReadConfigi (U_INT* value, INT MODE).52
* [14.11] void PrintConfigi (U_INT value).52
* [14.12] ROD Error WriteConfig2 (U_INT data, INT MODE).53
* [14.13] ROD_Error ReadConfig2 (U_INT* value, INT MODE).53
* [14.14] void PrintConfig2 (U_INT value).53
* [14.15] ROD Error WriteSTARTARD(U_INT data, INT MODE).54
* [14.16] ROD Error ReadSTARTADD(U_INT* value, INT MODE).54
* [14.17] void PrintStartAdd(U_INT value).54
* [14.18] ROD_Error WriteDataRAM(U_INT data, INT MODE).55
* [14.19] ROD_Error ReadDataRAM(U_INT* value, INT MODE).55
* [14.20] void PrintDataRAM(U_INT value).55
* [14.21] ROD Error StartTransmission(U_INT MODE).56
* [14.22] ROD_Error WriteLinkConfig(U_INT DATA, INT MODE).56
* [14.23] ROD Error ReadLinkConfig(U_INT* value, INT MODE).56
* [14.24] void PrintLinkConfig(U_INT value).57
* [14.25] ROD_Error ReadTemplate(U_INT, INT* value, INT MODE).57
* [14.26] void PrintTemperature(U_INT value).58
* [14.27] void ConvertTemperature(U_INT INPUT_VALUE, DOUBLE* VOLTAGE, DOUBLE* RESISTANCE, DOUBLE* temperature).58
* [14.28] ROD_Error ReadVERSION(INT* value, INT MODE).58
* [14.29] void PrintVersion(U_INT value).59
* [15] CLASS FPGA_PU..60
* [15.1] FPGA PU ( ).61
* [15.2] -FPGA PU ( ).61
* [15.3] ROD_Error WriteDummy (U_INT DATA, INT MODE).61
* [15.4] ROD_Error ReadDummy (U_INT* value, INT MODE).61
* [15.5] void PrintDummy (U_INT value).62
* [15.6] ROD_Error Reset(U_INT data, INT MODE).62
* [15.7] ROD_Error ReadStatus(U_INT* value, INT MODE).62
* [15.8] void PrintStatus(U_INT value).63
* [15.9] ROD_Error WriteConfig(U_INT DATA, INT MODE).63
* [15.10] ROD_Error ReadConfig(U_INT* value, INT MODE).63
* [15.11] void PrintConfig(U_INT value).64
* [15.12] ROD_Error ReadFileOf(U_INT* value, INT MODE).64
* [15.13] void PrintFileOf(U_INT value).65
* [15.14] ROD_Error WriteFileRespist(U_INT data, INT MODE).65
* [15.15] ROD_Error ReadSetResetBusy(U_INT* value, INT MODE).65
* [15.16] void PrintSetResetBusy(U_INT value).66
* [15.17] ROD_Error WriteFormatVersionNumber(U_INT DATA, INT MODE).66
* [15.18] ROD_Error ReadFormatVersionNumber(U_INT* value, INT MODE).66
* [15.19] void PrintFormatVersionNumber(U_INT value).67
* [15.20] ROD_Error WriteSourceID_FEB1(U_INT DATA, INT MODE).67
* [15.21] ROD_Error ReadSourceID_FEB1(U_INT* value).67
* [15.22] void PrintSourceID_FEB1(U_INT value).68
* [15.23] ROD_Error WriteSourceID_FEB2(U_INT data, INT MODE).68
* [15.24] ROD_Error ReadSearch_FEB2(U_INT* value, INT MODE).69
* [15.25] void PrintSourceID_FEB2(U_INT value).69
* [15.26] ROD_Error WriteRunNumber(U_INT data, INT MODE).69
* [15.27] ROD_Error ReadRunNumber(U_INT* value, INT MODE).70
* [15.28] void PrintRunNumber(U_INT value).70
* [15.29] ROD_Error WriteExtendedLDIID(U_INT DATA, INT MODE).70
* [15.30] ROD_Error ReadExtendedLDIID(U_INT* value, INT MODE).71
* [15.31] void PrintExtendedLIID(U_INT value).71
* [15.32] ROD_Error WriteBCIDL1_TYPE(U_INT DATA, INT MODE).72
* [15.33] ROD_Error ReadBCIDL1_TYPE(U_INT* value, INT MODE).72
* [15.34] void PrintBCDL1_TYPE(U_INT value).72
* [15.35] ROD_Error WriteDetectoreEventType(U_INT DATA, INT MODE).73
* [15.36] ROD_Error ReadDetectoreEventType(U_INT* value, INT MODE).73
* [15.37] void PrintDetectoreEventType(U_INT value).74

[MISSING_PAGE_FAIL:5]

[MISSING_PAGE_EMPTY:6]

[MISSING_PAGE_EMPTY:7]

## 1 Introduction

The trigger and data acquisition (TDAQ) back-end hardware of the \(\Lambda\)TLAS Hadronic Tile Calorimeter (TileCal) [1] is organized in custom 9U VME boards, called Read-Out Drivers (RODs) [2]. There will be a total of 32 ROD boards associated to the whole readout of the detector. Each ROD board receives a total of 8 input optical links with data from the front-end electronics of the calorimeter modules. Up to 45 channels are sent per link, each channel matching a photomultiplier output signal.

The ROD system constitutes the link between the front-end hardware of the calorimeter and the standard general data acquisition. Data are collected from the front-end system and processed inside the ROD. For this purpose each ROD can handle up to 4 Processing Units (PUs) [3] which contain fixed-point Digital Signal Processors (DSPs). Other functionalities of the ROD are to receive the Timing Trigger and Control (TTC) signals from the Central Trigger Processor (CTP) [4], and to synchronize them with the ones coming from the front-end electronics. The ROD must read, process and format about 9856 channels at the expected maximum trigger rate of 100 KHz (Level 1 Trigger rate).

In the final configuration 4 crates are reserved for the ROD system organization, each one holding up to 8 motherboards. This organization follows the detector Regions of Interest (RoI). The calorimeter is divided in 4 RoI, 2 extended barrels and 2 central barrels. Each RoI constitutes a partition from the TD\(\Lambda\)Q point of view.

## 2 ROD Motherboard VME Address Space

The VME address space for the ROD motherboard is described in Table 1, where the 5-bit geographical address of the ROD modules (bits 24-28) corresponds to their slot position on the crate. Bits 7 to 10 are associated to the different functional blocks of the ROD such as the TTC FPGA, PUs OC FPGAs, etc. And bits 2 to 6 are reserved for the internal register mapping of those blocks.

Figure 1 shows a picture of the ROD motherboard indicating the different fundamental blocks of the board.

### _Booting of the crate VP-110 controller_

The standard VME controller for the \(\Lambda\)T\(\Lambda\)S DAQ is the VP-\(110/01\)[6], VME Pentium Single Board Computer (SBC) from Concurrent Technologies, which is a diskless PC and needs to be booted from the network.

Instructions for the booting are stored in the computer ROM of the SBC. Each SBC has two Ethernet interfaces with two different MAC addresses. An IP address should be assigned to any of those interfaces. So that, when the SBC is powered, it automatically sends a broadcast message to any server of the network requesting the booting of the file system.

The server is a PC connected to the network which has two services or daemons running, _dhcpd_ and _tfpd_. The first one, _dhcpd_, answers the initial booting request from the SBC while the second one, _tfpd_, initiates the upload of the boot image file to the SBC. The boot image is a binary file which,

\begin{table}
\begin{tabular}{|l|c|c|c|c|c|c|c|c|c|c|c|c|} \hline
**VMEADD** & **31** & **31** & **29** & **28** & **...... & **24** & **23** & **...... & **11** & **10** & **9** & **8** & **7** & **6** &...... & **2** & **1** & **0** \\ \hline LOCAL/BUSY & & & GEOGRAPH ADD & & & 0 & 0 & 0 & 0 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline BOOT & & & GEOGRAPHADD & & 0 & 0 & 0 & 1 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline TTC & & & GEOGRAPHADD & & 0 & 0 & 1 & 0 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline IRQ & & & GEOGRAPHADD & & 0 & 1 & 1 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline PU1 & & & GEOGRAPHADD & & 0 & 1 & 0 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline PU2 & & & GEOGRAPHADD & & 0 & 1 & 0 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline PU3 & & & GEOGRAPHADD & & 0 & 1 & 1 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline PU4 & & & GEOGRAPHADD & & 0 & 1 & 1 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline OC1 & & & GEOGRAPHADD & & 1 & 0 & 0 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline OC2 & & & GEOGRAPHADD & & 1 & 0 & 0 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline OC3 & & & GEOGRAPHADD & & 1 & 0 & 1 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline OC4 & & & GEOGRAPHADD & & 1 & 0 & 1 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline STAGING1 & & GEOGRAPHADD & & 1 & 1 & 0 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline STAGING2 & & & GEOGRAPHADD & & 1 & 1 & 0 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline STAGING3 & & & GEOGRAPHADD & & 1 & 1 & \multicolumn{2}{c|}{1} & \multicolumn{2}{c|}{1} & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline STAGING4 & & & GEOGRAPHADD & & 1 & 1 & 1 & \multicolumn{2}{c|}{INTERNAL ADDRESS} & & \\ \hline \end{tabular}
\end{table}
Table 1: VME address schema.

[MISSING_PAGE_EMPTY:10]

[MISSING_PAGE_FAIL:11]

standard of ATLAS is the VP-110, we had incorporated the option to use the BIT-3 crate controller for tests on the ROD system. The library uses the following standard CMT packages:

- \(\mathrm{vmc}\_{\mathrm{rcc}}\)[8],

- \(\mathrm{rcc}\_{\mathrm{error}}\),

when the VP-110 is used and a custom CMT package:

- \(\mathrm{bit3}\_{\mathrm{rcc}}\)

when the BIT-3 controller is used.

The CRATE, ROD and \(\mathrm{AUX}\) classes are those which describe our system. For instance, in the CRATE class it is defined the number of ROD modules in a crate and the number of PUs in each ROD module. Through the CRATE class a VME initialization and mapping is done. This class contains an array of pointers to the classes ROD and \(\mathrm{AUX}\). And it is inside the classes ROD and \(\mathrm{AUX}\) where the users can read and write in the module registers.

The \(\mathrm{AUX}\) class is reserved to access the registers of additional modules. This is the case of the Trigger and Busy Module (TBM) or the pre-RODs.

Through the ROD class users can read and write in the ROD module registers associated to each functional block. For that purpose this class has pointers to the following classes:

* **LOCAL class**: access to the ROD motherboard LOCAL registers.
* **BUSY class**: access to the ROD motherboard BUSY registers.
* **TTC class**: access to the ROD motherboard TTC FPGA registers.
* **OC class**: access to the ROD motherboard Output Controller FPGA registers.
* **STAGING class**: access to the ROD motherboard Staging FPGA registers.
* **FPGA_PU class**: access to the ROD FPGA/Dummy PU (Processing Unit) control.
* **DSP_PU class**: access to the ROD PU (Processing Unit) control.

Declarations of the classes and its members are done in header files, while definitions are done in source files. Each class has an associated header and a source file with the same name as the class preceded by the ROD prefix.

Figure 3 shows the hierarchy of classes of the ROD library. In the next sections a more detailed description of each class, its members and its methods is presented.

All necessary headers for the TileVmcROD library are included in a file called RODIncludes.h. This file includes also the file RODDefinitions.h where the offsets of the registers, error codes and other variables are defined. A set of important variables of the RODDefinitions.h file and their description is shown in Table 2.

The error code variables will be explained in Section 4.

[MISSING_PAGE_EMPTY:13]

## 4 Error Return Codes

Most of the methods in the TileVmcROD library return an error corresponding either to the VME error code from the rcc_vme package, from the bit3_rcc package or from the TileVmcROD library itself. The methods to handle with these errors are defined in the ERROR class. Table 3 shows a description of the possible errors associated to the ROD library. Other possible error values may come from the vmc_rcc package and the bit3_rcc package during the access to the VME bus.

\begin{table}
\begin{tabular}{|l|c|l|} \hline
**ERROR Name** & **VALUE** & **DESCRIPTION** \\ \hline ROD\_SUCCESS & VME\_SUCCESS & All ok. \\ \hline ROD\_FAL & -1 & Something failed. \\ \hline ROD\_NO\_KNOW & 60 & Error not known. \\ \hline ROD\_FAL\_NORODS & 61 & Incorrect number of ROD modules. \\ \hline ROD\_FAL\_NOAUXS & 62 & Incorrect number of auxiliary modules. \\ \hline ROD\_FAL\_NOPUS & 63 & Incorrect number of Processing Units in a ROD module. \\ \hline ROD\_FAL\_ALLOC & 64 & Failed allocating memory space. \\ \hline ROD\_NO\_MODULE & 65 & ROD module not found in the slot number. \\ \hline ROD\_FAL\_OC & 66 & Incorrect Output Controller identifier. \\ \hline ROD\_FAL\_STAG & 67 & Incorrect Staging FPGA identifier. \\ \hline ROD\_FAL\_FPGA\_PU & 68 & Incorrect Dummy/FPGA Processing Unit. \\ \hline ROD\_ERROR\_S\_F & 69 & Incorrect mode, nor SAFE nor FAST. \\ \hline ROD\_STAG\_TEMP & 70 & Incorrect temperature identifier. Up to 8 temperatures can be read, one per G-Link. From 0\textasci{f} to MAXTEMPID. \\ \hline INFPGA\_FILE\_ERR & 71 & Error opening the Input FPGA code. \\ \hline PU\_FAL\_MODE & 72 & Incorrect PU boot mode. \\ \hline INFPGA\_FAIL\_LOAD & 73 & Failed loading Input FPGA code. \\ \hline DSP\_FILE\_ERR & 74 & Error opening the DSP code. \\ \hline DSP\_FAIL\_LOAD & 75 & Failed loading DSP code. \\ \hline DSP\_HPI\_UNALIGNED\_DATA & 76 & HPI DSP address unaligned. \\ \hline \end{tabular}
\end{table}
Table 3: Error code description.

## 5 Application Example

To access the registers of a ROD module a simple application can be built following these few steps:

1. In order to get all the definitions and includes one should include the file RODIncludes.h. 'The classes are defined in a namespace, RODTielc, which should be used in the application: #include "FileVmeROD/RODIncludes.h" using namespace RODTile;
2. Create a CRATE instance (or a pointer), and an ERROR instance (or a pointer): CRATE * MyCrate = new CRATE; ERROR * Error = new ERROR; ROD_Error ret;
3. Init the CRATE object by calling the method \(\mbox{CrateInit}()\) from the CRATE class:  int NORODS = 1;  int NOAUXS = 0;  int DeviceName = VP110; // or BIT3 ret = MyCrate->CrateInit(NORODS,NOAUXS,DeviceName); if (ret!= ROD_SUCCESS) {  Error->RODErrorPrint(ret);  Return (ROD_FAIL); }
4. In this application the user defines a single ROD module, to access the registers of this ROD module the user has first to initialize it through the following code: Int NOPUS = 2; // Number of PU in a ROD module Int SLDT = 7; // Slot where the ROD is connected ret = MyCrate->pRod[0]->RODInit(NOPUS, SLOT); if (ret!= ROD_SUCCESS) {  Error->RODErrorPrint(ret);  Return (ROD_FAIL); } The index in the pRod[ ] pointer indicates the user is accessing the first ROD module initialized (in this case, there is only one).
5. Once the ROD module is initialized the user can access all the registers of the ROD: u_int value, data; int mode; data = 0xfal2eb34; mode = SAFE; // or FAST ret = MyCrate->pRod[0]->pStaging[3]->WriteCommande(data,mode); if (ret!= ROD_SUCCESS) {Error->RODErrorPrint(ret);  Return (ROD_FAIL);  }  ret = MyCrate->pRod[0]->pFpg_pu[0]->ReadStatus(&value,mode);  if (ret!= ROD_SUCCESS) {  Error->RODErrorPrint(ret);  Return (ROD_FAIL);  }  ret = MyCrate->pRod[0]->pFpg_pu[0]->PrintStatus(value);  if (ret!= ROD_SUCCESS) {  Error->RODErrorPrint(ret);  Return (ROD_FAIL);  }  data = Oxbabebabe;  ret = MyCrate->pRod[0]->pTtc->WriteControl(data,mode);  if (ret!= ROD_SUCCESS) {  Error->RODErrorPrint(ret);  Return (ROD_FAIL);  } }
6. At the end of the application the VME bus should be closed and all created pointers deleted. In order to do it the user should call the CrateShutDown() method from the CRATE class:  MyCrate->CrateShutDown();  delete MyCrate;  delete Error;

There are many applications already built using the ROD library. For example, **menuROD** is a program which allows the ROD registers to be accessed through a simple menu list.

\(\Lambda\) GUI Panel, XTestROD, has being also developed using the TileVmcROD library. XTestROD [9] is being used for the ATLAS TileCal ROD characterization and system tests.

## 6 Future Upgrades

Class \(\mathrm{AUX}\) was created to access any new VME module installed in the ROD crate. However, the library is being continually updated due to new developments on the electronics and firmware upgrades that can change the VME mapping. The near future plan is to implement two new classes: the class PreROD to handle the PreROD modules and the class TBM to handle the Trigger and Busy Module (TBM).

The PreROD is a 9U VME module which has two functionalities. The first one is to work as a ROD injector, the card can be configured to send known or random data to the ROD modules. The second one is to work as an optical multiplexer, the signal in TileCal is redundant, and each superdrawer sends two fibres with the same information to the ROD system. When the PreRODs are configured as an optical multiplexer they check the data and send the uncorrupted data to the ROD modules.

The TBM is a 9U VME module which is placed in each ROD crate and is responsible for handling input TTC signals and the output busy signals of the 8 ROD motherboards in the ROD crate.

## 7 Class CRATE

FILES

RODCrate.h

RODCrate.cc

PUBLIC VARIABLES

**NAME**

**DESCRIPTION**

int NoRODModules

Number of ROD modules inside a crate.

int NoAUXModules

Number of Auxiliary modules inside a crate.

ROD"pRodJMAXNORODS

Array of pointers to an object of the ROD class.

AUX" pAu(MAXNOAUXS)

Array of pointers to an object of the AUX class.

VME" pJ/me

Pointer to an object of the VME class.

## PUBLIC METHODS

### CRATE() Description

Constructor of the class, it does nothing.

### ROD_Error CrateInit(int NoROD, int NoAUX, int DeviceName) Description

This method initializes the crate by allocating the required memory for the pRod[ ] and pAu[ ] pointers. It also initializes the variable NoRODModules and NoAUXModules and opens the VMEbus library/driver. It must be called at the beginning of any application to allow VME access.

### Return values

It returns ROD_SUCCESS on success and the corresponding error code on failure. Possible errors in this method are: ROD_FAIL_NORODS, ROD_FAIL_NOAUXS, ROD_FAIL_ALLOC or the error code returned from the vme_rcc and bit3_rcc libraries.

### _ROD_Error CrateShutDown ( )_

Description

It must be called before ending any application. CrateShutDown( ) frees the memory of several internal pointers, pRod[ ] and pAux[ ], and closes the VME library/driver.

### Return values

It returns ROD_SUCCESS on success and the corresponding error code on failure.

## 8 Class ROD

### Files

RODModule.h

RODModule.cc

PUBLIC VARIABLES

**NAME**

**DESCRIPTION**

**nit rpus**

**Number of Processing Units inside a ROD (up to 4).

**nit slot**

**Crate slot number where a ROD motherboard is placed.**

**VMEMasterMap * pVmm**

**Pointer to an object of the VMEMasterMap class.**

**VME * p_My_Vrme**

**Pointer to an object of the VME class.**

**u_int base_address**

**Base Address of a ROD board. It is built when the RODInit( ), method of the ROD class, is called.**

**u_int window_size**

**The window size is initialized when the RODInit( ), method of the ROD class, is called.**

**u_int add_modif**

**The address modifier is initialized when the RODInit( ), method of the ROD class, is called.**

**u_int options**

**Set to *0.**

**LOCAL*pLocal**

**Pointer to an object of the LOCAL class.**

**BUSY*pBusy**

**Pointer to an object of the BUSY class.**

**OC*pOc[MAXNOOCS]**

**Array of pointers to an object of the OC class.**

**TTC*pTtc**

**Pointer to an object of the TTC class.**

**STAGING*pStaging[MAXNOSTAG]**

**Pointer to an object of the STAGING class.**

**FPGA_PU*pPrga_pu[MAXNOPUS]**

**Pointer to an object of the FPGA_PU class.**

### **ROD**_Error RODInit( **nit NoPu, int Slot)

**Description**

**This method must be called before accessing any register of the ROD motherboard. It initializes the variables of the class, performs a VME map of the ROD board by calling to the MasterMap() methodof the VME class, and reserves the necessary memory space for the declared pointers. RODInit( ) method also checks if a ROD module is in the slot by writing the hexadecimal word 0xbabebabe on the ROD Base Address.

### Return values

If no errors occur RODInit() returns ROD_SUCCESS otherwise returns the corresponding error code.

## 9 Class AUX

FILES

AUXModule.h

AUXModule.cc

PUBLIC VARIABLES

### _AUX( ) Description_

Consructor of the class, it does nothing.

### _AUX( ) Description_

Destructor of the class. It does the master unmaping of the auxiliary module done in AUXInit().

### _ROD_Error AUXInit( _int Slot_) Description

This method must be called before accessing any register in the AUX VME module. It initializes the variables of the class, and does a VME map of the auxiliary board by calling to the MasterMap( ) method of the VME class.

### _Return values_

If no errors occur RODInit( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

## 10Class LOCAL

FILES

RODLocal.h

RODLocal.cc

PUBLIC VARIABLES

NAME

DESCRIPTION

VMEMasterMap p_My_Vmm

Pointer to an object of the VMEMasterMap class.

PUBLIC METHODS

### 10.1 LOCAL ( ) Description

Construct of the class, it reserves memory space for private pointers.

### 10.2 -LOCAL ( ) Description

Destructor of the class. It frees the memory space reserved for private pointers.

### 10.3 ROD_Error WriteBaseAdd (u_int data, int mode ) Description

This method writes an unsigned integer word on the Local Base Address register of the ROD module.

Input values

NAME
DESCRIPTION

### Return values

If no errors occur WriteBaseAdd( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadBaseAdd(u_int* value, int mode)

Description

This method reads in the Local Base Address register of the ROD module and keeps the value read in the pointer value. It returns an unsigned integer word with the corresponding error based on the VME error code from rcc_vmc package or bit3_rcc package.

Input values

Description

### Return values

If no errors occur ReadBaseAdd( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### void PrintBaseAdd(u_int value)

Description

This method prints on the standard output the value read from the Local Base Address register of the ROD module.

Input values

Description

This method sends a General Reset to the ROD board.

Input values

\end{table}
Table 24: The FAST mode does not return any error message.

[MISSING_PAGE_EMPTY:25]

### Return values

If no errors occur ReadBoardId( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 10.10 void PrintBoardId( u_int identify)

Description

This method decodes and prints to the standard output the information read from the Local Board Identifier register of the ROD module.

### 10.11 ROD_Error ForceBusy( u_int data, int mode)

Description

This method writes in the Local Force Busy register of the ROD.

### 10.12 ROD_Error ReadVmeVersion( u_int value, int mode)

Description

This method reads the VME FPGA version of the ROD.

[MISSING_PAGE_EMPTY:27]

## 11 Class OC

FILES

RODOc.h

RODOc.cc

PUBLIC VARIABLES

**NAME**

**DESCRIPTION**

The following methods will be applied to the corresponding Output Controller FPGA, selectcd by the _id_ public variable. If the user does not set the _id_ variable, the method will return ROD_FAIL_OC.

## Public Methods

### Oc ( )

Description

Constructor of the class, it reserves memory space for private pointers.

### -Oc ( )

Description

Destructor of the class. It frees the memory space reserved for private pointers.

### ROD_Error WriteDummy (u_int data, int mode)

Description

This method writes in the Dummy register of the selected Output Controller FPGA.

### Return values

If no errors occur WriteDummy( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadDummy (u_int* value, int mode)

Description

This Method reads in a Dummy register of the selected Output Controller FPGA.

Input values

Description

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

\begin{tabular}{}

\end{Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

Output values

\begin{tabular}{}

\end{Output values

Output values

Output values

Output values

Output values

Output values

\begin{tabular}{}

\end{Output values

Output values

Output values

\begin{tabular}{}

\end{Output values

Output values

Output values

Output values

\begin{tabular}{}

\end{Output values

Output values

\begin{tabular}{}

\end{Output values

Output values

Output values

\begin{tabular}{}

\end{Output values

Output values

Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}

\end{Output values

Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}{}

\end{Output values

\begin{tabular}{}{}

\end{Output values

\begin{tabular}{}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}

\end{Output values

\begin{tabular}{}{\end{Output values

\begin{tabular}{}{\end{Output values

\begin{tabular}{}{\end{ Output

### Return values

If no errors occur Reset() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadStatus (u_int* value, int mode) Description

This method reads in the Status register of the selected Output Controller FPGA.

### Return values

If no errors occur ReadStatus( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### void PrintStatus (u_int value) Description

This method decodes and prints to the standard output the information read in the Status register of the selected Output Controller FPGA.

### ROD_Error WriteConfig (u_int data, int mode) Description

This method writes in the Configuration register of the selected Output Controller FPGA.

### Input values

```
NAME
```

```
int mode
```

The FAST mode does not return any error message.

``` 32-bit word to be written in the Configuration register of the selected Output Controller FPGA.

Depending on the setting of the variable class member idt will access to the corresponding Output Controller FPGA.

**Return values**

If no errors occur WriteConfig() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadConfig (u_int* value, int mode )

Description

This method reads in the Configuration register of the selected Output Controller FPGA.

**Input values**

**NAME**

**DESCRIPTION**

int mode

SAFE(0) and FAST(1)

The FAST mode does not return any error message.

**Output values**

**NAME**

**DESCRIPTION**

u_int* value**

**Pointer to a 32-bit word read from the Configuration register of the selected Output Controller FPGA.**

### Return values**

If no errors occur ReadConfig() returns ROD_SUCCESS otherwise returns the corresponding error code.

### Void PrintConfig (u_int value )

**Description**

This method decodes and prints to the standard output the information read in the Configuration register of selected Output Controller FPGA.

**Input values**

**NAME**

**DESCRIPTION**

u_int value**

Word read from the Configuration register of the selected Output Controller FPGA.

### Void PrintConfig (u_int* value, int mode )

**Description**

ReadSdram() reads the Output Controller SDram register.

**Input values**

**NAME**

**DESCRIPTION**

int mode

SAFE(0) and FAST(1)

The FAST mode does not return any error message.

### Return values

If no errors occur ReadSdram\(()\) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadVersion(u_int* value, int mode )

Description

This method reads in the Version register of the selected Output Controller FPGA.

### Return values

If no errors occur ReadVersion\(()\) returns ROD_SUCCESS otherwise returns the corresponding error code.

[MISSING_PAGE_EMPTY:33]

[MISSING_PAGE_EMPTY:34]

[MISSING_PAGE_EMPTY:35]

### ROD_Error ReadIntervFifo (u_int* value, int mode)

Description

This method reads in the Busy Interval Fifo register of the ROD module.

Input values

DESCRIPTION

int mode

The FAST mode does not return any error message.

Output values

NAME

DESCRIPTION

u_int* value

Pointer to a 32-bit word read from the Busy Interval Fifo register of ROD module.

Return values

If no errors occur ReadIntervFifo() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error WriteIntervFifo(u_int data, int mode)

Description

This method writes in the Busy Interval Fifo register of the ROD module.

Input values

DESCRIPTION

NAME

SAFE (0) and FAST (1)

The FAST mode does not return any error message.

u_int data

32-bit word to be written in the Busy Interval register of ROD module.

Return values

If no errors occur WriteIntervFifo() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadSreqMax(u_int* value, int mode)

Description

This method reads in the Busy Sreq Maximum register of the ROD module. This register contains the maximum number of busies before send a Sreq.

### Return values

If no errors occur \(\mathrm{ReadSrcqMax}(\,)\) returns \(\mathrm{ROD\_SUCCESS}\) otherwise returns the corresponding error code.

### ROD_Error WriteSreqMax( u_int data, int mode )

Description

This method writes in the Busy Sreq Maximum register of the ROD module.

Input values

Return values

If no errors occur \(\mathrm{WriteSreqMax}(\,)\) returns \(\mathrm{ROD\_SUCCESS}\) otherwise returns the corresponding error code.

### ROD_Error ReadDivClock( u_int* value, int mode )

Description

This method reads in the Busy Divider Clock register.

Input values

The FAST mode does not return any error message.

[MISSING_PAGE_EMPTY:38]

### 12.16 void PrintFifo (u_int value)

Description

This method decodes and prints to the standard output the information read in the Busy Fifo register of the ROD module.

### 12.17 ROD_Error ReadDurationBusy (u_int* value, int mode ) Description

This method reads in the Busy Duration Busy register of the ROD module.

Input values

Description

This method reads in the Busy Duration Busy register of the ROD module.

### Return values

If no errors occur ReadDurationBusy( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 12.20 void PrintSreqCounter (u_int value)

Description

This method decodes and prints to the standard output the information read in the Busy Sreq Counter register of the ROD module.

### 12.21 ROD_Error SendBusy (int mode) Description

This method writes in the Busy Send Busy register of the ROD module.

Input values

NAME

DESCRIPTION

int mode

SAFE (0) and FAST (1)

The FAST mode does not return any error message.

Return values

If no errors occur SendBusy( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

## 13 Class TTC

### Files

RODTtc.h

RODTtc.cc

### PUBLIC VARIABLES

**NAME**

**DESCRIPTION**

VMEMasterMap* p_My_Vmm

Pointer to an object of the VMEMasterMap class.

### PUBLIC METHODS

### TTC( )

**Description**

Construct of the class, it reserves memory space for private pointers.

### TTC( )

**Description**

Destructor of the class. It frees the memory space reserved for private pointers.

### ROD_Error WriteDummy(u_int data, int mode) Description

This method writes in the TTC Dummy register of the ROD module.

**Input values**

**NAME**

**DESCRIPTION**

int mode

The FAST mode does not return any error message.

u_int data

32-bit word to be written in the TTC Dummy register of ROD modules.

### Return values

If no errors occur \(\mathrm{WritcDummy}(\,)\) returns \(\mathrm{ROD\_SUCCESS}\) otherwise returns the corresponding error code.

### ROD_Error ReadDummy(u_int* value, int mode) Description

This method reads in the TTC Dummy register of the ROD module.

### Return values

If no errors occur ReadDummy( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### void PrintDummy ( u_int value) Description

This method decodes and prints to the standard output the information read in the TTC Dummy register of the ROD module.

### ROD_Error WriteControl ( u_int data, int mode ) Description

This method writes in the TTC Control register of the ROD module.

### Return values

If no errors occur WriteControl\(()\) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadControl (u_int* value, int mode )

Description

This method reads in the TTC Control register of the ROD module.

Input values

Output values

Output values

If no errors occur ReadControl\(()\) returns ROD_SUCCESS otherwise returns the corresponding error code.

[MISSING_PAGE_EMPTY:44]

### 13.11 ROD_Error WriteType (u_int data, int mode)

Description

This method writes in the TTC Type register of the ROD module.

Input values

DESCRIPTION

Return values

If no errors occur WriteType() returns ROD_SUCCESS otherwise returns the corresponding error code.

### 13.12 ROD_Error ReadStatus (u_int* value, int mode)

Description

This method reads in the TTC Status register of the ROD module.

Output values

DESCRIPTION

u_int* value

Pointer to a 32-bit word read from the TTC Status register of the ROD module.

Return values

If no errors occur ReadStatus() returns ROD_SUCCESS otherwise returns the corresponding error code.

### 13.13 void PrintStatus (u_int value)

Description

This method decodes and prints to the standard output the information read in the TTC Status register of the ROD module.

Input values

DESCRIPTION

u_int value

Word read from the TTC Status register of the ROD module.

### 13.14 ROD_Error WriteTypeSubAddress (u_int data, int mode)

Description

This method writes in the TTC Type Sub Address register of the ROD module.

Input values

DESCRIPTION

Return values

If no errors occur WriteTypeSubAddress( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 13.15 ROD_Error ReadTypeSubAddress (u_int* value, int mode)

Description

This method reads in the TTC Type Sub Address register of the ROD module.

Input values

DESCRIPTION

Return values

If no errors occur ReadTypeSubAddress( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 13.16 void PrintTypeSubAddress (u_int value)

Description

This method decodes and prints to the standard output the information read in the TTC Type Sub Address register of the ROD module.

Input values

NAME
DESCRIPTION

Word read from the TTC Type Sub Address register of the ROD module.

[MISSING_PAGE_EMPTY:47]

**Return values**

If no errors occur SendITCEvent( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

## 14 Class STAGING

FILES

RODStag.h

RODStag.cc

PUBLIC VARIABLES

**NAME**

**DESCRIPTION**

The following methods will be applied to the corresponding staging \(\mathrm{FPGA}\) which is selected by the _id_ public variable. If the user does not set the _id_ variable, the method will return the error code \(\mathrm{ROD\_FAIL\_STAG}\).

PUBLIC METHODS

### STAGING( ) Description

Construct of the class, it reserves memory space for private pointers.

### STAGING( ) Description

Destructor of the class. It frees the memory space reserved for private pointers.

### ROD_Error WriteDummy (u_int data, int mode) Description

This method writes in a Dummy register of the selected Staging \(\mathrm{FPGA}\).

Input values

**NAME**

**DESCRIPTION**

u_int data

32-bit word to be written in a Dummy register of the selected Staging FPGA. Depending on the setting of the variable class member _id_ it will access to the corresponding Staging FPGA.

The FAST mode does not return any error message.

**Return values**

If no errors occur WriteDummy( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadDummy (u_int* value, int mode) Description

This method reads in the Dummy register of the selected Staging FPGA.

**Input values**

**NAME**

**DESCRIPTION**

int mode

SAFE ( 0 ) and FAST ( 1 )

The FAST mode does not return any error message.

**Output values**

**NAME**

**DESCRIPTION**

u_int* value**

Pointer to a 32-bit word read from a Dummy register of the selected Staging FPGA.

### Return values

If no errors occur ReadDummy( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### void PrintDummy (u_int value) Description

This method decodes and prints to the standard output the information read in the Dummy register of the selected Staging FPGA.

**Input values**

**NAME**

**DESCRIPTION**

u_int value**

Word read from a Dummy register of the selected Staging FPGA.

### ROD_Error WriteSetReset (u_int data, int mode) Description

This method set and reset the selected Staging FPGA.

### Return values

If no errors occur WriteSetRreset( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadStatus (u_int* value, int mode)

Description

This method reads in the Status register of the selected Staging FPGA.

Input values

```
1NAME
```

DESCRIPTION

```
int mode
```

Output values

Output values

```
1NAME
```

DESCRIPTION

```
u_int* value
```

Return values

If no errors occur ReadStatus( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### void PrintStatus (u_int value)

Description

This method decodes and prints to the standard output the information read in the Status register of the selected Staging FPGA.

Input values

```

### ROD_Error WriteConfig1 (u_int data, int mode)

Description

This method writes in the Configuration register 1 of the selected Staging FPGA.

Input values

**NAME**

DESCRIPTION

u_int data

32-bit word to be written in the Configuration register 1 of the selected Staging FPGA. Depending on the setting of the variable class member _I_I_I will access to the corresponding Staging FPGA.

int mode

SAFE (0) and FAST (1)

The FAST mode does not return any error message.

Return values

If no errors occur WriteConfig1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadConfig1 (u_int* value, int mode)

Description

This method reads in Configuration register 1 of the selected Staging FPGA.

Output values

**NAME**

DESCRIPTION

u_int* value

Pointer to a 32-bit word read from the Configuration register 1 of the selected Staging FPGA.

Return values

If no errors occur ReadConfig1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### Void PrintConfig1 (u_int value)

Description

This method decodes and prints to the standard output the information read in the Configuration register 1 of the selected Staging FPGA.

Input values

DESCRIPTION

u_int value

Word read from the Configuration register 1 of the selected Staging FPGA.

### 14.12 ROD_Error WriteConfig2 (u_int data, int mode)

Description

This method writes in the Configuration register 2 of the selected Staging FPGA.

Input values

**NAME**

DESCRIPTION

u_int data

32-bit word to be written in the Configuration register 2 of the selected Staging FPGA. Depending on the setting of the variable class member _id_ it will access to the corresponding Staging FPGA.

\begin{tabular}{l|l} \hline \hline \multicolumn{1}{c|}{**Input values**} \\ \hline
**NAME** & **DESCRIPTION** \\ \hline u_int data & 32-bit word to be written in the Configuration register 2 of the selected Staging FPGA. Depending on the setting of the variable class member _id_ it will access to the corresponding Staging FPGA. \\ \hline int mode & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \hline \end{tabular}

Return values

If no errors occur WriteConfig2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 14.13 ROD_Error ReadConfig2 (u_int* value, int mode)

Description

This method reads in the Configuration register 2 of the selected Staging FPGA.

Input values

**NAME**

DESCRIPTION

\begin{tabular}{l|l} \hline \hline \multicolumn{1}{c|}{**Input values**} \\ \hline
**NAME** & **DESCRIPTION** \\ \hline
**int mode** & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \hline \end{tabular}

Output values**

**NAME**

DESCRIPTION**

u_int* value

Pointer to a 32-bit word read from the Configuration register 2 of the selected Staging FPGA.

Return values

If no errors occur ReadConfig2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 14.14 void PrintConfig2(u_int value)

Description

This method decodes and prints to the standard output the information read in the Configuration register 2 of the selected Staging FPGA.

Input values

**NAME**

DESCRIPTION**

u_int value

Word read from the Configuration register 2 of the selected Staging FPGA.

[MISSING_PAGE_FAIL:54]

[MISSING_PAGE_FAIL:55]

[MISSING_PAGE_EMPTY:56]

### Return values

If no errors occur ReadLinkConfig( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 14.24 void PrintLinkConfig(u_int value)

Description

This method decodes and prints to the standard output the information read in Link Configuration register of the selected Staging FPGA.

Input values

NAME

Description

u_int value

Word read from the Link Configuration register of the selected Staging FPGA.

### 14.25 ROD_Error ReadTemperature(intnum,int*value,intmode)

Description

This method reads the Temperature of the selected G-Link. With the input parameter _num_, the user can read up to 8 temperature values from the 8 G-links of the ROD module. Never mind through which Staging FPGA the user reads the temperature, because this method always accesses the same registers.

Input values

Description

NAME

G-Link temperature identifier. This parameter can take values from 0' to 7' for reading the temperature of the eight G-links of the ROD module.

Output values

NAME

Description

u_int*value

Pointer to a 32-bit word for reading the Temperature of the selected G-Link.

Return values

If no errors occur ReadTemperature( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 14.26 void PrintTemperature (u_int value)

Description

This method decodes and prints to the standard output the information of the Temperature of the selected G-Link.

27 Void ConvertTemperature (u_int input_value, double+ voltage, double+ resistance, double+ temperature) Description

This method converts the G-Link temperature in ADC counts to temperature in Celsius degrees.

Input values

NAME
DESCRIPTION

u_int input_value

G-Link temperature in ADC counts.

Output values

NAME
DESCRIPTION

double * voltage

Pointer to the measured voltage.

double * resistance

Pointer to the measured resistance.

double * temperature

Pointer to the temperature in Celsius degrees.

### 14.28 ROD_Error ReadVersion(int+ value, int mode ) Description

This method reads the Version of the selected Staging FPGA.

Input values

NAME
DESCRIPTION

NAME

SAFE (0) and FAST (1)

The FAST mode does not return any error message.

Output values

NAME
DESCRIPTION

u_int* value

Pointer to a 32-bit word read for reading the version of the selected Staging FPGA.

**Return values**

If no errors occur ReadVersion() returns ROD_SUCCESS otherwise returns the corresponding error code.

### 14.29 void Print/Version (u_int value)

Description

This method decodes and prints to the standard output the information of the Version of the selected Staging FPGA.

**Input values**

**NAME**

**DESCRIPTION**

u_int value**

Word read from the Version register of the selected Staging FPGA.

## 15 Class FPGA PU

FPGA PU DESCRIPTION

The FPGA PU does not apply any online reconstruction algorithm. A picture of the FPGA PU is shown in Figure 4, the core for dataflow management is implemented in the main chip (Altera APEX20kE FPGA) of the card, while two external FIFOs have the task of data buffering from the Processing Unit to the Output FPGA.

Figure 4: Picture of the Dummy/FPGA PU.

The following methods will be applied to the corresponding FPGA Processing Unit which selected by the _id_ public variable. If the user does not set the _id_ variable, the method will return the error code \(\mathrm{ROD\_FAIL\_FPGA\_PU}\).

## 15 Public Methods

### _FPGA_Pu()_

Description

Construct of the class, it reserves memory space for private pointers.

### _-FPGA_Pu()_

Description

Destructor of the class. It frees the memory space reserved for private pointers.

### _ROD_Error WriteDummy(u_int data, int mode)_

Description

This method writes in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description
This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

### _Round_Error ReadDummy(u_int* value, int mode)_

Description

This method reads in the Dummy register of the selected Dummy/FPGA Processing Unit.

[MISSING_PAGE_FAIL:62]

### Return values

If no errors occur ReadStatus( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### void PrintStatus (u_int value) Description

This method decodes and prints to the standard output the information read in the Status register of the selected Dummy/FPGA Processing Unit.

### ROD_Error WriteConfig (u_int data, int mode) Description

This method writes in a Configuration register of the selected Dummy/FPGA Processing Unit.

### Return values

If no errors occur WriteConfig( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadConfig (u_int* value, int mode) Description

This method read in the Configuration register of the selected Dummy/FPGA Processing Unit.

### Return values

If no errors occur ReadConfig() returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.11 void PrintConfig ( u_int value )

Description

This method decodes and prints to the standard output the information read in the Configuration register of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.12 ROD_Error ReadFileo ( u_int* value, int mode )

Description

This method reads the Fifo of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### Return values

If no errors occur ReadFileo() returns ROD_SUCCESS otherwise returns the corresponding error code.

[MISSING_PAGE_FAIL:65]

[MISSING_PAGE_FAIL:66]

### Return values

If no errors occur ReadFormatVersionNumber( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.19 void PrintFormatVersionNumber( u_int value) Description

This method decodes and prints to the standard output the Format Version Number of the data in the selected Dummy/FPGA Processing Unit.

### 15.20 ROD_Error WriteSouecID_FEB1( u_int data, int mode) Description

This method writes the Source Identifier for the data in the FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.20 ROD_Error WriteSouecID_FEB1( u_int data, int mode) Description

This method writes the Source Identifier for the data in the FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.21 ROD_Error ReadSourced_FEB1( u_int value, int mode) Description

This method reads the Source Identifier of the data in the FEB 1 in the selected Dummy/FPGA Processing Unit.

### Return values

If no errors occur ReadSourceID_FEB1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.22 void PrintSourceID_FEB1 (u_int value)

Description

This method decodes and prints to the standard output the Source Identifier of the data in the FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.23 ROD_Error WriteSoucelD_FEB2 (u_int data, int mode)

Description

This method writes the Source Identifier for the data in the FEB 2 in the selected Dummy/FPGA Processing Unit.

### 15.23 ROD_Error WriteSoucelD_FEB2 (u_int data, int mode)

Description

This method writes the Source Identifier for the data in the FEB 2 in the selected Dummy/FPGA Processing Unit.

### Return values

If no errors occur WriteSourceID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

[MISSING_PAGE_FAIL:69]

**Return values**

If no errors occur WriteRunNumber() returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.27 ROD_Error ReadRunNumber(u_int* value, int mode) Description

The method reads the Run Number of the data in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit.

**Input values**

**NAME**

**DESCRIPTION**

int mode

SAFE(0) and FAST(1)

The FAST mode does not return any error message.

**Output values**

**NAME**

**DESCRIPTION**

u_int* value

Pointer to a 32-bit word read the Run Number of the data in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### Return values

If no errors occur ReadRunNumber() returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.28 void PrintRunNumber(u_int value) Description

This method decodes and prints to the standard output the Run Number of the data in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.29 ROD_Error WriteExtendedL1ID(u_int data, int mode) Description

This method writes the Extended L1ID (Level 1 Identifier) for the data in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### Return values

If no errors occur WriteExtendedL1ID( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadExtendedL1ID( u_int* value, int mode) Description

This method reads the Extended L1ID (Level 1 Identifier) of the data in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### Return values

If no errors occur ReadExtendedL1ID( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.30 ROD_Error ReadExtendedL1ID( u_int* value, int mode) Description

This method reads the Extended L1ID (Level 1 Identifier) of the data in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.31 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.32 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.333 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.34 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.354 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.36 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.37 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.37 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.38 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.39 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.40 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.41 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.42 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.43 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.44 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.44 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.45 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.46 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.47 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.48 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.49 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.40 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.41 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.41 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.41 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.42 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.43 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.44 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.45 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.46 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.47 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.48 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.49 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.40 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.41 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.41 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.41 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.40 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.41 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.42 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.43 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.44 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.44 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.45 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.46 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.47 void PrintExtendedL1ID( u_int value) Description

This method decodes and prints to the standard output the Extended L1ID (Level 1 Identifier) of the data in the \(\text{Dummy}/\text{FPGA}\) Processing Unit.

### 15.32 ROD_Error WriteBCID_L1_Type(u_int data, int mode)

Description

This method writes the BCID (Bunch Crossing Identifier) and L1 Type (Level 1 Trigger type) for the data in the selected Dummy/FPGA Processing Unit.

Input values

DESCRIPT

u_int data

32-bit word to be written to set the BCID and L1 Type of the data in the selected Dummy/FPGA Processing Unit.

\begin{tabular}{l|l} \hline \hline \multicolumn{1}{c|}{**Input values**} \\ \hline \multicolumn{1}{c|}{**NAME**} & \multicolumn{1}{c}{**DESCRIPT**} \\ \hline \multicolumn{1}{c|}{**u_int data**} & \multicolumn{1}{c}{32-bit word to be written to set the BCID and L1 Type of the data in the selected Dummy/FPGA Processing Unit.} \\ \hline \multicolumn{1}{c|}{**u_int data**} & \multicolumn{1}{c}{Processing Unit. Depending on the setting of the variable class member **_if_** it will access to the} \\ \multicolumn{1}{c|}{**corresponding Dummy/FPGA Processing Unit.**} \\ \hline \multicolumn{1}{c|}{**int mode**} & \multicolumn{1}{c}{SAFE ( 0 ) and FAST ( 1 )} \\ \multicolumn{1}{c|}{**The FAST mode does not return any error message.**} \\ \hline \hline \end{tabular}

Return values

If no errors occur WriteBCID_L1_Type( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.33 ROD_Error ReadBCID_L1_Type(u_int* value, int mode)

Description

This method reads the BCID and L1 Type of the data in the selected Dummy/FPGA Processing Unit.

Input values

DESCRIPT

\begin{tabular}{l|l} \hline \hline \multicolumn{1}{c|}{**NAME**} & \multicolumn{1}{c}{**DESCRIPT**} \\ \hline \multicolumn{1}{c|}{**int mode**} & \multicolumn{1}{c}{SAFE ( 0 ) and FAST ( 1 )} \\ \multicolumn{1}{c|}{**The FAST mode does not return any error message.**} \\ \hline \hline \multicolumn{1}{c|}{**Output values**} \\ \hline \multicolumn{1}{c|}{**NAME**} & \multicolumn{1}{c}{**DESCRIPT**} \\ \hline \multicolumn{1}{c|}{**u_int* value**} & \multicolumn{1}{c}{Pointer to a 32-bit word with the BCID and L1 Type information of the data in the selected} \\ \multicolumn{1}{c|}{**Dummy/FPGA Processing Unit.**} \\ \hline \hline \end{tabular}

Return values

If no errors occur ReadBCID_L1_Type( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.34 void PrintBCID_L1_Type(u_int value)

Description

This method decodes and prints to the standard output the BCID and L1 Type of the data in the selected Dummy/FPGA Processing Unit.

### 15.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Input values

NAME

DESCRIPTION

u_int data

32-bit word to be written to set the Detector Event Type of the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method reads the Detector Event Type of the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.35 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

Output values

1.355 ROD_Error WriteDetectorEventType( u_int data, int mode) Description

This method writes the Detector Event Type for the data in the selected Dummy/FPGA Processing Unit.

### 15.37 void PrintDetectorEventType(u_int value)

Description

This method decodes and prints to the standard output the Detector Event Type of the data in the selected Dummy/FPGA Processing Unit.

### 15.38 ROD_Error WriteWordsPerEvent(u_int data, int mode) Description

This method writes the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.38 ROD_Error WriteWordsPerEvent(u_int data, int mode) Description

This method writes the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.39 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.40 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.42 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.43 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.44 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.45 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.46 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.47 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.48 ROD_Error WriteWordsPerEvent(u_int* value, int mode) Description

This method writes the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.49 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.40 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.42 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.43 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.44 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.45 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.46 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.47 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.48 ROD_Error WriteWordsPerEvent(u_int* value, int mode) Description

This method writes the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.49 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.40 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.42 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.43 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.44 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.45 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.46 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.47 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.48 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.49 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.40 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.42 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.43 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.44 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.45 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.46 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.47 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.48 ROD_Error WriteWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.49 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.40 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.42 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.43 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.44 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.45 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.46 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.47 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.48 ROD_Error WriteWordsPerEvent(u_int* value, int mode) Description

This method writes the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.49 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.49 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.40 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.41 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.42 ROD_Error ReadWordsPerEvent(u_int* value, int mode) Description

This method reads the number of words sent per event in the selected Dummy/FPGA Processing Unit.

### 15.43 ROD_Error WriteWordsPerEvent(u_int* value, int mode) Description

This method writes the number of words sent per event in the selected Dummy/

[MISSING_PAGE_FAIL:75]

### 15.43 ROD_Error ReadEvents_FEB2 (u_int* value, int mode )

Description

This method reads the Events from the FEB 2 (Front-End Board) in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### Return values

If no errors occur ReadEvents_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.44 void PrintEvents_FEB2 (u_int value )

Description

This method decodes and prints to the standard output the Events from the FEB 2 in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.45 ROD_Error ReadLinkErrorCounterGLinkI (u_int* value, int mode ) Description

This method reads the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### Input values

```
```
1int mode
```

The FAST mode does not return any error message.

### 15.46 ROD_Error ReadLinkErrorCounterGLinkI (u_int* value, int mode ) Description

This method reads the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.47 ROD_Error ReadLinkErrorCounterGLinkI (u_int* value, int mode ) Description

This method reads the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

[MISSING_PAGE_FAIL:77]

### 15.48 void PrintLinkReadedyCounterGLink1 (u_int value)

Description

This method decodes and prints to the standard output the number of times a link ready signal was in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.49 ROD_Error ReadLinkErrorCounterGLink2 (u_int* value, int mode) Description

This method reads the number of times a link error signal was asserted in the G-Link 2 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.49 ROD_Error ReadLinkErrorCounterGLink2 (u_int* value, int mode) Description

This method reads the number of times a link error signal was asserted in the G-Link 2 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.49 ROD_Error ReadLinkErrorCounterGLink2 (u_int* value, int mode) Description

This method reads the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.50 void PrintLinkErrorCounterGLink2 (u_int value) Description

This method decodes and prints to the standard output the number of link errors asserted in the G-Link 2 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.60 void PrintLinkErrorCounterGLink2 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 2 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.70 void PrintLinkErrorCounterGLink2 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 2 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.80 void PrintLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.81 ROD_Error ReadLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.82 ROD_Error ReadLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.83 ROD_Error ReadLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.84 void PrintLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.84 void PrintLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.85 void PrintLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.86 void PrintLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.87 void PrintLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.88 void PrintLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.88 void PrintLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.89 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.90 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.91 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.92 ROD_Error ReadLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.93 ROD_Error ReadLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.94 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.95 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.96 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.97 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.98 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.99 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.99 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.90 ROD_Error ReadLinkReadedyCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.91 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.91 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.92 ROD_Error ReadLinkReadedyCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.93 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.94 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.95 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.96 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.97 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.98 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.99 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.99 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.90 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.90 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes and prints to the standard output the number of links errors asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.91 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.91 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.91 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.92 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.93 ROD_Error ReadLinkErrorCounterGLink1 (u_int value) Description

This method decodes the number of times a link error signal was asserted in the G-Link 1 of the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.94 ROD_Error ReadLinkErrorCounterGLink2 (u_int value) Description

This method dec

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode)

Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode)

Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.53 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.52 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.53 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.54 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.55 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.56 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.57 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.58 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.59 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.52 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.53 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.53 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.54 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.55 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.56 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.57 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.58 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method reads the Number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.53 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

This method reads the Number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.59 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.52 Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.53 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

This method reads the Number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.53 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.54 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.55 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.56 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.57 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.58 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

This method reads the Number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.59 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.51 Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.52 Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.53 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.53 ROD_Error WriteSubFragmentID_FEB1 (u_int data, int mode) Description

This method writes the Sub fragment Identifier in data from FEB 1 in the selected Dummy/FPGA Processing Unit.

### 15.54 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.55 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.56 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.57 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### 15.58 ROD_Error ReadLinkReadyCounterGlLink2(u_int* value, int mode) Description

This method reads the number of times a link ready signal was lost in the G-Link 2 of the selected Dummy/FPGA Processing Unit.

### Return values

If no errors occur WriteSubFragmentID_FEB1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.54 ROD_Error ReadSubFragmentID_FEB1 ( u_int* value, int mode )

### Description

This method reads the Sub fragment Identifier in data from FEB 1 in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### Return values

If no errors occur ReadSubFragmentID_FEB1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.55 void PrintSubFragmentID_FEB1 ( u_int value )

Description

This method decodes and prints to the standard output the Sub fragment Identifier in data from FEB 1 in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### 15.56 ROD_Error WriteSubFragmentID_FEB2 ( u_int data, int mode )

Description

This method writes the Sub fragment Identifier in data from FEB 2 in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

### Return values

If no errors occur WriteSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadSubFragmentID_FEB2 (u_int* value, int mode)

#### Description

This method reads the Sub fragment Identifier in data from FEB 2 in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit.

#### 15.5.1 Input values

\begin{tabular}{|c|c|} \hline
**NAME** & \multicolumn{2}{c|}{DESCRIPTION} \\ \hline \multirow{2}{*}{int mode} & SAFE (0) and FAST (1) \\  & The FAST mode does not return any error message. \\ \hline \end{tabular}

#### 15.5.2 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.3 Input values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.4 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.5 Input values

\begin{tabular}{|c|c|} \hline
**NAME** & \multicolumn{2}{c|}{DESCRIPTION} \\ \hline \multirow{2}{*}{u_int value} & \multicolumn{2}{c|}{Pointer to a 32-bit word with the Sub fragment Identifier in data from FEB 2 in the selected} \\  & Dummy/FPGA Processing Unit. \\ \hline \end{tabular}

#### 15.5.6 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.7 Output values

\begin{tabular}{|c|c|} \hline
**NAME** & \multicolumn{2}{c|}{DESCRIPTION} \\ \hline \multirow{2}{*}{u_int value} & Word with the Sub fragment Identifier in data from FEB 2 in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit. \\ \hline \end{tabular}

#### 15.5.8 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.9 Output values

\begin{tabular}{|c|c|} \hline
**NAME** & \multicolumn{2}{c|}{DESCRIPTION} \\ \hline \multirow{2}{*}{u_int value} & Word with the Sub fragment Identifier in data from FEB 2 in the selected \(\text{Dummy}/\text{FPGA}\) Processing Unit. \\ \hline \end{tabular}

#### 15.5.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.2 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.3 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.4 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.5 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.6 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.5.7 Output values

#### 15.7 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.2 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.3 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.4 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.5 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.6 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.7 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.8 Output values

#### 15.7.9 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.2 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.3 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.4 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.5 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.6 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.7 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.8 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.9 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.2 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.2 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.3 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.4 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.5 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.6 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.7 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.8 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.9 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.2 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.2 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.3 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.4 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.5 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.6 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.7 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.8 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.1 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 15.7.2 Output values

If no errors occur ReadSubFragmentID_FEB2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 15.59 ROD_Error WriteVersion (u_int data, int mode)

Description

This method writes the Version in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

Input values

DESCRIPTION

32-bit word to be written to set the Version in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit. Depending on the setting of the variable class member _id_ it will access to the corresponding \(\mathrm{Dummy/FPGA}\) Processing Unit.

\begin{tabular}{l l} \hline \hline \multicolumn{1}{c|}{**Input values**} \\ \hline
**NAME** & \multicolumn{1}{c}{DESCRIPTION} \\ \hline \multirow{2}{*}{u\_int data} & 32-bit word to be written to set the Version in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit. Depending on the setting of the variable class member _id_ it will access to the corresponding \(\mathrm{Dummy/FPGA}\) Processing Unit. \\ \cline{2-3}  & SAFE (0) and FAST (1) \\ \cline{2-3}  & The FAST mode does not return any error message. \\ \hline \hline \end{tabular}

Return values

If no errors occur \(\mathrm{WriteVersion(\ )}\) returns \(\mathrm{ROD\_SUCCESS}\) otherwise returns the corresponding \(\mathrm{error\,code}\).

### 15.60 ROD_Error ReadVersion (u_int* value, int mode)

Description

This method reads the Version in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

Input values

DESCRIPTION

\begin{tabular}{l l} \hline \hline \multicolumn{1}{c|}{**Input values**} \\ \hline
**NAME** & \multicolumn{1}{c}{DESCRIPTION} \\ \hline
**u\_int* value** & \multicolumn{1}{c}{Pointer to a 32-bit word with the Version in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.} \\ \hline \hline \end{tabular}

Return values

If no errors occur \(\mathrm{ReadVersion(\ )}\) returns \(\mathrm{ROD\_SUCCESS}\) otherwise returns the corresponding \(\mathrm{error\,code}\).

### 15.61 void PrintVersion (u_int value)

Description

This method decodes and prints to the standard output the Version in the selected \(\mathrm{Dummy/FPGA}\) Processing Unit.

**Page 83**

## 16 Class DSP_PU

### DSP PU DESCRIPT

The DSP PU does apply online reconstruction algorithms as Optimal Filtering [10]. The DSP PU (Figure 5) is a mezzanine card with the dimensions of 120 \(\times\) 85 mm. It is composed of two blocks, each one can process up to 48 read-out channels in normal mode and 96 read-out channels in staging mode (with half the number of DSP PUs in the motherboard). Each DSP block is composed of an input FPGA Cyclone EP1C6, a TMS320C6414 DSP from Texas Instruments and an external output FIFO. The DSP PU also contains an output FPGA Cyclone EP1C6 used for VME and TTC interface.

The input FPGAs and the DSPs can be programmed via VME. As soon as the board is powered the EEPROM uploads the code into the output FPGA which allows VME access to the whole board. Now the input FPGA code and the DSP code can be uploaded through the VME interface. The class DSP_PU contains methods for this booting sequence.

### Files

RODDsp_pu.h

RODDsp_pu.cc

### Public VARIABLES

**NAME**

**DESCRIPT**

```
int id & DSP Processing Unit Identifier. The id can be 0, 1, 2, or 3. It must be set in order to access to the registers of the corresponding DSP Processing Unit.
```

VMEMasterMap p_My_Vmm & Pointer to an object of the VMEMasterMap classs.

Figure 5: Picture of the DSP PU.

The following methods will be applied to the corresponding DSP Processing Unit, selected by the _id_ public variable. If the user does not set the _id_variable, the method will return ROD_FAIL_DSP_PU.

The DSP class is more complex than the other classes. It incorporates thus methods to boot the chips and methods to access the PU registers (as the other classes). The booting can be done by calling the method Config(), Figure 6 shows an application which configures the PU for the booting.

```
#include"TileVmeROD/RODIncludes.h" usingnamespaceRODTile; intusage(){ cout<<"Usage:BootPU<InFpgaFile><InDspFile>"<<endl; return(true); } intmain(int argc,char*argv[]){ if(argc!=3)return(usage()); char*InFpgaFile; char*DspFile; InFpgaFile=argv[2]; CRATE*mycrate=newCRATE; ERROR*myerror=newERROR; ROD_Errorret; - introks=1;//CRATEINIT intauxs=0; intdevicename=VP110; intmode=SAFE; ret=mycrate->CrateInit(roks,auxs,device_name); if(ret!=RODSUCCESS){ myerror->RODErrorPrint(ret); return(false); } intpus=1;//INITROD intslot=12; ret=mycrate->pRod[0]->RODInit(pus,slot); if(ret!=RODSUCCESS){ myerror->RODErrorPrint(ret); return(false); }  cout<<"\nPUslot(1..4):"<<endl;//PUselect intpuslot=1; cin>>ppu_slot; cout<<"pu_slot="<<pu_slot<<endl; cout<<"PU booting..."<<endl; cout<<"BOOTallPU->0"<<endl; cout<<"BOOTPUuppart->1"<<endl; cout<<"BOOTPUdownpart->2"<<endl; intFlagPuUpDown; cin>>FlagPuUpDown;

int FlagDspLaunch = 1;

// Set pDspPu[0] toid number 3 (the last pu in the module) // by default this id number is 0 (the first one) ret = mycreate->pRod[0]->pDspPu[0]->id = (pu_slot-1); ret = mycreate->pRod[0]->pDspPu[0]->Config(mode,FlagPuUpDown,InFpgaFile, DspFile,FlagDspLaunch); if (ret!= ROD_SUCCESS){  myerror->RODErrorPrint(ret);  mycreate->CrateShutDown();  return (false); }

mycreate->CrateShutDown(); return (true); }

## 10 Public Methods

### DSP_PU( ) Description

Construct of the class, it reserves memory space for private pointers.

### DSP_PU( ) Description

Destructor of the class. It frees the memory space reserved for private pointers.

### ROD_Error GeneralReset(int mode ) Description

This method resets all the components of the selected DSP Processing Unit.

### Return values

If no errors occur GeneralReset( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error StartSendData(int mode ) Description

Figure 6: Example of how to boot the DSP PUs.

[MISSING_PAGE_FAIL:87]

### Return values

If no errors occur ReadDspVersion1() returns ROD_SUCCESS otherwise returns the corresponding error code.

### _void PrintDspVersion1 (u_int value)_ Description

This method decodes and prints to the standard output the Version of the code loaded in the DSP 1 of the selected Processing Unit.

### _ROD_Error ReadDspVersion2 (u_int* value, int mode )_ Description

This method reads the Version of the code loaded in the DSP 2 of the selected Processing Unit.
This method decodes and prints to the standard output the Version of the code loaded in the DSP 2 of the selected Processing Unit.

Input values

NAME

DESCRIPTION

u_int value

Word with the Version of the code loaded in the DSP 2 of the selected DSP Processing Unit.

### ROD_Error WriteDummy1 (u_int data, int mode )

Description

This method writes in the Dummy register of the Output FPGA of the selected DSP Processing Unit.

Input values

DESCRIPTION

32-bit word to be written in the Dummy register of the Output FPGA of the selected DSP Processing Unit. Depending on the setting of the variable class member _id_t will access to the corresponding DSP Processing Unit.

```
```

1st mode
2st mode
32-bit word to be written in the Dummy register of the Output FPGA of the selected DSP Processing Unit.

Return values

If no errors occur WriteDummy1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadDummy1 (u_int* value, int mode )

Description

This method reads in the Dummy register of the Output FPGA of the selected DSP Processing Unit.

Output values
```
1st mode
2st mode
32-bit word in the Dummy register of the Output FPGA of the selected DSP Processing Unit.

Return values

[MISSING_PAGE_FAIL:90]

### Return values

If no errors occur ReadIDummy2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.15 void PrintDummy2(u_int value) Description

This method decodes and prints to the standard output the word read in the Dummy register of the Output FPGA of the selected DSP Processing Unit.

### 16.16 ROD Error WriteControl1 (u_int data, int mode) Description

This method writes in the Control register of the part 1 of the selected DSP Processing Unit. By writing in this register a reset of the DSP 1, the Input FPGA 1 and FIFO 1 can be done.

### 16.17 ROD_Error ReadControl1 (u_int value, int mode) Description

This method reads in the Control register 1 of the selected DSP Processing Unit.

### 16.18 ROD_Error ReadControl1 (u_int value, int mode) Description

This method reads in the Control register 1 of the selected DSP Processing Unit.

### Return values

If no errors occur ReadControl1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.18 void PrintControl1 (u_int value) Description

This method decodes and prints to the standard output the word read in the Control register 1 of the selected DSP Processing Unit.

### 16.19 ROD_Error WriteControl2 (u_int data, int mode ) Description

This method writes in the Control register of the part 2 of the selected DSP Processing Unit. By writting in this register a reset of the DSP 2, the Input FPGA 2 and FIFO 2 can be done.

\begin{tabular}{|l|l|} \multicolumn{2}{|c|}{**Input values**} \\ \hline \multicolumn{1}{|c|}{**NAME**} & \multicolumn{1}{c|}{**DESCRIPTION**} \\ \hline \multirow{2}{*}{u\_int data} & 32-bit word to be written the Control register 2 of the selected DSP Processing Unit. Depending on the \\  & setting of the variable class member \(\mathbf{id}\) it will access to the corresponding DummyFPGA Processing Unit. \\ \hline \multirow{2}{*}{int mode} & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \end{tabular}

### Return values

If no errors occur WriteControl2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

[MISSING_PAGE_FAIL:93]

[MISSING_PAGE_EMPTY:94]

### ROD_Error WriteSerial1( u_int data, int mode)

Description

This method writes Serial Data to McBSP2 (DSP1) of the selected DSP Processing Unit.

Input values

**NAME**

DESCRIPTION

32-bit data word written to the McBSP2 (DSP1) of the selected DSP Processing Unit. Depending on the setting of the variable class member _id_ it will access to the corresponding Dummy/FPGA Processing Unit.

int mode

SAFE ( 0 ) and FAST ( 1 )

The FAST mode does not return any error message.

Return values

If no errors occur WriteSerial1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadSerial1( u_int value, int mode)

Description

This method reads Serial Data from McBSP2 (DSP1) of the selected DSP Processing Unit.

Input values

**NAME**

DESCRIPTION

u_int* value

Pointer to a 32-bit data word from the McBSP2 (DSP1) of the selected DSP Processing Unit.

Return values

If no errors occur ReadSerial1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.28 void PrintSerial1( u_int value)

Description

This method decodes and prints to the standard output the data from the McBSP2 (DSP1) of the selected DSP Processing Unit.

### 16.29 ROD_Error WriteSerial2 (u_int data, int mode ) Description

This method writes Serial Data to McBSP2 (DSP2) of the selected DSP Processing Unit.

Input values

Description

32-bit data word written to the McBSP2 (DSP2) of the selected DSP Processing Unit. Depending on the setting of the variable class member \(\mathbf{id}\) it will access to the corresponding Dummy/FPGA Processing Unit.

\begin{tabular}{l l} \hline \hline
**NAME** & **DESCRIPTION** \\ \hline u_int data & 32-bit data word written to the McBSP2 (DSP2) of the selected DSP Processing Unit. Depending on the setting of the variable class member \(\mathbf{id}\) it will access to the corresponding Dummy/FPGA Processing Unit. \\ \hline int mode & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \hline \end{tabular}

Return values

If no errors occur WriteSerial2() returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.30 ROD_Error ReadSerial2 (u_int* value, int mode ) Description

This method reads Serial Data from McBSP2 (DSP2) of the selected DSP Processing Unit.

Input values

NAME

Description

\begin{tabular}{l l} \hline \hline
**NAME** & **DESCRIPTION** \\ \hline int mode & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \hline \end{tabular}

Output values

NAME

Description

u_int* value

Pointer to a 32-bit data word from the McBSP2 (DSP2) of the selected DSP Processing Unit.

Return values

If no errors occur ReadSerial2() returns ROD_SUCCESS otherwise returns the corresponding error code.

[MISSING_PAGE_FAIL:97]

### 16.34 ROD_Error WriteInFpgaProgram1 (u_int data, int mode )

Description

This method allows programming the Input FPGA 1 through VME of the selected DSP Processing Unit. The previous method Config() calls this method when booting the Input FPGA 1.

### Return values

If no errors occur WriteInFpgaProgram1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.35 ROD_Error WriteInFpgaProgram2 (u_int data, int mode )

Description

This method allows programming the Input FPGA 2 through VME of the selected DSP Processing Unit. The previous method Config() calls this method when booting the Input FPGA 1.

### 16.36 ROD_Error ReadInFpgaStatus1 (u_int* value, int mode )

Description

This method reads the Status register of the Input FPGA 1 of the selected DSP Processing Unit.

Input values

```

NAME

SEFF(0) and FAST(1)

The FAST mode does not return any error message.

### 16.37 ROD_Error ReadInFpgaStatus1 (u_int* value, int mode )

Description

This method reads the Status register of the Input FPGA 1 of the selected DSP Processing Unit.

Input values

### Return values

If no errors occur ReadInFpgaStatus1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.37 void PrintInFpgaStatus1 (u_int value )

Description

This method decodes and prints to the standard output the data from the Status register of the Input FPGA 1 of the selected DSP Processing Unit.

### 16.38 ROD_Error ReadInFpgaStatus2 (u_int* value, int mode )

Description

This method reads the Status register of the Input FPGA 2 of the selected DSP Processing Unit.

### 16.39 void PrintInFpgaStatus2 (u_int value )

Description

This method decodes and prints to the standard output the data from the Status register of the Input FPGA 2 of the selected DSP Processing Unit.

### 16.40 ROD_Error WriteInFpgaProgramBroadcast(u_int data, int mode) Description

This method allows programming through VME both the Input FPGA 1 and the Input FPGA 2 of the selected DSP Processing Unit. The previous method Config( ) calls this method when booting both Input FPGAs at the same time.

\begin{tabular}{c|c} \multicolumn{2}{c}{Input values} \\ \hline
**NAME** & **DESCRIPTION** \\ \hline u_int data & 32-bit word, to program both the Input FPGA 1 and the Input FPGA 2 of the selected DSP Processing Unit. Depending on the setting of the variable class member \(\boldsymbol{id}\) it will access to the corresponding DSP Processing Unit. \\ \hline int mode & SAFE ( 0) and FAST ( 1) \\  & The FAST mode does not return any error message. \\ \hline \end{tabular}

### Return values

If no errors occur WriteInFpgaProgramBroadcast1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.41 ROD_Error WriteInFpgaProgramBroadcast2(u_int data, int mode) Description

This method allows programming through VME both the Input FPGA 1 and the Input FPGA 2 of the selected DSP Processing Unit.

\begin{tabular}{c|c} \multicolumn{2}{c}{Input values} \\ \hline
**NAME** & **DESCRIPTION** \\ \hline u_int data & 32-bit word, to program both the Input FPGA 1 and the Input FPGA 2 of the selected DSP Processing Unit. Depending on the setting of the variable class member \(\boldsymbol{id}\) it will access to the corresponding DSP Processing Unit. \\ \hline int mode & SAFE ( 0) and FAST ( 1) \\  & The FAST mode does not return any error message. \\ \hline \end{tabular}

### Return values

If no errors occur WriteInFpgaProgramBroadcast2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadOutFpgaVersion1 (u_int* value, int mode)

Description

This method reads the version of the firmware of the Output FPGA of the selected DSP Processing Unit.

\begin{tabular}{c c} Input values & DESCRIPTION \\ int mode & SAFE (0) and FAST (1) \\ The FAST mode does not return any error message. \\ Output values & \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ u_irt* value & Pointer to a 32-bit data word from the Version register 1 of the selected DSP Processing Unit. \\ Return values & \\ \end{tabular}

If no errors occur ReadOutFpgaVersion1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.43 void PrintOutFpgaVersion1 (u_int value) Description

This method decodes and prints to the standard output the version of the Output FPGA of the selected DSP Processing Unit.

### ROD_Error ReadOutFpgaVersion2 (u_int* value, int mode) Description

This method reads the version of the firmware of the Output FPGA of the selected DSP Processing Unit.

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ int mode & SAFE (0) and FAST (1) \\ The FAST mode does not return any error message. \\ Output values & \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ u_irt* value & Pointer to a 32-bit data word from the Version register 2 of the selected DSP Processing Unit. \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ int mode & & SAFE (0) and FAST (1) \\ The FAST mode does not return any error message. \\ Output values & \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ u_irt* value & Pointer to a 32-bit data word from the Version register 2 of the selected DSP Processing Unit. \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ u_irt* value & Pointer to a 32-bit data word from the Version register 2 of the selected DSP Processing Unit. \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ int mode & & SAFE (0) and FAST (1) \\ The FAST mode does not return any error message. \\ Output values & \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ u_irt* value & Pointer to a 32-bit data word from the Version register 2 of the selected DSP Processing Unit. \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ u_irt* value & Pointer to a 32-bit data word from the Version register 2 of the selected DSP Processing Unit. \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ int mode & & SAFE (0) and FAST (1) \\ The FAST mode does not return any error message. \\ Output values & \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ u_irt* value & Pointer to a 32-bit data word from the Version register 2 of the selected DSP Processing Unit. \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ u_irt* value & Pointer to a 32-bit data word from the Version register 2 of the selected DSP Processing Unit. \\ \end{tabular}

\begin{tabular}{c c} Input values & \\ NAME & DESCRIPTION \\ int mode & & SAFE (0) and FAST (1) \\ The FAST mode does not return any error message. \\ Output values & \\ \end{tabular}

\begin{tabular}{c c} Output values & \\ NAME & DESCRIPTION \\ u_irt* value & Pointer to a 32-bit data word from the Version register 2 of the selected DSP Processing Unit. \\ \end{tabular}

\begin{tabular}{c c} Output values & \\ NAME & DESCRIPTION \\ u_irt* value & Pointer to a 32-bit data word from the Version register 2 of the selected DSP Processing Unit.

### Return values

If no errors occur ReadOutFpgaVersion2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.45 void PrintOutFpgaVersion2(u_int value)

#### Description

This method decodes and prints to the standard output the version of the Output FPGA of the selected DSP Processing Unit.

#### Description

This method reads the file InFpgaFile and uploads it to the Input FPGA 1 of the selected DSP PU using the method WriteInFpgaProgram1().

#### Return values

If no errors occur WriteLoadInFpga1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

#### 16.47 ROD_Error WriteLoadInFpga2(int mode,char*InFpgaFile) Description

This method reads the file InFpgaFile and uploads it to the Input FPGA 2 of the selected DSP PU using the method WriteInFpgaProgram2().

## Return values

If no errors occur WriteLoadInFpga2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error WriteLoadInFpgaBroadcast( int mode, char*InFpgaFile)

Description

This method reads the file InFpgaFile and uploads it to the Input FPGA 1 and the Input FPGA 2 of the selected DSP PU using the method WriteInFpgaProgramBroadcast1().

### Return values

If no errors occur WriteLoadInFpgaBroadcast( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error WriteLoadDsp1 ( int mode, char*DspFile, int flagLaunch)

Description

This method uploads the file DspFile into the DSP 1 of the selected DSP PU using the method WriteHP1( int mode, char*DspFile ), and configures the DSP to start running the program if the flagLaunch is set to DSP_LAUNCH_START.

### Return values

If no errors occur WriteLoadDsp1( ) returns ROD_SUCCESS otherwise returns the error code.

### 16.50 ROD_Error WriteHPI ( int mode, char* DspFile)

Description

This method reads the file DspFile which will be upload into the DSP 1 of the selected DSP PU using the method WriteHPI1( int mode, u_int addr, u_int * DspData, const int dimDspData ).

### Return values

If no errors occur WriteWriteHPI1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.51 ROD_Error WriteHPI ( int mode, u_int addr, u_int* DspData, const int dimDspData ) Description

This method uses the method WriteHPI1( u_int data, int mode ) to set the DSP address where the program is written. And then uploads the program, which is accessible through the pointer DspData.

Input values

Description

If no errors occur WriteWriteHPI1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.52 ROD_Error WriteHPI ( u_int data, int mode ) Description

This method writes through the Host Port Interface (HPI) of the DSP 1, which is a 16-bit wide bus that can directly access the DSP's memory space

### Return values

If no errors occur WriteWriteHPI1() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadHPI1 (u_int* value, int mode )

Description

This method reads through the Host Port Interface of the DSP 1 of the selected DSP PU.

### Return values

If no errors occur ReadHPI1() returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.54 void PrintHPI (u_int value)

### Description

This method decodes and prints to the standard output the word read from the HPI of the DSP 1 of the selected DSP Processing Unit.

Input values

NAME

Description

U_int value

Word read through the HPI of the DSP 1 of the selected DSP Processing Unit.

### 16.55 ROD_Error WriteLoadDsp2 ( int mode, char\({}^{\star}\) DspFile, int flagLaunch)

Description

This method uploads the file DspFile into the DSP 2 of the selected DSP PU using the method WriteHPI2( ), and configures the DSP to start running the program if the flagLaunch is set to DSP_IAUNCH_START.

Input values

Return values

If no errors occur WriteLoadDsp2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.56 ROD_Error WriteHPI2 ( int mode, char\({}^{\star}\) DspFile )

Description

This method reads the file DspFile which will be upload into the DSP 2 of the selected DSP PU using the method WriteHPI2( int mode, u_int addr, u_int * DspData, const int dimDspData ).

Input values

Return values

If no errors occur WriteWriteHPI2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.57 ROD_Error WriteHPI2 ( int mode, u_int addr, u_int * DspData, const int dimDspData )

Description

This method uses the method WriteHPI2( u_int data, int mode ) to set the DSP address where the program is written. And then uploads the program, which is accessible through the pointer DspData.

### Return values

If no errors occur WriteWriteHPI2() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error WriteHPI2 (u_int data, int mode ) Description

This method writes through the Host Port Interface of the DSP 2, which is a 16-bit wide bus that can directly access the DSP's memory space

\begin{tabular}{l l}
**Input values** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline u_irt data & 32-bit word to be written through the Host Port Interface of the DSP 2 of the selected DSP PU. \\ \hline \multirow{2}{*}{it mode} & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \end{tabular}

### Return values

If no errors occur WriteWriteHPI2() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadHPI2 (u_int* value, int mode ) Description

This method reads through the Host Port Interface of the DSP 2 of the selected DSP PU.

\begin{tabular}{l l}
**Input values** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline \hline
**int mode** & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \end{tabular}

### Output values

\begin{tabular}{l l}
**NAME** & **DESCRIPTION** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline \hline
**u_irt* value** & Pointer to a 32-bit data word read from the HPI of the DSP 2 of the selected DSP Processing Unit. \\ \hline \end{tabular}

### Return values

If no errors occur WriteWriteHPI2() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadHPI2 (u_int* value, int mode ) Description

This method reads through the Host Port Interface of the DSP 2 of the selected DSP PU.

\begin{tabular}{l l}
**Input values** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline \hline
**INT mode** & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \end{tabular}

### Return values

If no errors occur WriteWriteHPI2() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error ReadHPI2 (u_int* value, int mode ) Description

This method reads through the Host Port Interface of the DSP 2 of the selected DSP PU.

\begin{tabular}{l l}
**Input values** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**Output values** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline \hline
**u_irt* value** & Pointer to a 32-bit data word read from the HPI of the DSP 2 of the selected DSP Processing Unit. \\ \hline \end{tabular}

### ROD_Error ReadHPI2 (u_int* value, int mode ) Description

This method reads through the Host Port Interface of the DSP 2 of the selected DSP PU.

\begin{tabular}{l l}
**Input values** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline \hline
**INT mode** & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \end{tabular}

### Return values

If no errors occur WriteWriteHPI2() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error WriteHPI2 (u_int* value, int mode ) Description

This method reads through the Host Port Interface of the DSP 2 of the selected DSP PU.

\begin{tabular}{l l}
**Input values** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline \hline
**INT mode** & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \end{tabular}

### Return values

If no errors occur WriteWriteHPI2() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error WriteHPI2 (u_int* value, int mode ) Description

This method reads through the Host Port Interface of the DSP 2 of the selected DSP PU.

\begin{tabular}{l l}
**Input values** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \hline
**INT mode** & **DESCRIPTION** \\ \hline \end{tabular}

### ROD_Error ReadHPI2 (u_int* value, int mode ) Description

This method reads through the Host Port Interface of the DSP 2 of the selected DSP PU.

\begin{tabular}{l l}
**Input values** \\ \hline \hline
**NAME** & **DESCRIPTION** \\ \hline \hline
**INT mode** & SAFE ( 0 ) and FAST ( 1 ) \\  & The FAST mode does not return any error message. \\ \hline \end{tabular}

### Return values

If no errors occur WriteWriteHPI2() returns ROD_SUCCESS otherwise returns the corresponding error code.

### ROD_Error WriteHPI2 (u_int* value, int mode ) Description

This method reads through the Host Port Interface of the DSP 2 of the selected DSP PU.

### ROD_Error ReadHPI2 (u_int* value, int mode ) Description

This method reads through the Host Port Interface of the DSP 2 of the selected DSP PU.

### Return values

If no errors occur ReadHPI2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.60 void PrintHPI2 ( u_int value)

#### Description

This method decodes and prints to the standard output the word read from the HPI of the DSP 2 of the selected DSP Processing Unit.

#### 16.61 ROD_Error WriteLoadDspBroadcast ( int mode, char*DspFile, int flagLaunch )

#### Description

This method uploads the file DspFile into the DSPs 1 and 2 of the selected DSP PU using the method WriteHPIBroadcast( int mode, char*DspFile ), and configures the DSPs to start running the programs if the flagLaunch is set to DSP_LAUNCH_START.

#### 16.62 ROD_Error WriteHPIBroadcast ( int mode, char*DspFile)

This method reads the file DspFile which will be upload into the DSPs 1 and 2 of the selected DSP PU using the method WriteHPIBroadcast( int mode, u_int addr, u_int*DspData, const int dimDspData ).

[MISSING_PAGE_FAIL:109]

**Return values**

If no errors occur WriteWriteHPIBroadcast1( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

### 16.65 ROD_Error WriteHPIBroadcast2(u_int data,int mode) Description

This method writes through the Broadcast HPI register of the DSP 2 of the selected DSP PU.

**Input values**

**NAME**

**DESCRIPTION**

u_irt data

32-bit word to be written through the Broadcast Host Port Interface of the DSP 2 of the selected DSP

PU.

int mode

SAFE(0) and FAST(1)

The FAST mode does not return any error message.

### Return values

If no errors occur WriteWriteHPIBroadcast2( ) returns ROD_SUCCESS otherwise returns the corresponding error code.

## References

* [1] ATLAS Collaboration. Tile Calorimeter Technical Design Report. Technical Report, CERN/LHCC 96-42, CERN, 1996.
* [2] Tile Calorimeter Read Out Driver. Firmware Developments for the Final Prototype. J. Castelo _et al.,_ September 2004. Proceedings of LECC 2004. TileCal ROD Hardware and Software Requirements. J. Castelo _et al.,_ February 2005. ATLAS Internal Note, ATL-TILECAL-2005-003.
* [3] The TMS320C6414 DSP Mezzanine Board. J. Prast. August 2004. ATLAS EDMS document ATL-AL-EN-0051.
* [4] TTC website: [http://ttc.web.cern.ch/TTC/intro.html](http://ttc.web.cern.ch/TTC/intro.html).
* [5] Doxygen website: [http://www.doxygen.org/index.html](http://www.doxygen.org/index.html).
* [6] Technical Reference Manual for VP 110/01x VME Pentium(r) III-M Single Board Computer. Manual Order Code 550 0014 Rev 02, August 2002.
* [7] SBS\({}_{\rm TM}\) Technologies, Model 946, 965, 983, 993 & 1003 Support Software.
* [8] VMEbus Application Program Interface. R. Spiwoks _et al.,_ June 2002. ATLAS Internal Note, ATL-D-ES-0004.
* [9] Standalone Software for TileCal ROD Characterization and System Tests. J. Poveda _et al.,_ December 2004. ATLAS Internal Note, ATL-TILECAL-2004-012.
* [10] Optimal Filtering in the ATLAS Hadronic Tile Calorimeter. E. Fullana et al., January 2005. ATLAS Internal Note, ATL-TILECAL-2005-001.