ATLAS DAQ note 94-35

8 December 1994

**The level-2 trigger system supervision**

Y. Ermoline

ermolin@cernvm.cern.ch

The aim of this note is to discuss tasks of a level-2 trigger system Supervisor, the interaction points between the Supervisor and other parts of the trigger system and the information required by/from the Supervisor.

## 1 Introduction

The ATLAS overall trigger architecture contains three levels of triggering: a synchronous 40 MHz level-1 trigger based on purpose-built digital pipelined hardware processors with a fixed latency, an asynchronous level-2 trigger based on programmable (low-level or general-purpose) processors and a level-3 trigger based on a farm of commercial processors.

Raw detector data are stored in level-1 pipeline memories during the fixed level-1 latency after which data for accepted events will be transferred to level-2 buffer memories and remain stored there until after the level-2 decision.

_Level-1 trigger system_

The level-1 trigger system [1] consists of calorimeter and muon subtrigger processors that work independently and in parallel on subdetector data, and a Central Trigger Processor which combines the subtrigger results and makes the overall decision (T1_Accept signal).

This synchronous signal is broadcasted via a Timing, Trigger and Control Distribution System to the detector front-end and initiates raw detector data transfer from the level-1 pipelines to the level-2 buffers. Data from the level-1 trigger system will also be sent to level-2 buffers for subsequent use and analysis (as subdetector data).

The level-1 trigger system identifies a number of Regions of Interest (RoI) for the level-2 trigger system - spatially limited areas ('roads') in the detector with candidates for phenomena to be triggered. The full detector raw data pertaining to a RoI may be defined as RoI_Data, RoI's timing, spatial and type parameters as a RoI_Pointer and RoI's relevant physics information as a RoI_Feature.

A benefit of the RoI concept is that only the small fraction of the data from level-2 buffers that falls in the RoIs (RoI_Data) needs to be moved into the level-2 trigger system; data from different RoIs can be analysed independently and algorithms may be simpler.

As RoI parameters originates from different components of the level-1 trigger system, they must be collected, translated into a suitable form (RoI_Pointers) and sent to the level-2 trigger system as a RoI_Message. This task is performed by a RoI Unit (called sometimes RoI Builder [2]) inside the level-1 trigger system.

#### Level-2 trigger system

There are different architectural options foreseen for the implementation of the level-2 trigger system [3, 4]. From the supervision point of view, the level-2 trigger system may be divided into three main parts with communication paths between them.

RoI_Data Extractors associated with level-2 buffers for:

- selecting (a subset of) RoI_Data from level-2 buffers by using RoI_Pointers,

- possible RoI_Data pre-processing before feature extraction.

RoI_Data Collectors associated with Local Processors (or Local Processors Clusters) for:

- collecting subsets of RoI_Data from RoI_Data Extractors,

- local RoI_Data processing (RoI_Feature extraction) performed in parallel within each RoI for each subdetector.

RoI_Feature Collectors associated with Global Processors for:

- collecting RoI_Features from Local Processors,

- local combination of features for the same RoI from different subdetectors in parallel for all RoIs (RoI_Object building),

- global processing (Trigger Event building)
- analysis and correlation of all RoI_Objects to make the overall level-2 trigger decision.

The extraction and pre-processing of (a subset of) RoI_Data may be performed by programmable devices [5], attached to the level-2 buffers. Alternatively specialised devices ('routers' [6]) intercept the RoI_Data for the feature extraction from data links between the level-1 pipelines and the level-2 buffers. Since RoIs will often span the boundaries between level-2 buffers, the possibility to handle edge effects is assumed in both cases. The (subset of) RoI_Data are sent to the RoI_Data Collectors through a communication path.

Rol_Data Collectors and Local Processors (Local Processors Clusters) for the RoI_Feature extraction may be dynamically allocated to subdetector RoIs according to availability or permanently allocated to regions of the subdetector. Different kinds of Local Processors may be used (general purpose or custom made, depending on requirements). It is assumed that the execution time for RoI_Feature extraction may be different for different subdetectors. RoI_Features are sent to the RoI_Feature Collectors through a switching/general-purpose network.

The global processing after RoI_Feature collection is performed on a farm of general-purpose processors due to the need for flexibility and scalability.

#### Level-3 trigger system

Level-3 trigger system consists of interfaces between level-2 buffers and an Event Builder, the Event Builder (based on communication network) and a farm of commercial processors. The level-3 trigger system may also have a Manager.

## 2 Supervisor tasks

Ideas for a level-2 trigger system supervision have been described in RD27 note [7]. The main tasks of the Supervisor are the management of level-2 trigger system resources and the interaction with level-1 and level-3 trigger systems. Execution of Supervisor's tasks may be concentrated in one place or distributed in the level-2 trigger system.

The configuration of the level-2 trigger system and event processing scenarios (RoI or full raw detector data processing, single pass or recursive processing, etc.) may vary for different physics applications and not well defined at present. A design of the Supervisor has to be able to coupe with changing requirements and initially may include some possibilities and options that will become obsolete later.

An allocation of level-2 trigger system resources is performed dynamically on a basis of information provided by the level-1 trigger system for every accepted event. Permanent allocation of some parts of the level-2 trigger system may be used to simplify the overall system architecture. The allocation information is distributed to different parts of the level-2 trigger system (as a common message or separate messages) and also may be kept internally in the Supervisor (depends on the type of event processing performed, see below).

The level-2 trigger system may disable generation of level-1 triggers in some cases (level-2 buffers are almost full, there are no more free processors or there are some error condition in the level-2 trigger system during its operation, etc.).

Level-2 trigger system decisions are used to handle events in the level-2 buffers (to release event buffers for rejected events, to transmit accepted events to the level 3, to transmit some rejected events to the level 3). In addition they may provide a level-2 trigger system status information. The level-2 trigger system sends to the level-3 trigger system (to the Manager) an information about events passed to the Event Builder.

Real-time monitoring of the proper operation of the level-2 trigger system is an essential task. Several levels of monitoring may be envisaged based on different complexity'models' of the entire level-2 trigger system or some parts. Models, possible sources of errors, error recovery mechanisms and an models implementation may be defined. Hardware level may include a fast error detection, a time-outs control mechanism, etc. A complete software model of the actual level-2 trigger system may be created for both algorithms and hardware debugging. A capturing of the data flow through the level-2 trigger system, a collecting of the statistics ('event' occurrence counting) may be used for a'slow control' monitoring and a possible system recovery.

The main tasks as they are seen now are summarised below.

_Interaction with the level-1 trigger system_

- Receiving information about the events accepted by the level-1 trigger system.

- Receiving information about RoIs identified by the level-1 trigger system for the accepted events.

- Disabling generation of level-1 triggers.

_Managing the level-2 trigger system_

- Allocating free resources for event handling.

- Distributing allocation information.

- Receiving decisions from global event processors (level-2 yes/no).

- Distributing level-2 trigger system decisions.

- Receiving level-2 trigger system status information.

- Real-time level-2 trigger system monitoring.

A possible functional partitioning of the Supervisor may be done following his tasks. An Allocation Unit may perform the interaction with the level-1 trigger system and the allocation of level-2 trigger system resources for event handling. A Decision Unit may handle level-2 trigger system decisions and interact with the level-3 trigger system. A Resource Unit may monitor status of the level-2 trigger system, provide an information for the allocation and handle possible errors. All Units may have interfaces to a Detector Control System.

## 3 Supervisor / level-1 trigger system

For each event accepted by the level-1 trigger system the Allocation Unit inside the Supervisor receives an event identifier (Event_ID) and the RoI_Message from the level-1 trigger system. The maximum level-1 trigger rate is ~100 kHz. When the level-2 trigger system is close to saturation the Supervisor may generate inhibit signal (T1_Inhibit) and send it to the level-1 trigger system.

### Event identification

We assume that all data in the level 1 that may be required for subsequent transfer to the level 2 are stored in pipelines and will be labelled by a time tag (Event_ID) upon receiving the T1_Accept signal. This signal is generated by the Central Trigger Processor and broadcasted through an optical fibre distribution network terminated by timing receivers [1].

For overall system consistency the Event_ID may be generated by the same timing receivers. Bunch crossing counter (12 bits) and/or T1_Accept counter (8-10 bits) may be implemented inside the timing receiver and their outputs may be used as the sources for the Event_ID. Similar timing receivers may be used in subdetector front-end readout systems and in the level-1 and level-2 trigger systems for uniformity.

### Rol Unit and RoI_Message

The RoI_Message are generated by the RoI Unit after receiving the T1_Accept signal. The input data for the RoI_Message originates from the Central Trigger Processor and calorimeter and muon subtrigger processors inside the level-1 trigger system. Event_ID may be received from the timing receiver.

The input data have to be stored in pipelines until receiving the T1_Accept signal as subdetector data. The length of the pipelines may be estimated as ~20 steps (time for delivery the T1_Accept signal to the front-ends) and may be different for different input data. Accepted data and Event_IDs are transferred to the derandomising FIFOs and readout by the readout controllers to the RoI Unit (similar to the subdetector front-end readout). Depth of all these FIFOs may be equal to the ones in front-end readout systems. A possible use of a FIFO_full signal for the level-1 trigger system inhibit is discussed below.

As level-1 trigger system data are also sent to the level-2 buffers one have to defined:

* are these data different from the data are sent to the RoI Unit,
* could we use the same readout controllers to readout data used by the RoI Unit and sent to the level-2 buffers,
* could RoI Unit send level-1 trigger system data to the level-2 buffers or separate device is needed.

Data from the Central Trigger Processor (CTP) which may be included in the RoI_Message (and need to be readout and sent to the RoI Unit) are:

* input pattern from subtrigger processors (32+64 bits from the alignment register),
* output pattern for possible trigger candidates (32+64 bits from the trigger register),
* prescale values (32+64 12-bit words),
* veto pattern (32+64 bits from a control register).

The prescale values and the veto pattern are generated by external control system and are not changed every event. They may be sent to the Supervisor from the same control system (not via RoI_Message) otherwise more than 800 additional bits in the RoI_Message have to be sent.

Raw data from the calorimeter electron/photon subtrigger is a pattern of hits above threshold for \(\sim\)4096 trigger channels. The partitioning is defined by the cluster-finding ASIC[1]. There are 256 ASICs in entire system, each processes 16 trigger channels. The readout is performed by a readout controller according to the physical system partitioning (4 ASICs/board, 16 boards/crate, 4 crates). For each ASIC with hits above threshold the readout controller may send to the RoI Unit complete information packed in one 32-bit word:

-  crate address (2 bits), board address (4 bits), ASIC address (2 bits),

-  hit pattern from ASIC (16 bits),

-  energy level (8 bits?).

The number of words is assumed to be equal to the number of RoIs (5 per event in average).

A similar readout system may be used for the calorimeter jet subtrigger with \(\sim\)256 trigger channels. There are approximately 30 jet ASICs (each processes 9 trigger channels) mounted on 8 boards in jet crate. The information from jet readout controller for each ASIC with hits above threshold is:

-  board address (3 bits), ASIC address (2 bits),

-  hit pattern from ASIC (9 bits),

-  energy level (8 bits?).

This 22 bits may be also sent to the RoI Unit as one 32-bit word like in electron/photon subtrigger readout controller.

Missing transverse energy value (16 bits?) calculated in the calorimeter subtrigger may also be included in the RoI_Message and have to be readout from missing-Et module and sent to the RoI Unit.

Data from the muon subtrigger is several words (N bits?), one word per muon system'sector'. Each word contains the number of triggered muons and their RoI information. The central muon processor generates global muon information. This information need to be readout and sent to the RoI Unit.

The RoI Unit receives the Event_ID and data from the readout controllers and generates RoI_Messages. Number_of_RoIs may be calculated during the readout. RoI_Type is defined by the source readout controller (electron/photon, jet, muon?). Addresses together with hit pattern from the electron/photon and jet subtriggers data may be converted into RoI_Position. The content of the RoI_Message may include (without prescale values and veto pattern from CTP):

 event related information: -  Event_ID ( up to 22 bits ),

-  CTP input pattern ( 32+64 bits ),

-  CTP output pattern ( 32+64 bits ),

-  Missing_Et ( 16 bits ),

-  Number_of_RoIs ( 4 bits ),

RoI_Pointer (for each RoI): -  RoI_Number ( 4 bits ),

-  RoI_Type ( 4 bit? ),

-  RoI_Position ( \(\eta\)-\(\phi\), 6+6 bits ),

-  RoI_Specific_Information ( 8 bits? ).

The RoI Unit sends RoI_Message to the Allocation Unit inside the Supervisor. The volume of the RoI_Message (for 5 RoIs) may be estimated as \(\sim\)300 bits. The approximate link bandwidth for RoI_Message transmission can be estimated assuming the level-1 trigger rate of \(\sim\)100 kHz and 5 RoIs per event as \(\sim\)30 Mbits/s, but the actual transmission rate may be higher.

### Level-1 trigger system inhibit

The generation of the T1_Accept signal in the Central Trigger Processor may be disabled by a Gen_Veto signal to prevent data losses. Data may be lost in several cases:in front-end systems - if derandomising FIFOs are full (because of a limited FIFO depth and readout speed),
* if no more free space for incoming events (all processors are occupied or whole level-2 trigger system is stopped due to some errors and there is no events rejection from the buffer, level-3 trigger system does not receive accepted events).

The control of an overflow in the front-end system FIFOs is a time-critical task. It can't be solved even by providing hardware status signals from the front-end systems to the Central Trigger Processor as a signal propagation time is quite long. Some other mechanism should be invented.

From the level-2 buffers an information about possible buffer overflow may be provided in advance as a number of event buffers is quite large. This can be done through hierarchical hardware status signals or messages. But the level-1 trigger system should not be disabled'very often' without real reasons to prevent overall system dead time increasing.

Some 'virtual' mechanism to control generation of level-1 triggers inside the level-1 and level-2 trigger systems may be implemented. It may simulate potential overflow of the front-end derandomising FIFOs and the level-2 buffers by generation of internal inhibit signals. The Gen_Veto signal may be the OR of these internal signals.

One source for such signals may be the input Event_ID derandomising FIFO in the RoI Unit. The FIFO_full signal from this FIFO may be used as a 'virtual' front-end inhibit signal if the depth of this FIFO and the readout time are equal to the front-end ones.

Another source may be the input Event_ID buffer (FIFO) in the Supervisor (possibly in the Resource Unit). We may assume that the depth (variable) of this FIFO may be equal to the number of level-2 trigger resources available for storage/processing of incoming events (number of logical/physical event buffers in the level-2 buffers, number of global processors). In this case the FIFO_full signal from this FIFO may be used as a 'virtual' level-2 buffers inhibit signal. This signal may be combined with other possible inhibit signals and sent as the T1_Inhibit signal from the Supervisor to the level-1 trigger system.

## 4 Supervisor / level-2 trigger system

For each accepted event the Allocation Unit receives RoI_Message, assigns free level-2 trigger system resources and sends an allocation information. The Resource Unit receives a level-2 trigger system status information and provides the information about free resources to the Allocation Unit. The Decision Unit receives messages from the level-2 trigger system and handles overall decisions.

### Level-2 trigger system resources

Detector raw data after every positive level-1 trigger decision are pushed from the front-end electronics into non-overlapping level-2 buffers via data transmission links (cables or fibres). Data links are assumed to be unidirectional and without handshake, feedback is implemented via the T1_Inhibit signal. The number of links (and level-2 buffers) is different for different types of subdetectors [8] (from tens to hundreds, up to two thousand buffers in total). The data format is detector-specific, but may be framed in a defined Event_Data format to simplify data handling in level-2 buffers.

#### Level-2 buffers and RoI_Data Extractors

The Level-2 buffers and the RoI_Data Extractors have different tasks (see below) but logically they are coupled and may be integrated in a single logical unit (an Intelligent Buffer). Functionally such a unit may have three data ports: an input port for receiving the incoming Event_Data, an output port for transmitting the complete Event_Data to the level-3and an output port for transmitting (a subset of) RoI_Data to the RoI_Data Collector. One control port is connected to the Supervisor and another to the Detector Control System. The internal structure of such a device may be different for different implementations of RoI_Data Extractors ('router' [6] or intelligent interface to the buffer [5]).

Level-2 buffer tasks are:

* initialisation of Event_Data buffers (EDB) if necessary and declaring them as free for Event_Data storage in a list of free EDBs,
* receiving Event_Data from a subdetector and writing them into a free EDB; removing the EDB from the list of free EDBs and declaring it as ready for the RoI_Data extraction,
* receiving a level-2 trigger system decision and declaring the EDB as free (for rejected events) or as ready for transferring Event_Data to the level-3,
* transmitting Event_Data from the EDB to the Event Builder and declaring the EDB as free.

From the Supervisor the level-2 buffer receives level-2 trigger system decisions as Decision_Messages and uses them to handle the EDBs. The level-2 buffer may generate status signal Buffer_Full and send it to the Supervisor when the list of free EDBs is almost empty.

RoI_Data Extractor tasks are:

* receiving an Allocation_Message from the Allocation Unit and selecting an information corresponding to this RoI_Data Extractor,
* extraction (a subset of) RoIs_Data from the EDB or from data transmission links, possibly pre-processing extracted data and transmitting them to the RoI_Data Collector.

RoI_Data Collectors and Local Processors (Local Processors Cluster)

The RoI_Data Collector receives subsets of RoI_Data from the RoI_Data Extractors, merges them and transfers to the Local Processor for the RoI_Feature extraction. A RoI_Data collection may be performed in parallel for each subdetector. The RoI_Data Collectors may have different implementation:

* e.g. a DSP, executing RoI_Data extraction and collection. Subsets of RoI_Data are collected via DSP communication links (mainly from nearest-neighbours) and transferred to the Local Processor through a communication path.
* e.g. part of the Local Processor permanently allocated to region of the subdetector. Subsets of RoI_Data are collected via'subdetector region' communication networks (edge connections with other regions).
* e.g. part of a Local Processor dynamically allocated to RoIs. Subsets of RoI_Data are collected via global'subdetector' communication network.

Local Processor receives RoI_Data from RoI_Data Collector performs the RoI_Feature extraction and sends result to the RoI_Feature Collector inside a Global Processor, allocated for this event.

RoI_Feature Collectors and Global Processors

The RoI_Feature Collector receives RoI_Features from the Local Processors, forms complete set of RoI_Features and transfers it to the Global Processor for the RoI_Object building and Trigger Event building. The Global Processor sends a result of the processing as a Global_Proc_Message to a Decision Unit in the Supervisor.

### Allocation Unit and Allocation_Message

The allocation of the level-2 trigger system resources (listed above) is performed by an Allocation Unit for every event accepted by the level-1 trigger system. An input information for the allocation may include:

* the event identifier (Event_ID) for the event accepted by the level-1 trigger system from the timing receiver,the RoI_Message from the RoI Unit in the level-1 trigger system,

identifiers of free Local and Global Processors from the Resource Unit inside the

Supervisor (for a dynamically allocated processors),

a type of event processing (event handling algorithm) from the Detector Control System,

a level-2 trigger system decision from the Decision Unit inside the Supervisor (for the

possible recursive processing).

The Allocation Unit may generate the common Allocation_Message for all destinations or separate Allocation_Messages for different parts of the level-2 trigger system and send them via common or separate communication paths. The Allocation_Message have include all necessary information for an event processing.

The RoI_Data Extractors are permanently allocated to the regions of subdetector (as router) or to the level-2 buffers (as in the Intelligent Buffer) and need only an 'activation' information and a destination for the (subset of) RoI_Data from the Allocation_Message.

An allocation of the RoI_Data Collectors and the Local Processors (or Local Processors clusters) for RoI_Feature extraction may be permanent to a region of the subdetector. Inside the Local Processors cluster the allocation may be performed locally by the RoI_Data Collector (not by the Supervisor) on a base of a status information from the Local Processors (free/busy) to the RoI_Data Collector. A small input FIFO for the RoI_Data inside processors will reduce idle time and may be used to generate status.

A dynamic allocation of he RoI_Data Collectors and the Local Processors (integrated with RoI_Data Collector or separated) may be performed by the Allocation Unit on a base of an information from the Resources Unit.

An allocation of the Global Processors may be performed by using part of Event_ID (less significant bits) from Event_Messages or in a similar way as for the dynamically allocated Local Processors.

The Allocation Unit may assign the Local Processor (Local_Proc_ID) for each RoI and the Global Processor (Global_Proc_ID) for the event and generates the Allocation_Message. In a case of the common Allocation_Message it may include:

\begin{tabular}{l l} event related information: & - & Event_ID ( up to 22 bits ), \\  & - & Global_Proc_ID ( 8-10 bits ), \\  & - & CTP input pattern ( 32-64 bits ), \\  & - & CTP output pattern ( 32-64 bits ), \\  & - & Missing_Et ( 16 bits ), \\  & - & Number_of_RoIs ( 4 bits ), \\ RoI related information (for each RoI): & - & RoI_Number ( 4 bits ), \\  & - & RoI_Type ( 4 bit? ), \\  & - & RoI_Position ( \(\eta\)-\(\phi\), 6+6 bits ), \\  & - & RoI_Specific_Information ( 8 bits ), \\  & - & Local_Proc_ID ( 10 bits ). \\ \end{tabular}

The volume of the Allocation_Message (for 5 RoIs) may be estimated as \(\sim\)370 bits. It is sent (broadcasted) to all destinations, a number of them may be estimated as about 3-4 thousands. Each individual destination of the Allocation_Message will fetch his own part of the message and use it for an activation of his actions.

Different possibilities for en event processing scenario by the level-2 trigger system are envisaged - single pass of all RoIs trough the Local and Global Processors, processing of RoIs from some subdetectors first and then event rejection or complete processing (recursive processing), etc. This may involve a need to keep the Allocation_Message (or all input information for the allocation) inside the Allocation Unit until a completing of the event processing for possible reuse.

### Decision Unit

The Decision Unit inside the Supervisor receives Global_Proc_Messages from the Global Processors. This message may include a pattern of possible trigger candidates for the event which passed different trigger conditions (and not just a one bit accept/reject decision). The Decision Unit then may made an overall decision. This may include down scaling of some high rate trigger candidates. The event may be marked as accepted, rejected or rejected but kept as a monitoring event (and may be as some other event types?). It seems easier to perform these tasks in the Decision Unit than in the Global Processors. A level-2 trigger system status information may be included in the Global_Proc_Messages. This information may be used by the Resource Unit in the Supervisor. The content of the Global_Proc_Message may include:

\begin{tabular}{l l}  - & Event_ID ( up to 22 bits ), \\  - & Global_Proc_ID ( 8-10 bits? ), \\  - & Trigger_Candidates ( 32-64 bits ) \\  - & Status_Info (? - optionally ). \\ \end{tabular}

The volume of the Global_Proc_Message may be estimated as \(\sim\)100 bits (without a Status_Info). The Decision Unit forms Decision_Message and broadcasts it to the level-2 buffers via a Decision_Message distribution network. The content of the Decision_Message may include:

\begin{tabular}{l l}  - & Event_ID ( up to 22 bits ), \\  - & Event_Mark ( 2-3 bits ), \\ \end{tabular}

An Event_Mark information may define the actions to be done on the Event_Data in the level-2 buffers. The volume of the Decision_Message may be estimated as \(\sim\)30 bits. The same message may be sent to the level-3 trigger system Manager.

### Resource Unit

The Resource Unit inside the Supervisor monitors status of the level-2 trigger system, provides the information for the Allocation Unit and handle possible errors.

A monitoring procedure may be done on a basis of an 'actual' status information from all relevant parts of the level-2 trigger system (provided via hardware signals or messages). This may involve a large number of status signals, some delay in the status delivery and possible increasing of a processors idle time and the level-2 trigger system latency.

Alternatively a 'virtual' model of the level-2 trigger system may be created (hardware, software, mixed) inside the Resource Unit and the status information will be provided from this model of the real system. An information from the real system may be used in addition and to check a behaviour of the model.

All necessary status information from the level-2 trigger system may be defined as well as the possible models for each elements (or group of elements). Some initial ideas for processors list and time-outs handling have been described already [7]. Possible sources of errors, an error reporting and recovery mechanism may be defined also.

### Level-2 trigger system monitoring

The level-2 trigger system will be actually a complex, spatially distributed multiprocessor. There will be data inputs (Event_Data from detectors and Allocation_Messages from the Supervisor), data outputs (Global_Decisions from global processors) and processing elements with associated memory buffers (level-2 buffers, data extractors and collectors, local and global processors). There will be several processes (data extraction, transfer, collection, processing) which will be executed in the system concurrently. A processes synchronisation will be done by using different mechanisms (signals, messages, etc.).

Such a complex system must have powerful monitoring system. A monitoring strategy and methods, system parameters to be monitored and reporting and recovery mechanisms have to be defined. There are just some general ideas.

#### Data flow capturing

During a data flow through the level-2 trigger system data are stored in different buffer memories in the system. Some important points on data paths inside the system may be defined and monitoring ('spy' or 'history') memories may be placed there. All these memories must have read/write access from a monitoring system.

All processes in the system may keep history of their status accessible for the monitoring system. They also may have a mechanism for single-time execution (so called'step by step') controlled from the monitoring system (e.g. via artificial generation of synchronisation signals).

This will give a possibility to have'snap-shot' of the system state at any logical step during overall system algorithm execution and, for example, to compare this information with one from the system model.

#### System model

We mentioned already the possible use of 'virtual' model of the level-2 trigger system inside the Resource Unit for the resources handling. A model for the whole level-2 trigger system may be created with actual physical parameters of all system components. There are several possible use of such a model:

- event processing algorithms debugging,* level-2 trigger system study (parameters, performance),
* level-2 trigger system debugging,
* search for faulty parts of the after system crash, etc.

The model may simulate a behaviour of the level-2 trigger system in parallel with real system and generate some reference 'pattern' of status signals (or messages) which may be compared with real pattern from level-2 trigger system.

A language to describe the system and create the model should be defined. There are may be several different models - for detailed system study, for fast on-line simulation, etc. The possible graphical representation of the system and main system parameters may be developed.

## 5 Acknowledgements

I would like to thank R.K.Bock J.Strong and N.Ellis for useful discussions and comments which have been included in this note.

## References

* [1] First-level Trigger System for LHC Experiments, CERN/DRDC 93-32, RD-27 Status Report, 11 August 1993.
* [2] P.Hanke, M.Keller: RoI-Building: Results from a First Demonstrator, RD-27 note 25, March 1994.
* [3] Status Report: Embedded Architectures for Second-level Triggering (EAST), CERN/DRDC 94-20, RD-11 Status Report, 9 May 1994, (EAST note 94-16).
* [4] Z.Hajduk, W.Iwanski, K.Korcyl: Modelling of local/global architectures for second level trigger at the LHC experiment, ATLAS Internal Note DAQ-NO-13, 16 May 1994, EAST (RD-11) note # 94-17, RD-13 note # TN-116, 20 February 1994.
* [5] B.J.Green et al.: A second level data buffer with LHC performance. ATLAS DAQ note 94-20, 30 November 1994.
* [6] P.Kammel, V.Dorsing, A.Reinsch, R.Bock: Discussion of a generalised programmable Router, CERN/EAST Note 94-14, 10 May 1994 (Rev.2).
* [7] N.Ellis: Ideas for Local/Global Level-2 Trigger System, RD-27 note 7, 4 March 1993.
* [8] R.Bock and P.LeDu: Readout data specification for modelling a level-2 trigger using region of interest, ATLAS DAQ note 94-25, 5 December 1994.