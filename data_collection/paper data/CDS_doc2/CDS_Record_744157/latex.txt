# The Monte Carlo Event Generator

AcerMC version 2.0 with interfaces to

PYTHIA 6.2 and HERWIG 6.5

Bortu Paul Kersevan

Faculty of Mathematics and Physics, University of Ljubljana, Jadranska 19, SI-1000 Ljubljana, Slovenia.

and

Jozef Stefan Institute, Jamova 39, SI-1000 Ljubljana, Slovenia.

Elzbieta Richter-Was

Institute of Physics, Jagellonian University,

30-059 Krakow, ul. Reymonta 4, Poland;

and

Institute of Nuclear Physics PAS, 31-342 Krakow, ul. Radzikowskiego 152, Poland.

Partly supported by Marie Curie Host Fellowship for the Transfer of Knowledge Contract No. MTKD-CT-2004-510126 and by the EC FP5 Centre of Excellence "COPIRA" under the contract No. IST-2001-37259.

###### Contents

* 1 PROGRAM SUMMARY
* 2 Changes since AcerMC 1.0
* 3 Introduction
* 4 Physics content
	* 4.1 The \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) processes
	* 4.2 The \(q\bar{q}\to W(\to\ell\nu)g^{*}(\to t\bar{b})\) process
	* 4.3 The \(q\bar{q}\to W(\to\ell\nu)g^{*}(\to t\bar{t})\) process
	* 4.4 The \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)b\bar{b}\) processes
	* 4.5 The \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b})t\bar{t}\) processes
	* 4.6 The electroweak \(gg,q\bar{q}\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) process
	* 4.7 The \(gg,q\bar{q}\to(WWb\bar{b}\to)ffffb\bar{b},gg,q\bar{q}\to(t\bar{t}\to)ffffb\bar{b}\) processes
	* 4.8 The \(gg,q\bar{q}\to t\bar{t}t\bar{t}\) process
	* 4.9 The _control channel_ processes
* 5 Monte Carlo algorithm
	* 5.1 The Matrix Element Calculation
	* 5.2 The Phase Space Generation Procedure
	* 5.3 Modified Kajantie-Byckling Formalism
		* 5.3.1 The s-type Branching Algorithms
		* 5.3.2 The t-type Branching Algorithms
	* 5.4 Propagator Sampling
		* 5.4.1 Breit-Wigner Function with s-dependent Width
		* 5.4.2 The Inclusion of Mass Effects in Propagator Sampling
	* 5.5 Application of the Phase Space Generation Algorithms
		* 5.5.1 Modified VEGAS Algorithm
		* 5.5.2 Colour Flow Information
	* 5.6 The \(\alpha_{\rm QED}\) and \(\alpha_{s}\) calculations
* 6 Structure of the package
	* 6.1 Main event loop and interface to PYTHIA/HERWIG, TAUOLA and PHOTOS
	* 6.2 Structure of the **AcerMC*
* matrix-element and phase-space code
	* 6.3 Data files for the phase-space optimisation
* 7 How to use the package
	* 7.1 Steering switches of the overall run
	* 7.2 Steering switches of the **AcerMC*
	* 7.3 Steering TAUOLA and PHOTOS
	* 7.4 How to prepare data-files for the non-default setup
	* 7.5 Details on the interface to PYTHIA 6.2
	* 7.6 Details on the interface to HERWIG 6.5
	* 7.7 Definition of the energy scale
	* 7.8 Installation procedure
	* 7.9 Storing and reading events using the Les Houches accord
* 7.10 Interface of TAUOLA to PYTHIA and HERWIG
* 7.11 Interface of PHOTOS to PYTHIA and HERWIG
* 7.12 Details of the TAUOLA implementation
* 7.13 Details of the PHOTOS implementation
* 8 Outlook and conclusions
* A Feynman Diagrams* B Example input files
* B.1 File run.card
* B.2 File acermc.card
* B.3 File tauola.card
* B.4 File photos.card
* C Example output files
* C.1 File acermc.out
* C.2 File pythia.out
* C.3 File herwig.out

[MISSING_PAGE_EMPTY:4]

[MISSING_PAGE_FAIL:5]

## 2 Changes since AcerMC 1.0

* **AcerMC version 1.1**: The changes include transition to HERWIG 6.4, updated scale choices for processes **5-8** (c.f. Section 7.7) and the inclusion of control processes 91-94 for consistent process evaluation (c.f. Section 4.9). Also, a possibility of an event dump according to the Les Houches standard was added (see Section 7.9).
* **AcerMC version 1.2**: A bug fix in HERWIG 6.4, affecting the shower evolution, was made. It carries no immediate impact on the AcerMC processes but was discovered by the AcerMC authors and added for the convenience of the users. This bug fix will be included in future versions of HERWIG. Also, the PYTHIA version was upgraded to PYTHIA 6.208 and the the implementation of storing/reading back of hard process events according to the Les Hauches standard was simplified with respect to **AcerMC 1.1** (see Section 7.9). Also, for the convenience of the users the Pythia code was modified so that the top decay products from **AcerMC** processes are now stored in the history part of the event record (status code 21) and have the correct pointers to the top quark they originate from. This feature will be added to the future versions of PYTHIA.
* **AcerMC version 1.3**: A transition to the HERWIG 6.5 was made, which now supports the Les Houches standard for handling the external processes. Consequently, the **AcerMC** interface to HERWIG was completely rewritten (c.f. Section 7.6). As a direct consequence, the same event record can freely be swapped (i.e. read back) to either PYTHIA or HERWIG for fragmentation and hadronisation treatment. In addition, the PYTHIA version was upgraded to PYTHIA 6.214. Also, the build procedure of the libraries and executables was greatly simplified (see Section 7.8).
* **AcerMC version 1.4**: The interfaces to external TAUOLA and PHOTOS libraries were added. The necessary modifications in the interface routines and the native PHOTOS code were made to enable the user to process the events with TAUOLA and/or PHOTOS using PYTHIA or HERWIG as the supervising generators.
* **AcerMC version 2.0**: **New algorithm for phase space generation implemented and optimised**. New processes were added: \(q\bar{q}\to(Z/W/\gamma^{*}\to)t\bar{t}b\bar{b}\), \(gg,q\bar{q}\to t\bar{t}t\bar{t}\); \(gg,q\bar{q}\to(t\bar{t}\to)f\bar{f}bf\bar{b}\); \(gg,q\bar{q}\to t\bar{t}\) and \(gg\to(t\bar{t}\to)WbW\bar{b}\). New control channel added: \(gg\to(t\bar{t}\to)WbW\bar{b}\).

## 3 Introduction

Despite a large repertoire of processes implemented for generation in the universal generators like PYTHIA[1] or HERWIG[2] a number of Standard Model background processes for studying expected physics potential of the LHC experiments is still missing. For some of these processes the matrix element expressions are rather lengthy and/or to achieve a reasonable generation efficiency it is necessary to tailor the phase-space selection procedure to the dynamics of the process. Due to this fact it cannot be expected that any of the universal purpose generators will contain _every_ process that is expected to participate at LHC pp collisions with an observable rate. A more practical solution could come in form of dedicated matrix-element-based generators with standardised interfaces, like the one proposed in [3], to the more general ones which are used to complete event generation.

The **AcerMC** Monte Carlo Event Generator follows up on this idea. It is dedicated for the simulation of the specific Standard Model background processes at LHC collisions: the \(gg,q\bar{q}\to t\bar{t}b\bar{b}\), \(q\bar{q}\to W(\to\ell\nu)b\bar{b}\); \(q\bar{q}\to W(\to\ell\nu)t\bar{t}\); \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)b\bar{b}\); \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b})t\bar{t}\); complete EW \(gg,q\bar{q}\to(Z/W/\gamma^{*}\to)t\bar{t}b\bar{b}\); 4 top-quark production \(gg,q\bar{q}\to t\bar{t}t\bar{t}\); extended treatement of the 2 top-quark production \(gg,q\bar{q}\to(t\bar{t}\to)f\bar{b}f\bar{b}\) and \(gg,q\bar{q}\to(WWbb\to)ffff\bar{b}\). They are characterised by the presence of the heavy flavour jets and multiple isolated leptons in the final state. For the Higgs boson searches, the \(t\bar{t}H\), \(ZH,WH\) with \(H\to b\bar{b}\), the \(gg\to H\) with \(H\to ZZ^{*}\to 4\ell\), the \(b\bar{b}h/H/A\) with \(h/H/A\to\tau\tau,\mu\mu\) are the most obvious examples of signals where the implemented processes would contribute to the dominant irreducible backgrounds. The same background processes should also be considered for e.g. estimating the observability of SUSY events with a signature of multi-b-jet and multi-lepton production.

The program itself provides library of the massive matrix elements and phase space modules for the generation of the implemented processes. The hard process event, generated with these modules, can be completed by the initial and final state radiation, hadronisation and decays, simulated with either PYTHIA 6.2 or HERWIG 6.5 Monte Carlo Event Generators. These will subsequently be called the _Superstring Generators_. Interfaces of **AcerMC** to both, PYTHIA 6.2 or HERWIG 6.5 generators, are provided in the distribution version. Provided is also interface to TAUOLA[5] and PHOTOS[4] packages, for the more correct treatement of the \(\tau\)-lepton decays and photon radiation, than what available in the _Superstring Generators_. The **AcerMC** also uses several other external libraries: CERNLIB, HELAS[6], VEGAS[7]. The matrix element codes have been derived with the help of MADGRAPH[8] package. The achieved typical efficiency for the generation of unweighted events is of **20% - 30%**, rather high given a complicated topology of the implemented processes.

This paper superseeds the first version of the manual, published in [9]. The outline of this paper is as follows. In Section 3, we describe physics motivation for implementing each of the above processes and we collect some numerical results (plots, tables) which can be used as benchmarks. In Section 4 we describe the overall Monte Carlo algorithm. Section 5 gives details on the structure of the program. Section 6 collects information on how to use this program and existing interfaces to PYTHIA 6.2 and HERWIG 6.5, TAUOLA and PHOTOS. Summary, Section 7, closes the paper. Appendix A documents sets of Feynman diagrams used for calculation of the matrix element for each subprocess, Appendices B and C give examples of the input/output of the program.

## 4 Physics content

The physics programme of the general purpose LHC experiments, ATLAS [14] and CMS [15], focuses on the searches for the _New Physics_ with the distinctive signatures indicating production of the Higgs boson, SUSY particles, exotic particles, etc. The expected environment will in most cases be very difficult, with the signal to background ratio being quite low, on the level of a few percent after final selection in the signal window.

Efficient and reliable Monte Carlo generators, which allow one to understand and predict background contributions, are becoming the key point to the discovery. As the cross-section for signal events is rather low, even rare Standard Model processes might become the overwhelming background in such searches. In several cases, generation of such a process is not implemented in the general purpose Monte Carlo generators, when the complicated phase space behaviour requires dedicated (and often rather complex) pre-sampling, whilst the general purpose Monte Carlo generators due to a large number of implemented processes tend to use simpler (albeit more generic) phase space sampling algorithms. In addition, the matrix element for these processes is often lengthy and thus requiring complicated calculations. Only recently, with the appearance of modern techniques for automatic computations, their availability _on demand_ became feasible for the tree-type processes. With the computation power becoming more and more easily available, even very complicated formulas can now be calculated within a reasonable time frame.

The physics processes implemented in **AcerMC** library represent such a set of cases. They are all being key background processes for the discovery in the channels characterised by the presence of the heavy flavour jets and/or multiple isolated leptons. For the Higgs boson searches, the \(t\bar{t}H\), \(ZH,WH\) with \(H\to b\bar{b}\), the \(gg\to H\) with \(H\to ZZ^{*}\to 4\ell\), the \(b\bar{b}h/H/A\) with \(h/H/A\to\tau\tau,\mu\mu\) are the most obvious examples of such channels.

It is not always the case that the matrix element calculations in the lowest order for a given topology represent the total expected background of a given type. This particularly concerns the heavy flavour content of the event. The heavy flavour in a given event might occur in the hard process of a much simpler topology, as the effect of including higher order QCD corrections (eg. in the shower mechanism). This is the case for the b-quarks present in the inclusive Z-boson or W-boson production, which has a total cross-section orders of magnitude higher than the discussed matrix-element-based \(Wb\bar{b}\) or \(Zb\bar{b}\) production. Nevertheless, the matrix-element-based calculation is a very good reference point to compare with parton shower approaches in different fragmentation/hadronisation models. It also helps to study matching procedures between calculations in a fixed \(\alpha_{QCD}\) order and parton shower approaches. For very exclusive hard topologies matrix-element-based calculations represent a much more conservative approximation than the parton shower ones [16].

Let us shortly discuss the motivation for these few Standard Model background processes which are implemented in the **AcerMC 2.0** library.

**The \(t\bar{t}b\bar{b}\) production** at LHC is a dominant irreducible background for the Standard Model (SM) and Minimal Supersymmetric Standard Model (MSSM) Higgs boson search in the associated production, \(t\bar{t}H\), followed by the decay \(H\to b\bar{b}\). The potential for the observability of this channel has been carefully studied and documented in [14] and [17]. Proposed analysis requires identifying four b-jets, reconstruction of both top-quarks in the hadronic and leptonic mode and visibility of the peak in the invariant mass distribution of the remaining b-jets. The irreducible \(t\bar{t}b\bar{b}\) background contributes about 60-70% of the total background from the \(t\bar{t}\) events (\(t\bar{t}b\bar{b}\), \(t\bar{t}b\bar{b}\), \(t\bar{t}jj\)).

**The \(Wb\bar{b}\) production** at LHC is recognised as a substantial irreducible background for the Standard Model (SM) and Minimal Supersymmetric Standard Model (MSSM) Higgs boson search in the associated production, \(WH\), followed by the decay \(H\to b\bar{b}\). The **AcerMC** library discussed here includes even more efficient implementation of the algorithm presented in [10].

**The \(Wt\bar{t}\) production** at LHC has to our knowledge not been implemented in the publicly available code so far1. It is of interest because it contributes an overwhelming background [13] for the measurement of the Standard Model Higgs self-couplings at LHC in the most promising channel \(pp\to HH\to WWWW\).

Footnote 1: We thank M. L. Mangano for bringing this process to our attention and for providing benchmark numbers for verifying the total cross-section.

**The \(Z/\gamma^{*}(\rightarrow\ell\ell)b\bar{b}\) production** at LHC has since several years been recognised as one of the most substantial irreducible (or reducible) backgrounds for the several Standard Model (SM) and Minimal Supersymmetric Standard Model (MSSM) Higgs boson decay modes as well as for observability of the SUSY particles. There is a rather wide spectrum of _regions of interest_ for this background. In all cases the leptonic \(Z/\gamma^{*}\) decay is asked for, but events with di-lepton invariant mass around the mass of the Z-boson mass or with the masses above or below the resonance peak could be of interest. The presented process enters an analysis either by the accompanying b-quarks being tagged as b-jets, or by the presence of leptons from the b-quark semi-leptonic decays in these events, in both cases thus contributing to the respective backgrounds.

Good understanding of this background, and having a credible Monte Carlo generator available, which allows studying of expected acceptances for different final states topologies, is crucial for several analyses at LHC. The **AcerMC** librarydiscussed here includes more efficient implementation of the algorithm presented in [11].

**The \(Z/\gamma^{*}(\rightarrow\ell\ell,\nu\nu,b\bar{b})t\bar{t}\) production** at LHC is an irreducible background to the Higgs search in the invisible decay mode (case of \(Z\rightarrow\nu\nu\)) in the production with association to the top-quark pair [28]. With the \(Z/\gamma^{*}(\rightarrow{b\bar{b}})\) it is also an irreducible resonant background to the Higgs search in the \(t\bar{t}H\) production channel but with the Higgs boson decaying to the b-quark pair [17].

The complete **EW production** of the \(gg,q\bar{q}\rightarrow(Z/W/\gamma^{*}\rightarrow)b\bar{b}t\bar{t}\) final state is also provided. It can be considered as a benchmark for the previous process, where only the diagrams with resonant \(gg,q\bar{q}\rightarrow(Z/\gamma^{*}\rightarrow)b\bar{b}t\bar{t}\) are included. It thus allows the verification of the question, whether the EW resonant contribution is sufficient in case of studying the \(t\bar{t}b\bar{b}\) background away from the Z-boson peak, like for the \(t\bar{t}H\) with Higgs-boson mass of 120 GeV.

**The \(gg,q\bar{q}\rightarrow\)\(t\bar{t}t\bar{t}\) production**, interesting process per se, is a background to the possible Higgs self-coupling measurement in the \(gg\to HH\to WWWW\) decay, [13].

**The \(gg,q\bar{q}\rightarrow(WWbb\)\(\rightarrow)f\bar{f}f\bar{b}\bar{b}\) and \(gg,q\bar{q}\rightarrow(t\bar{t}\rightarrow)f\bar{f}b\bar{f}\bar{b}\)** processes give posiblity to study spin correlations in the top-quark pair production and decays as well as the effect from the off-shell production. Those are important for the selection optimisation eg. in the \(gg\to H\to WW\) channel, see the discussion in [35]

A set of **control channels**, i.e. the \(q\bar{q}\rightarrow\)\(Z/\gamma^{*}\rightarrow\ell\ell,gg,q\bar{q}\rightarrow\)\(t\bar{t}\), \(q\bar{q}\rightarrow\)\(W\rightarrow\ell\nu\) and \(gg\rightarrow(t\bar{t}\rightarrow)WbW\bar{b}\) processes, have been added to **AcerMC** in order to provide a means of analysing and cross-check studies.

This completes the list of the native **AcerMC** processes implemented so far. Having all these different production processes implemented in the consistent framework, which can also be directly used for generating standard subprocesses implemented in either PYTHIA or HERWIG Monte Carlo, represents a very convenient environment for several phenomenological studies dedicated to the LHC physics.

For the cases, where radiative photon emission from final state leptons is important the package PHOTOS[4] can be used in the chain of event generation. In similar way also package TAUOLA[5] can be interfaced directly to the generation chain and used for events generation in cases where more detailed treatment of the tau-lepton decay and including spin correlations effects is relevant.

In the following subsections we discuss in more detail implementation of each subprocess. We also give benchmark Tables with the total cross-sections obtained with AcerMC processes but different implementations and setting of \(\alpha_{\rm QCD}(Q_{QCD})\): the native AcerMC, PYTHIA and HERWIG ones. For a more detailed discussion on this topic the reader is referred to Section 5.6. If the native **AcerMC** definition is used, the same cross-section is obtained either with PYTHIA or HERWIG generation chains.

### The \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) processes

In the implementation discussed here, the matrix element was derived using the MADGRAPH package [8]. These matrix elements are not covering the decay of the top-quarks, the latter are considered as massive final states of the process. The top-quark decays is than performed by the supervising generator. Rather important spin effects (spin correlations) in the top decays are therefore not yet included. The similar solution, like for tau decay in the Z-boson production process discussed in [29], is planned to be implemented here in the near future.

As a benchmark, the processes \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) have been simulated for pp collisions with 14 TeV centre-of-mass energy and CTEQ5L[30] parton density functions, using event generation with massive \(2\to 4\) matrix element implemented as an external process to PYTHIA 6.2 (see Section 4 and 5). The decays of the top-quarks have been left under control of PYTHIA 6.2 generator. The \(q\bar{q}\to t\bar{t}b\bar{b}\) subprocess contributes less than 10% of the total cross-section.

The total cross-section is very sensitive to the choice of the QCD energy scale used for calculation of that process, thus indicating potentially large contributions from higher order corrections. The same definition for the factorisation and renormalisation scale is used. The example values of the total cross-section for implemented choices of the QCD energy scale are given in Table 12.

Footnote 2: Numbers obtained with HERWIG generator (third column) are slightly different than what published in [9]. This is related to the internal changes in HERWIG between version 6.3 and 6.5.

As a cross-check, the processes \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) have been coded independently using the COMPHEP package [31]. The same set of diagrams was selected and only the integrating part of the package was used to calculate total cross-section. The choices for the QCD energy scale were kept consistent. A very good agreement between the cross-sections obtained with two independent calculation streams prepared for this study has been achieved [12].

One can observe a very strong scale dependence of the cross-section for the \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) process (c.f. Table **1**). Factor four (!!) can be expected on the predicted cross-section when changing from the scale \(Q_{QCD}^{2}~{}=~{}\hat{s}\) to the scale \(Q_{QCD}^{2}~{}=~{}<\)\(p_{T}^{2}>\). This very strong dependence on the energy scale is also observed in the case of the \(t\bar{t}H\) production, for recent discussion see [32]. There, the recommended _central_ factorisation and renormalisation energy scale is \(\mu_{0}~{}=~{}(m_{t}+m_{H}/2)\). Having in mind that the primary interest of evaluating this background is the Higgs search in the \(t\bar{t}H\) production, i.e. with the b-quark system being produced with the invariant mass of the expected Higgs boson, we have also introduced this _central_ energy scale, with \(m_{H}~{}=~{}120\) GeV as one of the possible choices.

Fig. **1** shows the distributions of the \(Q_{QCD}=\sqrt{Q_{QCD}^{2}}\) (distributions have been normalised to one) for the \(t\bar{t}b\bar{b}\) events with the invariant mass of the b-jets system, calculated using the default PYTHIA (LO) \(\alpha_{\rm QCD}\) implementation3. \(m_{bb\to jets}~{}=~{}120~{}\pm~{}30\) GeV. The distribution is well collimated around the average value when \(Q_{QCD}^{2}\) is defined as \(<m_{T}^{2}>\) or \(<p_{T}^{2}>\) while it is much broader when \(Q_{QCD}^{2}\) is defined as \(\bar{s}\). The kinematic distributions are very similar in shape for separate \(gg\to t\bar{t}b\bar{b}\) and \(q\bar{q}\to t\bar{t}b\bar{b}\) contributions. The total cross-section for accepted events as a function of the averaged \(Q_{QCD}^{2}\) (for these events) is shown in the bottom plot. It can be noted that the cross-section decreases rather fast with the increasing value of the average \(<Q_{QCD}^{2}>\). Also shown is the \(\alpha_{s}^{4}(Q_{QCD})\) dependence scaled to match the cross-section at \(Q_{QCD}=(m_{H}/2+m_{t})\) with \(m_{H}=120~{}\) GeV, it being the only calculated cross-section point with a fixed scale. The other cross-sections are shown to follow the expected \(\alpha_{s}^{4}(Q_{QCD})\) dependence rather well, while the deviations are induced by the parton density function dependence on the \(Q_{QCD}^{2}\) scale, most notably at \(Q_{QCD}^{2}=\bar{s}\) value. The deviations induced by the parton density functions dependence on the \(Q_{QCD}^{2}\) scale are different for the \(gg\) and \(q\bar{q}\) contributions, as can be concluded from results given in Table **1**.

Footnote 3: This would makes distributions directly relevant for the \(t\bar{t}H\) analysis. For details on the jet reconstruction see [33].

The series of plots illustrating the most relevant differential distributions for the top-quarks and b-quarks can be found in [12].

### The \(q\bar{q}\to W(\to\ell\nu)g^{*}(\to b\bar{b})\) process

The matrix element for the implemented process was coded by using the MADGRAPH package [8]. This process is represented by only two Feynman diagrams, with quark exchange in the t-channel, leading to the production of the \(W\)-boson and virtual gluon splitting into \(b\bar{b}\) pair. Only the \(u,d,s,c\) quarks were considered in this implementation, the possibility of the b-quark in the initial state was omitted as expected to be negligible numerically (e.g., \(|V_{bc}/V_{ud}|^{2}\sim 0.002\)) but leading to several additional diagrams which would have to be included. The massive matrix element takes into account spin correlations in the W-boson decay and angular correlations between leptons and quarks. Due to the massive treatment of the final state

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QCD}\) (IL) & \(\alpha_{QCD}\) (IL) & \(\alpha_{QCD}\) (IL) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.5 \\ \hline \hline \(Q_{QCD}^{2}\,=\,\hat{s}\) & 4.2 [pb] & 3.9 [pb] & 3.0 [pb] \\ \hline \(Q_{QCD}^{2}\,=\,\hat{\sum}\,({p_{T}^{2}}^{2})/4\) & 10.3 [pb] & 10.2 [pb] & 7.2 [pb] \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,({p_{T}^{2}}^{2})/4\) & 17.0 [pb] & 16.9 [pb] & 11.5 [pb] \\ \hline \(Q_{QCD}^{2}\,=\,(m_{t}+m_{H}/2)^{2}\) & 8.2 [pb] & 8.1 [pb] & 5.8 [pb] \\ \hline \hline \(Q_{QCD}^{2}\,=\,\hat{s}\) & \multicolumn{3}{c|}{\(q\bar{q}\to t\bar{t}b\bar{b}\)} \\ \hline \(Q_{QCD}^{2}\,=\,\hat{s}\) & 0.30 [pb] & 0.29 [pb] & 0.22 [pb] \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,({p_{T}^{2}}^{2})/4\) & 0.61 [pb] & 0.60 [pb] & 0.43 [pb] \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,({p_{T}^{2}}^{2})/4\) & 0.91 [pb] & 0.90 [pb] & 0.62 [pb] \\ \hline \(Q_{QCD}^{2}\,=\,(m_{t}+m_{H}/2)^{2}\) & 0.52 [pb] & 0.51 [pb] & 0.37 [pb] \\ \hline \hline \end{tabular}
\end{table}
Table 1: **AcerMC**_cross-sections for the \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) production at different choices of the QCD energy scale and \(\alpha_{QCD}\) implementations. The 14 TeV centre-of-mass energy and CTEQ5L parton density functions were used for the simulation with interfaces to PYTHIA 6.2 and HERWIG 6.5. The \(m_{H}~{}=~{}120\) GeV and \(m_{t}~{}=~{}175\) GeV were used for calculating the \(Q_{QCD}^{2}\) in the last row of this table. The default settings of \(\alpha_{QCD}\) as implemented in_**AcerMC**_, PYTHIA 6.2 and_**HERWIG 6.5 were used._fermions the amplitude has no singularities; the total cross-section is well defined. The effect from the \(W\)-boson natural width and the \(W\)-boson propagator are also properly included.

As a benchmark, the process \(q\bar{q}\to W(\to\ell\nu)g^{*}(\to b\bar{b})\) has been simulated for pp collision with 14 TeV centre-of-mass energy. The total cross-section, including branching ratio for \(W\to\ell\nu\) (single flavour) is 36.5 pb (CTEQ5L parton density

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED}\), \(\alpha_{QCD}\) (IL) & \(\alpha_{QED_{\nu}}\alpha_{QCD}\) (IL) & \(\alpha_{QED_{\nu}}\alpha_{QCD}\) (Z1) \\  & native AccMc & as in PYTHIA 6.2 & as in HERWIG 6.5 \\ \hline \(Q^{2}=M_{\ell\nu}^{2}\) & 36.5 [pb] & 36.4 [pb] & 30.6 [pb] \\ \hline \(Q^{2}=s_{\ell\nu}^{2}\) & 44.1 [pb] & 44.0 [pb] & 36.0 [pb] \\ \hline \(Q^{2}=M_{\ell\nu}^{2}+pT_{\ell\nu}^{2}\) & 36.0 [pb] & 36.0 [pb] & 29.8 [pb] \\ \hline \(Q^{2}=(s_{W}^{2}+s_{\ell\nu}^{*})/2+pT_{W}^{2}\) & 37.2 [pb] & 37.1 [pb] & 30.4 [pb] \\ \hline \hline \end{tabular}
\end{table}
Table 2: **AcerMC**_production cross-sections for the \(q\bar{q}\to Wb\bar{b}\) with \(W\to e\nu\) decay (single flavour). The 14 TeV centre-of-mass energy and CTEQ5L parton density functions were used with different definitions of \(\alpha_{QED}\), \(\alpha_{QCD}\) ( as in default PYTHIA 6.2 and HERWIG 6.5) and several choices of the factorisation scale, \(\alpha_{QED}\) and \(\alpha_{QCD}\) implementations._

Figure 1: _Top: the \(Q_{QCD}^{2}\) distributions for \(t\bar{t}b\bar{b}\) events with the invariant mass of the b-jets system \(m_{bb-jets}=120\ \pm\ 30\) GeV. Bottom: the total cross-section of accepted events as a function of the averaged \(Q_{QCD}^{2}\) (for these events)._

functions, \(Q^{2}=M_{W}^{2}\), PYTHIA 6.2 interface)4.

Footnote 4: This can be compared with the matrix element implementation to HERWIG 5.6, used in [34],[36], where originally this cross-section was estimated to 19.8 pb (CTEQ2L parton density functions) but, when implementing CTEQSL parton density functions and setting kinematic parameters to be in approximate accordance with PYTHIA defaults, rises to 36.0 pb, which is consistent with the AccrMC implementation by taking into account the remaining differences in the two calculations (e.g. the former implementation uses an on-shell W boson in the ME calculation).

The dependence on the choice of the factorisation scale is rather modest (c.f. Table **2**) and does not exceed 20% for the choices implemented in **AcerMC** library. The variation of the cross-section due to different \(\alpha_{QED}\) and \(\alpha_{QCD}\) implementations and default settings is again evident; as one can expect the two-loop \(\alpha_{QCD}\) implementation given in HERWIG gives a \(\sim\)20 % lower cross-section when compared to the cases when native **AcerMC** and PYTHIA one-loop \(\alpha_{QCD}\) were used5.

Footnote 5: While performing further comparisons of native **AcerMC** and PYTHIA processes we discovered a misinterpretation of our CKM matrix implementation. This correction effectively changes the cross-section for \(q\bar{q}\to Wb\bar{b}\) and \(q\bar{q}\to Wt\bar{t}\) processes by \(\sim\)10% compared to the draft versions of this paper, which is nevertheless still well within the physics precision of the program. The affected tables in this paper are already updated.

The differential distributions of the \(q\bar{q}\to Wb\bar{b}\) events turn out to be interesting when compared to the corresponding ones of the \(q\bar{q}\to Zb\bar{b}\) and \(gg\to Zb\bar{b}\) events (generated with pure Z-boson exchange). Such comparison is well documented in [11].

### The \(q\bar{q}\to W(\to\ell\nu)g^{*}(\to t\bar{t})\) process

The \(2\to 4\) matrix elements, coded by the MADGRAPH package [8], are not covering the decay of the top-quarks; the latter are considered as massive final states of the process. The top decay is than performed by the supervising generator. As in the case of \(gg,q\bar{q}\to tt\bar{b}\bar{b}\) process spin effects in the top decays are therefore not yet included. This process, although rare, contributes an overwhelming irreducible background to possible measurement of the Higgs-boson self-coupling in the \(HH\to WWWW\) decay mode [13].

Table **3** shows the expected **AcerMC** cross-sections for different choices of the energy scale and coupling (\(\alpha_{QED}\), \(\alpha_{QCD}\)) definitions. One should notice the effect of almost a factor two from different choices of the energy scale.

### The \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)b\bar{b}\) processes

The matrix elements, derived using the MADGRAPH package [8], properly take into account spin correlations in the Z-boson decay and angular correlations between leptons and quarks. Thank to keeping non-zero b-quark masses the amplitude has no singularities; the total cross-section is well defined.

The full \(Z/\gamma^{*}\) exchange proves to be important: For events well below the Z-boson resonance the contribution from \(\gamma^{*}\) becomes dominant; the \(\gamma^{*}\) contribution is also sizeable in the high mass tail and increases proportionally with the effective mass of the di-lepton system.

As a benchmark result, the process has been simulated for pp collisions at 14 TeV centre-of-mass energy. The total cross-sections, including the branching ratio for \(Z/\gamma^{*}\to\ell\ell\) (single flavour) are given in Table **4** for different definitions of \(\alpha_{QED}\), \(\alpha_{QCD}\) couplings.

Several differential benchmark distributions for leptons and b-quarks originating from the hard process has been collected and discussed in [10].

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED},\alpha_{QCD}\) (IL) & \(\alpha_{QED},\alpha_{QCD}\) (IL) & \(\alpha_{QED},\alpha_{QCD}\) (IL) \\  & native AccrMC & as in PYTHIA 6.2 & as in HERWIG 6.5 \\ \hline \(Q_{QCD}^{2}\,=\,M_{W}^{2}\) & 69.3 [fb] & 69.1 [fb] & 57.4 [fb] \\ \hline \(Q_{QCD}^{2}\,=\,s_{t\bar{t}}^{*}\) & 40.9 [fb] & 39.9 [fb] & 34.7 [fb] \\ \hline \(Q_{QCD}^{2}\,=\,M_{W}^{2}+pT_{W}^{2}\) & 59.7 [fb] & 59.5 [fb] & 49.6 [fb] \\ \hline \(Q_{QCD}^{2}\,=\,(s_{W}^{*}+s_{t\bar{t}}^{*})/2+pT_{W}^{2}\) & 43.7[fb] & 42.8 [fb] & 36.9 [fb] \\ \hline \hline \end{tabular}
\end{table}
Table 3: **AcerMC**_production cross-sections for the \(q\bar{q}\to Wt\bar{t}\) with primary \(W\to e\nu\) decay (single flavour). The 14 TeV centre-of-mass energy, CTEQ5L parton density functions with different factorisation scales and different defi nitions of the \(\alpha_{QED}\) and \(\alpha_{QCD}\) were used in the matrix element calculations._

### The \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b})t\bar{t}\) processes

This process, in spite of having a very small cross-section at LHC energies, contributes as irreducible background to the \(t\bar{t}H\) production at low masses. In case the Higgs boson is searched within the \(H\to b\bar{b}\) mode, this contribution becomes less and less important with the Higgs boson mass moving away from the Z-boson mass. In case of the Higgs-boson search in the invisible decaying mode, the \(Z\to\nu\nu\) might be more relevant also for the higher masses, as the mass peak cannot be reconstructed for signal events. The \(Z/\gamma^{*}\to\ell\ell\) decay is of less interest, as the expected observability at LHC is very low (Table 5).

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED},\alpha_{QCD}(1L)\) & \(\alpha_{QED},\alpha_{QCD}(1L)\) & \(\alpha_{QED},\alpha_{QCD}(2L)\) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.5 \\ \hline \hline  & \multicolumn{3}{|c|}{\(gg\to Z/\gamma^{*}bb\)} \\ \hline \hline \(Q^{2}=m_{Z}^{2}\) & 49.5 [pb] & 45.8 [pb] & 38.0 [pb] \\ \hline \(Q^{2}=s_{\tau}^{*}\) & 53.8 [pb] & 53.9 [pb] & 44.0 [pb] \\ \hline \(Q^{2}=s_{Z}^{*}\) & 54.7 [pb] & 54.6 [pb] & 44.4 [pb] \\ \hline \(Q^{2}=(p\bar{t}_{Z}^{*}+s_{t\bar{t}}^{*})/2\) & 49.7 [pb] & 49.7 [pb] & 40.5 [pb] \\ \hline \(Q^{2}=m_{Z}^{2}\) & 6.7 [pb] & 6.7 [pb] & 5.6 [pb] \\ \hline \(Q^{2}=s_{t\bar{b}}^{*}\) & 8.0 [pb] & 8.0 [pb] & 6.4 [pb] \\ \hline \(Q^{2}=s_{\tau}^{*}\) & 7.0 [pb] & 7.0 [pb] & 5.7 [pb] \\ \hline \hline \(Q^{2}=(p\bar{t}_{Z}^{2}+s_{t\bar{t}}^{*})/2\) & 6.9 [pb] & 6.9 [pb] & 5.7 [pb] \\ \hline \hline \end{tabular}
\end{table}
Table 4: **AcerMC**_production cross-sections for the \(gg,q\bar{q}\to Z/\gamma^{*}b\bar{b}\) with \(Z/\gamma^{*}\to ee\) decay (single flavour). The 14 TeV centre-of-mass energy, CTEQSL parton density functions and different defi nitions for the \(\alpha_{QED}\), \(\alpha_{QCD}\) (as in default PYTHIA 6.2 and HERWIG 6.5) were used in the matrix element calculations. The threshold \(m_{\ell\ell}\ \geq\ 10\) GeV was used in the event generation._

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED},\alpha_{QCD}(1L)\) & \(\alpha_{QED},\alpha_{QCD}(1L)\) & \(\alpha_{QED},\alpha_{QCD}(2L)\) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.5 \\ \hline \hline  & \multicolumn{3}{|c|}{\(gg\to Z/\gamma^{*}bb\)} \\ \hline \hline \(Q^{2}=m_{Z}^{2}\) & 49.5 [pb] & 45.8 [pb] & 38.0 [pb] \\ \hline \(Q^{2}=s_{\tau}^{*}\) & 53.8 [pb] & 53.9 [pb] & 44.0 [pb] \\ \hline \(Q^{2}=s_{Z}^{*}\) & 54.7 [pb] & 54.6 [pb] & 44.4 [pb] \\ \hline \(Q^{2}=(p\bar{t}_{Z}^{2}+s_{t\bar{t}}^{*})/2\) & 49.7 [pb] & 49.7 [pb] & 40.5 [pb] \\ \hline \(Q^{2}=m_{Z}^{2}\) & 6.7 [pb] & 6.7 [pb] & 5.6 [pb] \\ \hline \(Q^{2}=s_{t\bar{b}}^{*}\) & 8.0 [pb] & 8.0 [pb] & 6.4 [pb] \\ \hline \(Q^{2}=s_{\tau}^{*}\) & 7.0 [pb] & 7.0 [pb] & 5.7 [pb] \\ \hline \(Q^{2}=(p\bar{t}_{Z}^{2}+s_{t\bar{t}}^{*})/2\) & 6.9 [pb] & 6.9 [pb] & 5.7 [pb] \\ \hline \hline \end{tabular}
\end{table}
Table 5: **AcerMC**_production cross-sections for the \(gg,q\bar{q}\to Zt\bar{t}\) with \(Z\to\nu_{e}\nu_{e}\) decay (3 flavours). The 14 TeV centre-of-mass energy, CTEQ5L parton density functions and different defi nitions for the \(\alpha_{QED}\), \(\alpha_{QCD}\) (as in native_ **AcerMC**_, default PYTHIA 6.2 and HERWIG 6.5) were used._

### The electroweak \(gg,q\bar{q}\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) process

One should be well aware, that the \(gg,q\bar{q}\to Z/\gamma^{*}t\bar{t}\) with \(Z/\gamma^{*}\to b\bar{b}\) does not represent a complete electroweak production of the \(t\bar{t}b\bar{b}\) final state. Consequently, a separate implementation for generation of the complete set of such diagrams (including as well W-boson exchange) was addressed. In fact this final state leads to complicated pattern of the 72 Feynman diagrams (in case of the gg initial state).

The contribution from all non-resonant channels is a dominant one for the inclusive cross-section, see Table 6. An almost factor 10 higher cross-section is calculated with the full electroweak \(gg\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) with respect to calculated with the \(gg\to(Z/\gamma^{*}\to b\bar{b})t\bar{t}\) process only. One should also note that the electroweak \(gg\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) inclusive cross-section is on the level of 10% of the QCD \(gg\to b\bar{b}t\bar{t}\) cross-section, see Table 1, for the same choice of the energy scale. But in the mass range around 120 GeV it is on the level of 50% of the QCD contribution, [9].

The \(gg,q\bar{q}\to(WWb\bar{b}\to)f\bar{f}f\bar{b}b\bar{b}\); \(gg,q\bar{q}\to(t\bar{t}\to)f\bar{f}f\bar{b}b\bar{b}\) processes

The implemented \(2\to 6\) matrix elements for the resonant \(gg,q\bar{q}\to(t\bar{t}\to)f\bar{f}f\bar{b}b\bar{b}\) and complete \(gg,q\bar{q}\to(WWb\bar{b}\to)f\bar{f}f\bar{b}b\bar{b}\) processes give possibility to study background from top-quark production in more details, than with resonant on-shell \(t\bar{t}\) production only ( as implemented in PYTHIA and HERWIG). In particular, for the Higgs boson search in the \(H\to WW\to\ell\nu\ell\nu\) decay channel, the analysis foresees strong suppression against \(t\bar{t}\) background using topological features of events (jet veto, lepton angluar correlations), but does not foresees implicit top-quarks reconstruction. To reliably predict such backgrounds, availability of the complete \(2\to 6\) matrix element in Monte Carlo is mandatory, see eg. discussion in [35]. The total cross-sections are given in Table 7 for different definitions of \(\alpha_{QED}\), \(\alpha_{QCD}\) couplings.

As an example, Fig. 2 illustrates spin correlation effects in the top-pair production and decays, namely asymmetry in the correlations between lepton and antylepton direction in the rest frame of top-quark, for events generated with \(2\to 6\) matrix element. Such correlation is absent if only \(2\to 2\) matrix element is used for events generation, followed by the independent decays of each top-quark.

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED}\), \(\alpha_{QCD}(1L)\) & \(\alpha_{QED}\), \(\alpha_{QCD}(1L)\) & \(\alpha_{QED}\), \(\alpha_{QCD}(2L)\) \\  & naive AccMGC & as in PYTHIA 6.2 & as in HERWIG 6.5 \\ \hline \hline \(Q_{QCD}^{2}\,=\,\hat{s}\) & 0.58 [pb] & 0.56 [pb] & 0.50 [pb] \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\perp}\,\!\!^{*}+m_{i}^{2})/4\) & 1.10 [pb] & 1.05 [pb] & 0.84 [pb] \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\perp})/4\) & 1.50 [pb] & 1.50 [pb] & 1.16 [pb] \\ \hline \(Q_{QCD}^{2}\,=\,(m_{t}+m_{H}/2)^{2}\) & 0.90 [pb] & 0.89 [pb] & 0.71 [pb] \\ \hline \hline \(Q_{QCD}^{2}\,=\,\hat{s}\) & \multirow{2}{*}{0.029 [pb]} & \multirow{2}{*}{0.025 [pb]} & \multirow{2}{*}{0.025 [pb]} \\ \cline{1-1} \cline{5-5} \(Q^{2}\,=\,\sum\,(p_{T}^{\perp}\,\!\!^{*}+m_{i}^{2})/4\) & 0.043 [pb] & 0.042 [pb] & 0.036 [pb] \\ \hline \(Q^{2}\,=\,\sum\,(p_{T}^{\perp})/4\) & 0.049 [pb] & 0.048 [pb] & 0.040 [pb] \\ \hline \(Q^{2}\,=\,(m_{t}+m_{H}/2)^{2}\) & 0.041 [pb] & 0.041 [pb] & 0.035 [pb] \\ \hline \hline \end{tabular}
\end{table}
Table 6: **AcerMC** _production cross-sections for the electroweak \(gg,q\bar{q}\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\). The 14 TeV centre-of-mass energy and CTEQ5L parton density functions were used along with different defi nitions for the \(\alpha_{QED}\), \(\alpha_{QCD}\) (as in native_**AcerMC**_, default_ PYTHIA 6.2 _and_ HERWIG 6.5_). The \(m_{H}\,=\,120\) GeV was used for calculation of the energy scale._

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED}\), \(\alpha_{QCD}(1L)\) & \(\alpha_{QED}\), \(\alpha_{QCD}(1L)\) & \(\alpha_{QED}\), \(\alpha_{QCD}(2L)\) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.5 \\ \hline \hline \multirow{2}{*}{\(Q_{QCD}^{2}\,=\,(2\cdot m_{t}^{2})\)} & \multirow{2}{*}{370. [pb]} & \(gg\to(WWbb\,\to)ffffbb\) \\  & & & \\ \hline \hline \multirow{2}{*}{\(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,+m_{i}^{2})/2\)} & \multirow{2}{*}{425. [pb]} & \multirow{2}{*}{420. [pb]} & \multirow{2}{*}{355. [pb]} \\  & & & \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,+m_{i}^{2})/2\) & \multirow{2}{*}{512. [pb]} & \multirow{2}{*}{510. [pb]} & \multirow{2}{*}{425. [pb]} \\  & & & \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,)/2\) & \multirow{2}{*}{330. [pb]} & \multirow{2}{*}{320. [pb]} & \multirow{2}{*}{280. [pb]} \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,)/2\) & \multirow{2}{*}{63. [pb]} & \multirow{2}{*}{62. [pb]} & \multirow{2}{*}{53. [pb]} \\  & & & \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,+m_{i}^{2})/2\) & \multirow{2}{*}{69. [pb]} & \multirow{2}{*}{68. [pb]} & \multirow{2}{*}{58. [pb]} \\  & & & \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,)/2\) & \multirow{2}{*}{78. [pb]} & \multirow{2}{*}{78. [pb]} & \multirow{2}{*}{65. [pb]} \\  & & & \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,+m_{i}^{2})/2\) & \multirow{2}{*}{78. [pb]} & \multirow{2}{*}{78. [pb]} & \multirow{2}{*}{65. [pb]} \\  & & & \\ \hline \hline \end{tabular}
\end{table}
Table 7: **AcerMC**_production cross-sections for the \(gg,q\bar{q}\to(WWbb\,\,\to)f\bar{f}ffb\bar{b}\) process. The 14 TeV centre-of-mass energy and CTEQ5L parton density functions were used along with different defi ntions for the \(\alpha_{QED}\), \(\alpha_{QCD}\) (as in native_ **AcerMC**_, default_ PYTHIA 6.2 _and_ HERWIG 6.5)._

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED}\), \(\alpha_{QCD}(1L)\) & \(\alpha_{QCD}\), \(\alpha_{QCD}(1L)\) & \(\alpha_{QCD}\), \(\alpha_{QCD}(2L)\) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.5 \\ \hline \hline \multirow{2}{*}{\(Q_{QCD}^{2}\,=\,(2\cdot m_{t}^{2})\)} & \multirow{2}{*}{370. [pb]} & \(gg\to(tt\to)ffb\bar{t}b\) \\  & & & 365. [pb] & 310. [pb] \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,+m_{i}^{2})/2\) & \multirow{2}{*}{425. [pb]} & \multirow{2}{*}{420. [pb]} & \multirow{2}{*}{355. [pb]} \\  & & & \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,+m_{i}^{2})/2\) & \multirow{2}{*}{512. [pb]} & \multirow{2}{*}{510. [pb]} & \multirow{2}{*}{425. [pb]} \\  & & & \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,)/2\) & \multirow{2}{*}{330. [pb]} & \multirow{2}{*}{320. [pb]} & \multirow{2}{*}{280. [pb]} \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,)/2\) & \multirow{2}{*}{63. [pb]} & \multirow{2}{*}{62. [pb]} & \multirow{2}{*}{53. [pb]} \\  & & & \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,+m_{i}^{2})/2\) & \multirow{2}{*}{69. [pb]} & \multirow{2}{*}{68. [pb]} & \multirow{2}{*}{58. [pb]} \\  & & & \\ \hline \(Q_{QCD}^{2}\,=\,\sum\,(p_{T}^{\,\,i}\,)/2\) & \multirow{2}{*}{78. [pb]} & \multirow{2}{*}{78. [pb]} & \multirow{2}{*}{65. [pb]} \\ \hline \(Q_{QCD}^{2}\,=\,\hat{s}\) & \multirow{2}{*}{59. [pb]} & \multirow{2}{*}{58. [pb]} & \multirow{2}{*}{50. [pb]} \\ \hline \hline \end{tabular}
\end{table}
Table 8: **AcerMC**_production cross-sections for the \(gg,q\bar{q}\to(t\bar{t}\to)ffb\bar{t}b\). The 14 TeV centre-of-mass energy and CTEQ5L parton density functions were used along with different defi ntions for the \(\alpha_{QED}\), \(\alpha_{QCD}\) (as in native_ **AcerMC**_, default_ PYTHIA 6.2 _and_ HERWIG 6.5)._

### The \(gg,q\bar{q}\to t\bar{t}t\bar{t}\) process

This process, in spite of having a very small cross-section at LHC energies, contributes as reducible background to the \(HH\to WWWW\) production at low masses, [13]. Availability of the complete Monte Carlo generator is mandatory to give reliable predictions of theirs background and to optimise selection criteria.

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED,\,\alpha_{QCD}(1L)}\) & \(\alpha_{QED,\,\alpha_{QCD}(1L)}\) & \(\alpha_{QED,\,\alpha_{QCD}(2L)}\) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.5 \\ \hline \hline \multirow{2}{*}{\(Q^{2}_{QCD}\,=\,\hat{s}\)} & \multicolumn{3}{c|}{\(gg\to ttt\bar{t}\)} \\ \cline{2-4}  & 26.5 [fb] & 24.4 [fb] & 19.3 [fb] \\ \hline \(Q^{2}_{QCD}\,=\,\sum\,(p_{T}^{+}+m_{1}^{2})/4\) & 75.7 [fb] & 73.8 [fb] & 53.4 [fb] \\ \hline \(Q^{2}_{QCD}\,=\,\sum\,(p_{T}^{+})/4\) & 94.7 [fb] & 93.2 [fb] & 66.2 [fb] \\ \hline \(Q^{2}_{QCD}\,=\,(m_{t}+m_{H}/2)^{2}\) & 89.5 [fb] & 87.8 [fb] & 62.9 [fb] \\ \hline \hline \multirow{2}{*}{\(Q^{2}_{QCD}\,=\,\hat{s}\)} & \multicolumn{3}{c|}{\(qq\to ttt\bar{t}\)} \\ \cline{2-4}  & 26.5 [fb] & 0.5 [fb] & 0.4 [fb] \\ \hline \(Q^{2}_{QCD}\,=\,\sum\,(p_{T}^{+}+m_{2}^{2})/4\) & 1.2 [fb] & 1.2 [fb] & 0.9 [fb] \\ \hline \(Q^{2}_{QCD}\,=\,\sum\,(p_{T}^{+})/4\) & 1.5 [fb] & 1.5 [fb] & 1.0 [fb] \\ \hline \(Q^{2}_{QCD}\,=\,(m_{t}+m_{H}/2)^{2}\) & 1.5 [fb] & 1.4 [fb] & 1.0 [fb] \\ \hline \end{tabular}
\end{table}
Table 9: **AcerMC** _production cross-sections for the \(gg,q\bar{q}\to t\bar{t}t\bar{t}\) process. The 14 TeV centre-of-mass energy and CTEQ5L parton density functions were used along with different defi nitions for the \(\alpha_{QED}\), \(\alpha_{QCD}\) (as in native_ **AcerMC**_, default_ PYTHIA 6.2 _and_ HERWIG 6.5_). The \(m_{H}\,=\,120\) GeV and \(m_{t}\,=\,175\) GeV were used for calculating the \(Q^{2}_{QCD}\)._

### The _control channel_ processes

The set of simple \(2\to 2\) control channel processes was added to **AcerMC** in order to provide a means of consistency and cross-check studies. Although these processes are already implemented in PYTHIA and/or HERWIG (except the \(gg\to WbWb\) one), the availability of the native implementations is supposed to offer a more consistent control of generation parameters when performing e.g. the comparison of parton shower PYTHIA/HERWIG produced additional pair of heavy quarks with the exact leading-order matrix elements implemented in the core group of the **AcerMC**\(2\to 4\) processes.

To the list of control channel processes we have added also \(2\to 4\) process, the \(gg\to WbWb\) process, as a control channel for the \(2\to 6\) process \(gg\to f\bar{f}b\,f\bar{f}b\). The \(2\to 4\) process we consider as very usefull for studying in more detail the resonant and complete \(WbWb\) production at LHC.

The benchmark results, given in Table 10, are obtained for simulated pp collisions at 14 TeV centre-of-mass energy. The total cross-sections are listed for different definitions of \(\alpha_{QED}\), \(\alpha_{QCD}\) couplings and different definitions of the energy scale \(Q^{2}\).

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED},\,\alpha_{QCD}(1L)\) & \(\alpha_{QED},\alpha_{QCD}(1L)\) & \(\alpha_{QED},\alpha_{QCD}(2L)\) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.5 \\ \hline \hline \(Q^{2}\,=\,\hat{s}\) & \(1620\) [pb] & \(1630\) [pb] & \(1630\) [pb] \\ \hline \(Q^{2}\,=\,(\sum\,(p_{T}^{+})+M_{Z}^{2})/2\) & \(1550\) [pb] & \(1560\) [pb] & \(1560\) [pb] \\ \hline \(Q^{2}\,=\,\sum\,(p_{T}^{+})/2\) & \(1260\) [pb] & \(1260\) [pb] & \(1260\) [pb] \\ \hline \(Q^{2}\,=\,M_{Z}^{2}\) & \(1630\) [pb] & \(1630\) [pb] & \(1640\) [pb] \\ \hline \hline \(Q^{2}\,=\,\hat{s}\) & \(\phantom{1630}\) [pb] & \(360\) [pb] & \(310\) [pb] \\ \hline \(Q^{2}\,=\,\sum\,(p_{T}^{+}+m_{1}^{2})/2\) & \(430\) [pb] & \(420\) [pb] & \(355\) [pb] \\ \hline \(Q^{2}\,=\,\sum\,(p_{T}^{+})/2\) & \(595\) [pb] & \(590\) [pb] & \(490\) [pb] \\ \hline \(Q^{2}\,=\,(2m_{t})^{2}\) & \(320\) [pb] & \(315\) [pb] & \(270\) [pb] \\ \hline \hline \(Q^{2}\,=\,\hat{s}\) & \(62\). [pb] & \(61\). [pb] & \(52\). [pb] \\ \hline \(Q^{2}\,=\,\sum\,(p_{T}^{+}+m_{1}^{2})/2\) & \(69\). [pb] & \(68\). [pb] & \(58\). [pb] \\ \hline \(Q^{2}\,=\,\sum\,(p_{T}^{+})/2\) & \(86\). [pb] & \(85\). [pb] & \(71\). [pb] \\ \hline \(Q^{2}\,=\,(2m_{t})^{2}\) & \(57\). [pb] & \(56\). [pb] & \(48\). [pb] \\ \hline \hline \(Q^{2}\,=\,\hat{s}\) & \(17200\) [pb] & \(17230\) [pb] & \(17310\) [pb] \\ \hline \(Q^{2}\,=\,(\sum\,(p_{T}^{+})^{2}+M_{W}^{2})/2\) & \(16480\) [pb] & \(16490\) [pb] & \(16460\) [pb] \\ \hline \(Q^{2}\,=\,\sum\,(p_{T}^{+})/2\) & \(12920\) [pb] & \(12920\) [pb] & \(13020\) [pb] \\ \hline \(Q^{2}\,=\,M_{W}^{2}\) & \(17360\) [pb] & \(17380\) [pb] & \(17300\) [pb] \\ \hline \hline \(Q^{2}\,=\,\hat{s}\) & \(370\) [pb] & \(365\) [pb] & \(310\) [pb] \\ \hline \(Q^{2}\,=\,\sum\,(p_{T}^{+}+m_{1}^{2})/2\) & \(430\) [pb] & \(425\) [pb] & \(355\) [pb] \\ \hline \(Q^{2}\,=\,\sum\,(p_{T}^{+})/2\) & \(525\) [pb] & \(520\) [pb] & \(435\) [pb] \\ \hline \(Q^{2}\,=\,(2m_{t})^{2}\) & \(330\) [pb] & \(320\) [pb] & \(275\) [pb] \\ \hline \hline \end{tabular}
\end{table}
Table 10: **AcerMC**_production cross-sections for the \(q\bar{q}\,\to\,Z/\gamma^{*}\,\to\ell\ell\), \(gg,q\bar{q}\,\to\,t\bar{t}\) and \(q\bar{q}\,\to\,W\,\to\,\ell\nu\) with single flavour \(Z/\gamma^{*}\,\to\ell\ell\) and/or \(W\,\to\,\ell\nu\) decays. The 14 TeV centre-of-mass energy, CTEQ5L parton density functions and different defi

## 5 Monte Carlo algorithm

The conceptual motivation leading to the present implementation of **AcerMC** was to exploit the possibility of dedicated matrix-element-based generation interfaced to a more general event generator, called _supervising_ event generator, which is subsequently used to complete the event generation procedure.

The goal of the dedicated matrix-element-based part is to efficiently generate complicated event topologies using native (multi-channel based) phase space generation procedures. The strategy is based on the understanding that a case-by-case optimisation is in complex cases of phase space topologies preferable to an universal algorithm. Given that phase-space is optimised on a case-by-case basis, an user-defined pre-selection for the generated regions of the phase-space is not implemented. Due to the fact that the \(2\to 4\) and \(2\to 6\) matrix elements, provided by the MADGRAPH/HELAS[8] package, contain full massive treatment of the final state particles, there are no explicit divergences present for implemented processes and **AcerMC** can indeed cover the _full_ (kinematically allowed) phase space of the processes at hand.

The matrix-element-based part uses \(\alpha_{QCD}(Q^{2})\) and \(\alpha_{QED}(Q^{2})\) couplings and mass spectra, as calculated by the supervising event generator, to insure the full internal consistency in treatment of the event itself. Optionally, the native \(\alpha_{QCD}(Q^{2})\) and \(\alpha_{QED}(Q^{2})\) definitions can also be invoked.

The generation chain is built from the following steps:

* The PYTHIA 6.2 or HERWIG 6.5 interfaces to the library of the structure functions PDFLIB 8.04[41] are used to calculate convolution of the partonic density.
* **AcerMC** modules produce unweighted hard-process events with colour flow information and pass them to the supervising generator PYTHIA 6.2 or HERWIG 6.5 as an external event.
* The generated events are then further treated within PYTHIA 6.2 or HERWIG 6.5 event generators, where the fragmentation and hadronisation procedures, as well as the initial and final state radiation are added and final unweighted events are produced.

The **AcerMC** efficiency6 for generating unweighted events, using the implementation of the phase-space generation discussed below, is summarised in Table 11. A certain (very small) fraction of events is further rejected in the showering/fragmentation procedures of the supervising generators.

Footnote 6: Note that efficacy is energy scale dependent and phase-space optimisation is done individually for each choice. So it might vary for the same process but different choices of the energy scale defi nation.

In the following we will briefly describe the key points of the implemented **AcerMC** modules and developed algorithms: matrix element calculations, n-fermion phase-space generation based on the modified Kajantie-Byckling methods[54], the issue of the s-dependent width and mass threshold effects for resonances and finally, the modification of the VEGAS algorithm.

### The Matrix Element Calculation

The squared matrix elements of the processes were obtained by using the MADGRAPH/HELAS[8] package. They take properly into account the masses and helicity contributions of final states particles, incoming quarks are considered as massless. The particle masses, charges and coupling values that are passed to the code derived with the MADGRAPH package are calculated from functions consistent with the ones used in supervising generators (PYTHIA/HERWIG). This allows to preserve the internal consistency of the event generation procedure. In particular, the (constant) coupling values of \(\alpha_{s}\) and \(\alpha_{\mathrm{QED}}\) were replaced with the appropriate running functions that were either taken from the interfaced generators or provided by the **AcerMC** code according to user settings. Slightly modified MADGRAPH/HELAS allowed for obtaining colour flow information of the implemented processes.

The sets of the MADGRAPH/HELAS coded diagrams, for each of the implemented processes, are collected in Appendix

### The Phase Space Generation Procedure

The general objective in simulation of physics processes for the LHC environment is to improve the integration of the differential cross-section using Monte-Carlo sampling methods7. The sampling method used should aim to minimise the variance of the integral as well as maximise the sampling efficiency given a certain number of iterations and the construction of the sampling method itself should aim to be sufficiently general and/or modular to be applicable to a wide range of processes. Writing down a (process) cross-section integral for LHC type (hadron-hadron) collisions:

Footnote 7: For a nice discussion on the topic see e.g. [49, 50]...

\[\sigma=\int\sum_{a,b}f_{a}(x_{1},Q^{2})f_{b}(x_{2},Q^{2})\frac{|\mathcal{M}_{n} |^{2}}{(2\pi)^{3n-4}(2\bar{s})}\,dx_{1}\,dx_{2}\,d\Phi_{n}, \tag{1}\]

where \(\mathrm{f}_{a,b}(\mathrm{x},\mathrm{Q}^{2})\) represent the gluon or (anti)quark parton density functions, \(|\mathcal{M}_{n}|^{2}\) the squared n-particle matrix element divided by the flux factor \([(2\pi)^{3n-4}2\bar{s}]\) and \(d\Phi_{n}\) denotes the n-particle phase space differential. The quantity \(\hat{\mathrm{s}}=\mathrm{x}_{1}\,\mathrm{x}_{2}\,\mathrm{s}\) is the effective centre-of-mass energy, and the sum \(\sum_{a,b}\) runs in case of quark-antiquark incident partons over all possible quark-antiquark combinations (\(\mathrm{a},\mathrm{b}=\mathrm{u},\mathrm{d},\mathrm{s},\mathrm{c},\mathrm{u}, \mathrm{\bar{d}},\mathrm{\bar{s}},\mathrm{\bar{c}}\)). In case of gg initial state the sum has only one term with \(\mathrm{a}=\mathrm{b}=\mathrm{g}\).

\begin{table}
\begin{tabular}{|c|c|c|} \hline Process & Description & Internal AcerMC effi ciency \\ \hline \hline  & \(2\to 4\) & \\ \hline \hline
[1] & \(gg\to t\bar{t}bb\) & 36.3 \% \\ \hline
[2] & \(q\bar{q}\to t\bar{t}bb\) & 29.7 \% \\ \hline
[3] & \(q\bar{q}\to W(\to\nu\ell)bb\) & 35.2 \% \\ \hline
[4] & \(q\bar{q}\to W(\to\nu\ell)tt\) & 30.0 \% \\ \hline
[5] & \(gg\to Z/\gamma^{*}(\to\ell\ell)bb\) & 42.8 \% \\ \hline
[6] & \(q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)bb\) & 35.1 \% \\ \hline
[7] & \(gg\to Z/\gamma^{*}(\to ff,\nu\nu)t\bar{t}\) & 47.0 \% \\ \hline
[8] & \(q\bar{q}\to Z/\gamma^{*}(\to ff,\nu\nu)t\bar{t}\) & 42.6 \% \\ \hline
[9] & \(gg\to(Z/W/\gamma^{*}\to)t\bar{t}bb\) & 9.3 \% \\ \hline
[10] & \(q\bar{q}\to(Z/W/\gamma^{*}\to)t\bar{t}bb\) & 32.4 \% \\ \hline
[15] & \(gg\to tttt\) & 48.0 \% \\ \hline
[16] & \(q\bar{q}\to tttt\) & 50.2 \% \\ \hline \hline  & \(2\to 6\) & \\ \hline \hline
[11] & \(gg\to(t\bar{t}\to)\)\(\bar{It is often convenient to re-write the differential cross-section in the form:

\[\sigma=\int\sum_{a,b}x_{1}f_{a}(x_{1},Q^{2})\ x_{2}f_{b}(x_{2},Q^{2})\frac{| \mathcal{M}_{n}|^{2}}{(2\pi)^{3n-4}(2\hat{s}^{2})}\,dy\,d\hat{s}\,d\Phi_{n}, \tag{2}\]

with the new (rapidity) variable given by \(\mathrm{y}=0.5\log(\mathrm{x}_{1}/\mathrm{x}_{2})\). The n-body phase-space differential \(\mathrm{d}\Phi_{n}\) and its integral \(\Phi_{n}\) depend only on \(\hat{s}\) and particle masses \(m_{i}\) due to Lorentz invariance:

\[\Phi_{n}(\hat{s},m_{1},m_{2},\ldots,m_{n})=\int d\Phi_{n}(\hat{s},m_{1},m_{2}, \ldots,m_{n})=\int\delta^{4}\left((p_{a}+p_{b})-\sum_{i=1}^{n}p_{i}\right)\prod _{i=1}^{n}d^{4}p_{i}\delta(p_{i}^{2}-m_{i}^{2})\Theta(p_{i}^{0}), \tag{3}\]

with \(\mathrm{a}\) and \(\mathrm{b}\) denoting the incident particles and \(\mathrm{i}\) running over all outgoing particles \(i=1,\ldots,n\). What one would like to do is to split the n-body phase parameterised by 3n-4 essential (i.e. non-trivial) independent variables into manageable subsets (modules) to be handled by techniques which reduce the variance of the result and/or the sampling efficiency (e.g. importance sampling[40] or adaptive integration like VEGAS[7] or FOAM[44]). Stating this in formal terms, the above Equation 2 should be transformed into an expression like:

\[\sigma=\left(\prod_{i=1}^{n}\int\limits_{\begin{subarray}{c}s_{1}^{-}\\ s_{i}^{-}\end{subarray}}^{s_{2}^{+}}ds_{i}\right)\left(\prod_{j=1}^{m}\int \limits_{\begin{subarray}{c}t_{j}^{-}\\ t_{j}^{-}\end{subarray}}^{t_{j}^{+}}dt_{j}\right)\left(\prod_{k=1}^{l}\int \limits_{\begin{subarray}{c}\Omega_{k}^{+}\\ \Omega_{k}^{-}\end{subarray}}^{\Omega_{k}^{+}}\Omega_{k}\right)|\mathcal{J}_{n }|\int\sum_{a,b}x_{1}f_{a}(x_{1},Q^{2})\ x_{2}f_{b}(x_{2},Q^{2})\frac{| \mathcal{M}_{n}|^{2}}{(2\pi)^{3n-4}(2\hat{s}^{2})}\,dy\,d\hat{s} \tag{4}\]

where one integrates over Mandelstam type (Lorentz invariant) momenta transfers \(\mathrm{s}_{\mathrm{i}},\mathrm{t}_{\mathrm{j}}\) and space angles \(\Omega_{k}\equiv(\cos\vartheta_{k},\phi_{k})\) within the kinematically allowed limits (3n-4 variables in total) with the term \(|\mathcal{J}_{n}|\) denoting the Jacobian of the transformation. If one would then decide to introduce importance sampling functions in order to reduce the peaking behavior of the integrand [40], the integrals would take the form:

\[\int\limits_{s_{i}^{-}}^{s_{i}^{+}}ds_{i}=\int\limits_{s_{i}^{-}}^{s_{i}^{+}} \frac{g_{i}(s_{i})}{g_{i}(s_{i})}ds_{i}, \tag{5}\]

where the importance sampling function \(\mathrm{g}_{i}\) is probability density function normalised in the integration region \([\mathrm{s}_{\mathrm{i}}^{-},\mathrm{s}_{\mathrm{i}}^{+}]\):

\[\int\limits_{s_{i}^{-}}^{s_{i}^{+}}g_{i}(s_{i})ds_{i}=1, \tag{6}\]

which exhibits a similar peaking behavior as the integrand. Formally, one then inserts the identity:

\[1=\int\limits_{0}^{1}\delta\left(r_{i}-\int\limits_{s_{i}^{-}}^{s_{i}^{-}}g_{i }(s_{i})ds_{i}\right)dr_{i} \tag{7}\]

into the integral and then derives the _unitary_ sampling prescription:

\[\int\limits_{0}^{1}dr_{i}\int\limits_{s_{i}^{-}}^{s_{i}^{+}}\delta\left(r_{i} -\int\limits_{s_{i}^{-}}^{s_{i}^{-}}g_{i}(s_{i})ds_{i}\right)\frac{g_{i}(s_{i} )}{g_{i}(s_{i})}ds_{i}=\int\limits_{0}^{1}dr_{i}\int\limits_{s_{i}^{-}}^{s_{i} ^{+}}\delta\left(s_{i}-G^{-1}(r_{i})\right)\frac{1}{g_{i}(s_{i})}ds_{i}=\int \limits_{0}^{1}\frac{dr_{i}}{g_{i}(G^{-1}(r_{i}))}, \tag{8}\]

which formally means that the \(\mathrm{s}_{\mathrm{i}}\) values are sampled from the interval according to the \(\mathrm{g}_{i}(\mathrm{s}_{\mathrm{i}})\) distribution by using (pseudo-)random variable \(\mathrm{r}_{\mathrm{i}}\) together with the \(\mathrm{g}_{i}(\mathrm{s}_{\mathrm{i}})\) cumulant \(G(s_{i})=\int_{s_{i}^{-}}^{s_{i}}g_{i}(s_{i})ds_{i}\) with its inverse \(G^{-1}\). The unitarity of the algorithm states that each trial ( \(\mathrm{r}_{\mathrm{i}}\) value) produces a result (i.e. a corresponding \(\mathrm{s}_{\mathrm{i}}\) value distributed according to \(\mathrm{g}_{\mathrm{i}}(\mathrm{s}_{\mathrm{i}})\)).

Performing such substitutions on all integration parameters would give as the cross-section expression;

\[\sigma=\prod_{i=1}^{3n-4}\int\limits_{0}^{1}dr_{i}\frac{f(r_{1},r_{2}\ldots)}{g (r_{1},r_{2}\ldots)} \tag{9}\]where the integrand would (hopefully) have as low variation as possible at least for a subset of contributing Feynman diagrams8. To improve the sampling method further, the \(\mathrm{r}_{1}\) (pseudo-)random variables can be sampled from adaptive algorithms of the VEGAStype [7].

Footnote 8: The ’modularisation’ can be performed for several topologies at the same time and multi-channel techniques can be applied.

A representative Feynman diagram describing a \(2\to 6\) process is shown in Figure 3. As one can see, the process can be split in several consecutive branchings, this approximation is often used in matrix element (probability amplitude) calculations. It seems rather obvious that any Feynman diagram can be split in a series of horizontal and vertical branchings that one can denote as s-type and t-type(u-type) using the analogy with the Mandelstam variables. What one would like to do is thus to modularise the phase space in the form of sequential s- and t-type splits.

The s-splitting of phase space is relatively easy to do and has as such been used in many instances of Monte-Carlo generation (e.g. FermiSV [37], Excalibur [38], Tauola [5] etc.); the t-type branchings (often tagged as multi-(peripheral topologies) have in contrast generally been calculated only for specific cases (e.g. for 3 or 4 particles in the final state [37, 38]). As it turns out, the problem of several massive particles in the final state has already appeared more than 30 years ago when several hadrons (e.g. pions) have been produced in (comparatively low energy) nuclear interactions. At that time Kajantie and Byckling [54] have derived the formulae for simulating any sequence of s- and t- type branchings which, with some modifications, can also be applied to the EW and QCD processes involving heavy quarks and/or massive bosons at LHC.

### Modifi ed Kajantie-Byckling Formalism

#### 5.3.1 The s-type Branching Algorithms

The s-splits are the simplest method in the KB formalism. For the sake of completeness one should start with the definition of the two-body phase space integral (c.f. Fig 4):

\[\Phi_{2}(s,m_{1},m_{2})=\int d^{4}p_{1}d^{4}p_{2}\delta(p_{1}^{2}-m_{1}^{2}) \delta(p_{2}^{2}-m_{2}^{2})\delta^{4}(p-p_{1}-p_{2})\Theta(p_{1}^{0})\Theta(p_ {2}^{0}), \tag{10}\]

with the incoming momentum sum \({\rm p}=({\rm p}_{\rm a}+{\rm p}_{\rm b}),{\rm p}^{2}={\rm s}\) and outgoing momenta \({\rm p}_{1,2},{\rm p}_{1,2}^{2}={\rm m}_{1,2}^{2}\). The phase space integral is Lorentz invariant (as one can observe in the above Equation where it is written in a manifestly Lorentz invariant form). Subsequently, due to Lorentz invariance, the integral is necessarily a function of the Lorentz scalars \({\rm s}\), \({\rm m}_{1}\) and \({\rm m}_{2}\) only. The step function product \(\Theta(p_{1}^{0})\Theta(p_{2}^{0})\) is the explicit requirement of the positiveness of the energy terms in \({\rm p}_{1,2}\) while the delta functions represent the on-shell conditions on \({\rm p}_{1,2}\) and the total momentum conservation.

The integral can be transformed into a more compact form by integrating out the spurious variables; one thus first integrates over \({\rm d}^{4}{\rm p}_{2}\) and chooses the centre-of-mass system (CMS) as the integration system of reference with \({\rm p}=(\sqrt{{\rm s}},0,0,0)\) and then evaluates the integrals over \({\rm p}_{1}^{0}\) and \({\rm E}_{1}^{*}\):

\[\Phi_{2}(s,m_{1},m_{2}) = \int d^{4}p_{1}\delta(p_{1}^{2}-m_{1}^{2})\delta((p-p_{1})^{2}-m_ {2}^{2})\Theta(p_{1}^{0})\] \[= \int\frac{d^{3}p_{1}^{*}}{2E_{1}^{*}}\delta(s+m_{1}^{2}-2\sqrt{s} E_{1}^{*}-m_{2}^{2})\] \[= \frac{1}{4\sqrt{s}}\int p_{1}^{*}dE_{1}^{*}d\Omega_{1}^{*}\delta \left(E_{1}^{*}-\frac{s+m_{1}^{2}-m_{2}^{2}}{2\sqrt{s}}\right)\] \[= \frac{p_{1}^{*}(s,m_{1},m_{2})}{4\sqrt{s}}\int d\Omega_{1}^{*},\]

with the stars explicitly denoting the values in the centre-of mass system. The first integration simply sets \({\rm p}_{1}^{0}=\sqrt{({\rm p}_{1}^{*})^{2}+{\rm m}_{1}^{2}}={\rm E}_{1}^{*}\) and the second integral leads to the well known relations for the energy:

\[E_{1}^{*}=\frac{s+m_{1}^{2}-m_{2}^{2}}{2\sqrt{s}},\quad E_{2}^{*}=\sqrt{s}-E_{ 1}^{*}=\frac{s+m_{2}^{2}-m_{1}^{2}}{2\sqrt{s}}, \tag{12}\]

and momenta sizes:

\[p_{1}^{*}=|\vec{p_{1}}|=\frac{\sqrt{\lambda(s,m_{1}^{2},m_{2}^{2})}}{2\sqrt{s} },\quad p_{2}^{*}=p_{1}^{*} \tag{13}\]

of two particle production. The \(\lambda({\rm s},{\rm m}_{1}^{2},{\rm m}_{2}^{2})\) denotes the Lorentz invariant function:

\[\lambda(s,m_{1}^{2},m_{2}^{2})=(s-(m_{1}+m_{2})^{2})(s-(m_{1}-m_{2})^{2}) \tag{14}\]

and thus explicitly contains the phase space cutoff, i.e. the requirement that the available CMS energy \(\sqrt{{\rm s}}\) should be bigger than the mass sum \(\sqrt{{\rm s}}\geq({\rm m}_{1}+{\rm m}_{2})\). Note that the integration was so far done only over the spurious parameters, leaving the polar and azimuthal angle of the \({\rm p}_{1}\) particle as the two independent parameters \({\rm d}\Omega^{*}={\rm d}\cos\theta^{*}{\rm d}\varphi^{*}\). The integral becomes

Figure 4: A diagram of a generic \(2\to 2\) s-channel process.

trivial to sample in case the outgoing particles can be approximated as massless (the 'boost' factor lambda transforms to unity). As already claimed, the latter approximation is however often unjustified when studying processes representative for the LHC environment.

Kajantie and Byckling [54] introduced the _recursion_ and _splitting_ relations for the n-particle phase space \(\Phi_{\rm n}({\rm s})\) given by Eq. 3. The recursion relation can be derived by defining the momentum sum:

\[k_{i}=\sum_{j=1}^{i}p_{j}=(k_{i}^{0},\vec{k_{i}});\ \ M_{i}^{2}=k_{i}^{2}. \tag{15}\]

Subsequently one can interpret \({\rm p}={\rm k}_{\rm n}\) and \(s=M_{n}^{2}\) from Eq. 3. One continues by introducing the identities:

\[1=\int dM_{n-1}^{2}\delta(k_{n-1}^{2}-M_{n-1}^{2})\Theta(k_{n-1}^{0}) \tag{16}\]

and

\[1=\int d^{4}k_{n-1}\delta^{4}(p-k_{n-1}-p_{n}) \tag{17}\]

into the integral of Equation 3; separating out the arguments containing \({\rm k}_{n-1}\) and \(p_{n}\) terms one obtains:

\[\Phi_{n}(M_{n}^{2},m_{1},m_{2},\ldots,m_{n}) = \int dM_{n-1}^{2}\times\] \[\times \left\{\int d^{4}k_{n-1}d^{4}p_{n}\delta(k_{n-1}^{2}-M_{n-1}^{2} )\delta(p_{n}^{2}-m_{n}^{2})\delta^{4}(p-k_{n-1}-p_{n})\Theta(k_{n-1}^{0}) \Theta(p_{n}^{0})\right\}\times\] \[\times \Phi_{n-1}(M_{n-1}^{2},m_{1},m_{2},\ldots,m_{n-1}),\]

where the remaining \(p_{i}\) terms form the (n-1)-particle phase space integral \(\Phi_{n-1}({\rm M}_{{\rm n-1}}^{2},{\rm m}_{1},{\rm m}_{2},\ldots,{\rm m}_{{ \rm n-1}})\) and the terms in curly brackets give a two particle phase space term (c.f. Eq. 12):

\[\Phi_{n}(M_{n}^{2},m_{1},m_{2},\ldots,m_{n}) = \int dM_{n-1}^{2}\Phi_{2}(M_{n}^{2},M_{n-1},m_{n})\Phi_{n-1}(M_{n -1}^{2},m_{1},m_{2},\ldots,m_{n-1})\] \[= \int dM_{n-1}^{2}\frac{p_{n}^{*}}{4M_{n}}\Phi_{n-1}(M_{n-1}^{2}, m_{1},m_{2},\ldots,m_{n-1})\] \[= \int\limits_{(\sum_{i=1}^{n-1}m_{i})^{2}}^{(M_{n}-m_{n})^{2}}dM_ {n-1}^{2}\frac{\sqrt{\lambda(M_{n}^{2},M_{n-1}^{2},m_{n}^{2})}}{8M_{n}^{2}} \int d\Omega_{n}^{*}\Phi_{n-1}(M_{n-1}^{2},m_{1},m_{2},\ldots,m_{n-1}),\]

with the integration limits on \({\rm M}_{{\rm n-1}}^{2}\) following from its definition in Eq. 15. It has to be emphasized that the angles in \(d\Omega_{i}^{*}\) are each time calculated in the centre-of-mass system of \({\rm k}_{\rm i}\) with the invariant mass \({\rm M}_{\rm i}\). The resulting recursion relation is clearly of advantage when describing cascade decays of particles \(k_{n}\to k_{n-1}p_{n}\to k_{n-2},p_{n},p_{n-1}\to\ldots\); it also proves that the n-particle phase space of Eq. 3 can be reduced into a sequence of two-particle phase space terms, as shown in Figure **5**.

Figure 5: The diagrammatic representation of consecutive s-splits.

It can further prove of advantage to loosen up the splitting terms of Eqns. 16,17 so that instead of summing to n-1 one groups an arbitrary set of \(\ell\) particles:

\[1 = \int dM_{l}^{2}\delta(k_{l}^{2}-M_{l}^{2})\Theta(k_{l}^{0}), \tag{20}\] \[1 = \int d^{4}k_{l}\delta^{4}(p-k_{l}-\sum_{j=l+1}^{n}p_{j}), \tag{21}\]

which, when repeating the procedure in recursion relation of Eq. 19, results in an expression:

\[\Phi_{n}(M_{n}^{2},m_{1},m_{2},\ldots,m_{n})=\int\limits_{(\sum_{i=1}^{l}m_{i} )^{2}}^{(M_{l+1}-m_{l+1})^{2}}dM_{l}^{2}\Phi_{n-l+1}(M_{n}^{2},M_{l},m_{l+1}, \ldots,m_{n})\Phi_{l}(M_{l}^{2},m_{1},m_{2},\ldots,m_{l}), \tag{22}\]

and thus effectively splits the phase space into two subsets, equivalent to introducing an intermediate(virtual) particle with momentum \(k_{l}\).

The number of splitting relations and the number of particles in each group as given in Eq. 21 can be chosen in any possible sequence, thus meaning that the grouping sequence is arbitrary and can be adjusted to fit the topology in question.9

Footnote 9: Suggestions of [54] on how to pick random number sequences will not be used since one might like to couple this method with an adaptive algorithm to improve the sampling eff ciencies.

At this point some modifications were introduced to the algorithm in order to adapt it to the specifics of the processes expected at the LHC. Kajantie and Byckling namely assumed that the generation sequence would be 'down' the cascade (i.e. by sampling first a \(\mathrm{M_{n}}\) value, then \(M_{n-1}\) value etc... as is indeed most often done in Monte-Carlo Generators). This might however not be optimal in the LHC environment since the available centre-of-mass energy for the hard process (\(\hat{s}\)) can vary in a wide range of values (c.f. Equation 2) and has to be sampled from a distribution itself. The shape of the distribution function for \(\hat{s}\) is expected to behave as a convolution of the peaking behavior of all participating invariant masses times the parton density functions (c.f. Eq. 2); it subsequently seems to be more natural (and efficient) first to sample the individual propagator peaks and then their subsequent convolutions. Furthermore, by generating the invariant masses 'up' the cascade (i.e. first \(\mathrm{M_{2}}\), \(\mathrm{M_{3}}\)...\(\mathrm{M_{n}}\) and finally \(\hat{s}\)) the kinematic limits on the branchings occur in a more efficient way (bound on the \(\sqrt{\lambda}\) values, see Equations 14 and 24), which is very convenient since in the LHC environment no stringent generation cuts should be made on the inherently non-measurable \(\hat{s}\) as it cannot be accounted for by an analogous cut in a physics analysis.

A necessary modification of the algorithm would thus be to reverse the generation steps by starting with the last pair(s) of particles. In terms of integration (i.e. sampling) limits this translates into changing the limits of Eq. 19:

\[\Phi_{n}(M_{n}^{2},m_{1},m_{2},\ldots,m_{n}) =\] \[= \int\limits_{(\sum_{i=1}^{n-1}m_{i})^{2}}^{(M_{n}-m_{n})^{2}}dM_ {n-1}^{2}\frac{\sqrt{\lambda(M_{n}^{2},M_{n-1}^{2},m_{n}^{2})}}{8M_{n}^{2}} \int d\Omega_{n}^{*}\] \[\times \int\limits_{(\sum_{i=1}^{n-1}m_{i})^{2}}^{(M_{n-1}-m_{n-1})^{2} }dM_{2-1}^{2}\frac{\sqrt{\lambda(M_{n-1}^{2},M_{n-2}^{2},m_{n-1}^{2})}}{8M_{n -1}^{2}}\int d\Omega_{n-1}^{*}\] \[\times \ldots\int\limits_{(\sum_{j=1}^{i-1}m_{j})^{2}}^{(M_{i}-m_{i})^{2 }}dM_{i}^{2}\frac{\sqrt{\lambda(M_{i}^{2},M_{i-1}^{2},m_{i}^{2})}}{8M_{i}^{2} }\int d\Omega_{i}^{*}\ldots\] \[\times \int\limits_{(m_{1}+m_{2})^{2}}^{(M_{3}-m_{3})^{2}}dM_{2}^{2} \frac{\sqrt{\lambda(M_{2}^{2},m_{1}^{2},m_{2}^{2})}}{8M_{2}^{2}}\int d\Omega_ {2}^{*},\]

which accommodates the mass generation sequence: \(k_{n}\to k_{n-1}+p_{n}\rightarrow\ldots\) (i.e. first sample \(M_{n-1}^{2}\), then \(M_{n-2}\) etc...),into

\[\Phi_{n}(M_{n}^{2},m_{1},m_{2},\ldots,m_{n}) = \int\limits_{(M_{n-2}+m_{n-1})^{2}}^{(M_{n}-m_{n})^{2}}dM_{n-1}^{2} \frac{\sqrt{\lambda(M_{n}^{2},M_{n-1}^{2},m_{n}^{2})}}{8M_{n}^{2}}\int d\Omega_{n }^{*}\] \[\times \int\limits_{(M_{n-3}+m_{n-2})^{2}}^{(M_{n}-m_{n}-m_{n-1})^{2}}dM_ {n-2}^{2}\frac{\sqrt{\lambda(M_{n-1}^{2},M_{n-2}^{2},m_{n-1}^{2})}}{8M_{n-1}^{ 2}}\int d\Omega_{n-1}^{*}\] \[\times \ldots\int\limits_{(M_{i-1}+m_{i})^{2}}^{(M_{n}-\sum_{j=i+1}^{m_{ j}}m_{j})^{2}}dM_{i-1}^{2}\frac{\sqrt{\lambda(M_{i}^{2},M_{i-1}^{2},m_{i}^{2})}}{8M_ {i}^{2}}\int d\Omega_{i}^{*}\ldots\] \[\times \int\limits_{(m_{1}+m_{2})^{2}}^{(M_{n}-\sum_{j=3}^{m_{j}}m_{j})^ {2}}dM_{2}^{2}\frac{\sqrt{\lambda(M_{2}^{2},m_{1}^{2},m_{2}^{2})}}{8M_{2}^{2} }\int d\Omega_{2}^{*},\]

where one first samples the mass \(\rm M_{2}\), \(\rm M_{3}\ldots M_{n-1}\) in the appropriate limits.

In some topologies symmetric cases of mass generation can appear (as shown in Figure **3**) where the integration sequence is ambivalent (e.g. in Figure **3** the ambivalence is which top quark invariant mass to generate first...) and after a choice is made (since one of the two cases in the symmetric pair has to take precedence) the procedure itself remains not entirely symmetric. Detailed studies have shown that it proves useful to include all permutations of such ambiguous sequences into the MC algorithm in order to'symmetrise' the solution and thus make it easier to process by further additions (e.g. adaptive algorithms).

#### 5.3.2 The t-type Branching Algorithms

The t-splits are a specialty of the KB formalism due to the advanced calculation of the limits on the (massive) t-variable. The formalism can be introduced by observing that in case of a \(\rm p_{a}+p_{b}\to p_{1}+p_{2}\) scattering the momentum transfer is characterised by the (Mandelstam) variable \(\rm t=(p_{1}-p_{a})^{2}\) (c.f. Fig **6**). It is thus sensible to replace the \(d\Omega_{1}^{*}=d\cos\theta_{1}^{*}d\varphi_{1}^{*}\) integration in the two body phase space integral of Eq. 12 with integration over the \(\rm t\) variable. Writing the definition of \(\rm t\) in the centre-of-mass system one gets:

\[t = q^{2}=(p_{a}-p_{1})^{2}\] \[= m_{a}^{2}+m_{1}^{2}-2E_{a}^{*}E_{1}^{*}+2p_{a}^{*}p_{1}^{*}\cos \theta_{1}^{*}\]

and hence:

\[dt=2p_{a}^{*}p_{1}^{*}d\cos\theta^{*} \tag{26}\]

Using the latter substitution together with Eq. 12,13 and the analogue for \(\rm p_{a}\):

\[p_{a}^{*}=\frac{\sqrt{\lambda(s,m_{a}^{2},m_{b}^{2})}}{2\sqrt{s}} \tag{27}\]

Figure 6: A diagram of a generic \(2\to 2\) t-channel process.

one obtains in place of Eq. 12

\[\Phi_{2}(s,m_{1},m_{2}) = \frac{p_{1}^{*}(s,m_{1},m_{2})}{4\sqrt{s}}\int d\Omega_{1}^{*}\] \[= \frac{1}{8\sqrt{s}p_{a}^{*}}\int dt\,d\varphi^{*}\] \[= \frac{1}{4\sqrt{\lambda(s,m_{a}^{2},m_{b}^{2})}}\int\limits_{t^{- }}^{t^{+}}dt\int\limits_{0}^{2\pi}d\varphi^{*}\]

With the integration variable change the integration domain changes from \([-1,1]\) for \(\rm d\cos\theta^{*}\) to \(\rm[t^{-},t^{+}]\) for the \(\rm dt\) integration. The \(\rm t^{\pm}\) limits are obtained by inserting the \(\cos\theta^{*}\) limits into Equation 26:

\[t^{\pm}=m_{a}^{2}+m_{1}^{2}-2E_{a}^{*}E_{1}^{*}\pm 2p_{a}^{*}p_{1}^{*} \tag{29}\]

or in the Lorentz invariant form (c.f. Eq. 12,13):

\[t^{\pm} = m_{a}^{2}+m_{1}^{2}-\frac{(s+m_{a}^{2}-m_{b}^{2})(s+m_{1}^{2}-m_ {2}^{2})}{2s}\] \[\pm \frac{\sqrt{\lambda(s,m_{a}^{2},m_{b}^{2})\lambda(s,m_{1}^{2},m_ {2}^{2})}}{2s}\]

As a step towards generalisation one has to note that the kinematic limits \(t^{\pm}\) can also be derived from _the basic four-particle kinematic function G(x,y,z,u,v,w)_[55, 54], where the function G can be expressed as a Cayley determinant:

\[G(x,y,z,u,v,w)=-\frac{1}{2}\left|\begin{array}{ccccc}0&1&1&1&1\\ 1&0&v&x&z\\ 1&v&0&u&y\\ 1&x&u&0&w\\ 1&z&y&w&0\end{array}\right| \tag{31}\]

The kinematic limits on \(\rm t\) are in this case given by the condition

\[G(s,t,m_{2}^{2},m_{a}^{2},m_{b}^{2},m_{1}^{2})\leq 0, \tag{32}\]

it should be noted that the above condition gives either \(\rm t^{\pm}\) limits given a fixed value of \(\rm s\) or equivalently \(\rm s^{\pm}\) limits given a fixed \(\rm t\) value.

In search of a recursion relation involving \(\rm t\)-variables one can note that in Eq. 19 the angle in \(\cos\theta_{n}^{*}\) is equivalent to the scattering angle in the centre-of-mass system of the reaction \(\rm p_{a}+p_{b}\to k_{n-1}+p_{n}\) and thus given by:

\[t_{n-1} = (p_{a}-k_{n-1})^{2}\] \[= m_{a}^{2}+M_{n-1}^{2}-2E_{a}^{*}k_{n-1}^{0*}+2p_{a}^{*}k_{n-1}^{ *}\cos\theta_{n-1}^{*}\]

with the \(\rm t_{n-1}^{\pm}\) limits expressed by:

\[G(M_{n}^{2},t_{n-1},m_{n}^{2},m_{a}^{2},m_{b}^{2},M_{n-1}^{2})\leq 0, \tag{34}\]

and the \(p_{a}^{*}\) given by Eq. 27. In order to produce a more general picture it can further be deduced that the next angle in the recursion \(\theta_{n-1}^{*}\), is the scattering angle of the subsequent process \(\rm p_{a}+(p_{b}-p_{n})\to k_{n-2}+p_{n-1}\) in the centre-of-mass system of \(k_{n-1}\); the \((p_{b}-p_{n})=q_{n-1}\) is in this case considered as a virtual incoming particle with momentum \(\rm q_{n-1}\) (c.f. Figure 7).

It immediately follows that for a general process \(p_{a}+q_{i+1}\to k_{i}+p_{i+1}\) with:

\[q_{i}=p_{b}-\sum_{j=i+1}^{n}p_{j}=p_{a}-k_{i};\quad q_{i}^{2}=t_{i};\quad q_{ n}^{2}=t_{n}=m_{b}^{2} \tag{35}\]

a general expression for \(\rm t_{i}\) becomes in the centre-of-mass frame of \(\rm k_{i+1}\):

\[t_{i} = (p_{a}-k_{i})^{2}\] \[= m_{a}^{2}+M_{i}^{2}-2E_{a}^{*(i+1)}k_{i}^{0*(i+1)}+2p_{a}^{*(i+1 )}k_{i}^{*(i+1)}\cos\theta_{i}^{*}\]where momenta in centre-of-mass frame of \(\mathrm{k}_{\mathrm{i}+1}\), denoted with the superscript \(*(\mathrm{i}+1)\), are given by:

\[k_{i}^{*(i+1)} = \frac{\sqrt{\lambda(M_{i+1}^{2},M_{i}^{2},m_{i+1}^{2})}}{2M_{i+1}} \tag{37}\] \[p_{a}^{*(i+1)} = \frac{\sqrt{\lambda(M_{i+1}^{2},m_{\hat{a}}^{2},t_{i+1})}}{2M_{i+1}} \tag{38}\]

and the corresponding energies \(k_{i}^{0*(i+1)}\) and \(\mathrm{E}_{\mathrm{a}}^{*(i+1)}\) can simply be obtained by using the analogues of Equations 12,13 or the usual Einstein mass-energy relations directly. The corresponding \(\mathrm{t}_{\mathrm{i}}^{\pm}\) limits given by:

\[G(M_{i+1}^{2},t_{i},m_{i+1}^{2},m_{a}^{2},t_{i+1},M_{i}^{2})\leq 0, \tag{39}\]

and the recursion relation of Eq. 19 becomes:

\[\Phi_{n}(M_{n}^{2},m_{1},m_{2},\ldots,m_{n}) =\] \[= \int\limits_{(\sum_{i=1}^{n-1}m_{i})^{2}}^{(M_{n}-m_{n})^{2}} \frac{dM_{n-1}^{2}}{4\sqrt{\lambda(M_{n}^{2},m_{\hat{a}}^{2},t_{n})}}\int \limits_{0}^{2\pi}d\varphi_{n}^{*}\int\limits_{t_{n-1}^{*}}^{t_{n-1}^{+}}dt_{n -1}\,\Phi_{n-1}(M_{n-1}^{2},m_{1},m_{2},\ldots,m_{n-1}),\]

As already argued the resulting set of \((\mathrm{s}_{\mathrm{i}}=\mathrm{M}_{\mathrm{i}}^{2},\mathrm{t}_{\mathrm{i}})\) can again be sampled in any direction with respect to the cascade by applying the appropriate change in the integration limits (c.f. Eq. 19 and 24). The recommended approach (i.e. the introduced modification of the algorithm) is again to first sample the invariant masses in the reverse cascade direction (i.e. in the sequence \(\mathrm{M}_{2},\mathrm{M}_{3},\ldots,\mathrm{M}_{\mathrm{n}}\)) and then the \(t_{i}\) values within the limits calculated from Eq. 34 down the cascade (i.e. in the order of \(\mathrm{t}_{n-1},\mathrm{t}_{n-2},\ldots,\mathrm{t}_{1}\)).

To sum up, it has been shown that using the Kajantie-Byckling formalism the phase space for any topology can be split in a set of s-type and t-type \(2\to 2\) branching steps (modules) given by recursive formulae of Equations 24 and 40.

Figure 7: The diagrammatic representation of the method applied in translating the multi-(peri)pheral splits into a \(2\to 2\) t-channel configuration.

### Propagator Sampling

A well known theoretical issue is that one can expect the most prominent peaks in the differential cross-section of a specific process in the phase space regions of high propagator values in the corresponding probability density. Consequently, in the scope of complementing the modular structure of the derived Kajantie-Byckling based phase space sampling, new approaches were also developed concerning the numerical sampling methods of the relevant kinematic quantities.

In order to get small variance in the Monte Carlo procedure one would thus like to include the appropriate peaking dependence of the relevant momentum transfers \(\mathrm{q}^{2}\) in the importance sampling function. It however turns out that since the momenta transfers \(\mathrm{q}\) participate also in the propagator numerators (typically in \(\mathrm{p}_{\mu}\mathrm{q}^{\mu}/\mathrm{q}^{2}\)) and since in process of interest one mostly finds several Feynman diagrams contributing to the final probability density, thus causing interferences, it is very difficult or even impossible to estimate the exact power of momenta transfers in the sampling functions for different propagator peaks. In other words, the probability density dependence on the momentum transfer \(\mathrm{q}^{2}\) can in general be approximated with the dependence \(1/(\mathrm{q}^{2})^{\nu}\) where the best value of \(\nu\) must be determined separately (on a process by process basis).

In view of the latter, general formulae have been developed for sampling the \(x^{-\nu}\) shape [37, 56]: Given a pseudo random number \(r\in[0,1]\) and limits \(x\in[x_{-},x_{+}]\) the value x distributed as \(x^{-\nu}\) is obtained from the formulae in Eq. 8 as:

\[x = \left[x_{-}^{-\nu+1}\cdot(1-r)+x_{-}^{-\nu+1}\cdot r\right]^{- \frac{1}{\nu+1}};\quad\nu\neq 1; \tag{41}\] \[x = \frac{x_{+}^{r}}{x_{-}^{r-1}};\;\;\nu=1. \tag{42}\]

Using the analogous (unitary) approach a recipe for resonant (Breit-Wigner) propagator contributions of the type:

\[BW(s)=\frac{1}{(s-M^{2})^{2}+M^{2}\Gamma^{2}} \tag{43}\]

with \(\mathrm{s}\in[\mathrm{s}_{-},\mathrm{s}_{+}]\) and a pseudo random number \(r\in[0,1]\) is available by the prescription:

\[s = M^{2}+M\Gamma\cdot\mathrm{tan}\left[(u_{+}-u_{-})\cdot r+u_{-}\right] \tag{44}\] \[u^{\pm} = \mathrm{atan}\left(\frac{s^{\pm}-M^{2}}{M\Gamma}\right) \tag{45}\]

Following similar arguments as for the non-resonant propagators one can surmise that the best sampling function for resonant propagators could in general be a Breit-Wigner shape modified by a factor \(\mathrm{s}^{\nu},\nu\in[0,1]\). As shown in the following section it was found that a shape:

\[BW(s)=\frac{s}{(s-M^{2})^{2}+M^{2}\Gamma^{2}} \tag{46}\]

works quite well for a set of processes and a corresponding sampling recipe was developed. In addition, studies in [57] show that a resonant \(\sqrt{\mathrm{s}}\times\) Breit-Wigner shape:

\[BW(s)=\frac{\sqrt{s}}{(s-M^{2})^{2}+M^{2}\Gamma^{2}} \tag{47}\]

should be expected in a range of decay processes. Detailed studies have shown that it is in general better to introduce a \(\mathrm{s}^{\nu},\nu\in[0,1]\) dependence even if it over-compensates the high mass tails of the corresponding differential cross-section distribution since this provides an overall reduction of the maximal weight fluctuations in the Monte-Carlo event generation procedure.

#### 5.4.1 Breit-Wigner Function with s-dependent Width

In some topologies of the processes involving \(W^{\pm}\) or \(Z^{0}\) bosons, a bias of the matrix element towards large values in the high \(s_{W/Z}^{*}\) region is evident, which in turn means that a more accurate description of the tails of \(s_{W/Z}^{*}\) distribution is needed. Consequently, the Breit-Wigner sampling function was replaced by10:

Footnote 10: To our knowledge this implementation is original and done for the fi rst time in **AcerMC**.

\[BW_{s}(s_{W}^{*})=\frac{s_{W}^{*}}{(s_{W}^{*}-M_{W}^{2})^{2}+M_{W}^{2}\Gamma_ {W}^{2}}, \tag{48}\]which is proportional to the (more accurate) Breit-Wigner function with an \(s_{W}^{*}\) dependent width (W in the above formula denotes either a \(W^{\pm}\) or a \(Z^{0}\) boson).

In order to implement a unitary algorithm (an algorithm that produces a result for every trial, i.e. there is no rejection) of value sampling on the above function one first has to calculate the normalisation integral (cumulant) and then its inverse function. Introducing a new variable \(\eta=(s_{W}^{*}-M_{W}^{2})/(M_{W}\ \Gamma_{W})\) the integral of the above function can be expressed as:

\[\int BW_{s}(s_{W}^{*})\ ds_{W}^{*}=\int\biggl{\{}\frac{M_{W}^{2}}{M_{W}\Gamma_{ W}}\cdot\frac{1}{1+\eta^{2}}+\frac{\eta}{1+\eta^{2}}\biggr{\}}\ d\eta, \tag{49}\]

where the upper integral limit is left as a free parameter. The integral thus gives a function:

\[F(\eta)=\biggl{\{}\frac{M_{W}^{2}}{M_{W}\Gamma_{W}}\cdot\mathrm{atan}(\eta) \biggr{\}}+\biggl{\{}\frac{1}{2}\cdot\log(\eta^{2}+1)\biggr{\}},=F_{1}(\eta) +F_{2}(\eta) \tag{50}\]

with \(F(\eta_{\mathrm{max}})-F(\eta_{\mathrm{min}})\) defining the normalisation. One of the undesirable features is that the function \(F(\eta)\) does not have a (simple) analytical inverse, which is a prerequisite for unitary sampling. Taking a closer look at the two above expressions one can quickly spot another undesirable feature, namely that the second term in the Equation 49 is an odd function of \(\eta\), which after the integration gives an even term \(F_{2}(\eta)\) in \(\eta\) in Equation 50. In other words the second term alone is neither a non-negative function nor does it have an unique inverse - one has to deal with a _negative probability_. A reasonably elegant solution to this problem has been developed and implemented here:

* One samples values of \(\eta\) by using only the first term of the above expressions (the _usual_ Breit-Wigner function).
* One then re-samples the obtained value of \(\eta\) using the full expression of Equation 49: If \(\eta\) is less than zero the value is mapped to \(-\eta\) with the probability given by Equation 49.

Why this works can quickly be deduced by looking at the Figure 8: At negative values of \(\eta\) the second term of Equation 49 gives a _negative probability_ in the region \(\eta<0\), i.e. using a simple Breit-Wigner (Cauchy) probability function too many events are generated in this region. Correspondingly, since the second term of Eq. 49 is an odd function, exactly the same fraction (distribution) of events is _missing_ in the region \(\eta>0\). By mapping events with \(\eta<0\) over the \(\eta=0\) axis one thus solves both problems at the same time. Using the above re-sampling procedure the whole approach remains unitary, i.e. no

Figure 8: **Left** _Comparisons of the two functional terms of Eq. 49 to \(\mathrm{BW}_{s}(\eta)\) given by Equation 48. Note that the scaling factor \(A\) is chosen in view of making the contributions more transparent; it is much too small compared to the real case of \(W^{\pm}/Z^{0}\) bosons._

**Right** _Comparison of the (normalised) distributions of differential cross-section for the process \(q\bar{q}\to Wb\bar{b}\) (dashed) and sampling functions (solid line) with respect to the variables obtained by importance sampling, as described in the text._events are rejected when there are no limits set on the value of \(\eta\) or they are symmetric \(|\eta_{\rm min}|=\eta_{\rm max}\). In the contrary case, a small fraction of sampling values is rejected.

After some calculation the whole unitary procedure can thus be listed as follows:

* Calculate the kinematic limits \(\eta_{\rm min}\) and \(\eta_{\rm max}\).
* Calculate the _normalisation_ factors \(\Delta_{1}=F_{1}(\eta_{\rm max})-F_{1}(\eta_{\rm min})\), \(\Delta_{2}=F_{2}(\eta_{\rm max})-F_{2}(\eta_{\rm min})\) and \(\Delta_{s}=\Delta_{1}+\Delta_{2}\); the term \(\Delta_{2}\) can actually be negative and thus does not represent proper normalisation.
* Obtain a (pseudo-)random number \(\rho_{1}\).
* If \(\rho_{1}\leq\Delta_{2}/\Delta_{s}\) then:
* Obtain a (pseudo-)random number \(\rho_{2}\);
* Construct \(\eta\) as: \[X = \Delta_{2}\cdot\rho_{2}+F_{2}(\eta_{\rm min}),\] \[\eta = \sqrt{(}e^{2X}-1),\] which is the inverse of the (normalised) cumulant \((F_{2}(\eta)-F_{2}(\eta_{\rm min}))/\Delta_{2}\).
* Note that the condition \(\rho_{1}\leq\Delta_{2}/\Delta_{s}\) can be fulfilled only if \(\Delta_{2}\geq 0\), which means that \(\eta_{\rm max}\) is positive and greater than \(\eta_{\rm min}\).
* Conversely, if \(\rho_{1}>\Delta_{2}/\Delta_{s}\) then:
* Obtain a (pseudo-)random number \(\rho_{2}\);
* Construct \(\eta\) as: \[X = \Delta_{1}\cdot\rho_{2}+F_{1}(\eta_{\rm min}),\] \[\eta = \tan(\frac{M_{W}\Gamma_{W}}{M_{W}^{2}}\cdot X)\] which is the inverse of the (normalised) cumulant \((F_{1}(\eta)-F_{1}(\eta_{\rm min}))/\Delta_{1}\).
* If the obtained \(\eta\) is less than zero then calculate the normalised probability densities: \[P_{1} = \frac{1}{\Delta_{1}}\cdot\{\frac{M_{W}^{2}}{M_{W}\Gamma_{W}}\cdot \frac{1}{1+\eta^{2}}\}\] \[P_{s} = \frac{1}{\Delta_{s}}\cdot\{\frac{M_{W}^{2}}{M_{W}\Gamma_{W}}\cdot \frac{1}{1+\eta^{2}}+\frac{\eta}{1+\eta^{2}}\}\]
* Obtain a (pseudo-)random number \(\rho_{3}\);
* If \(\rho_{3}>P_{s}/P_{1}\) map \(\eta\to-\eta\).
* If the new \(\eta\) falls outside the kinematic limits \([\eta_{\rm min},\eta_{\rm max}]\) the event is rejected.
* Note also that the last mapping can only occur if the original \(\eta\) was negative, since \(P_{s}<P_{1}\) only in the region \(\eta<0\).
* Calculate the value of \(s_{W}^{*}\) using the inverse of \(\eta\) definition: \[s_{W}^{*}=(M_{W}\ \Gamma_{W})\cdot\eta+M_{W}^{2}\] (51) The weight corresponding to the sampled value \(\eta\) is exactly: \[\Delta_{s}\cdot\frac{(s_{W}^{*}-M_{W}^{2})^{2}+M_{W}^{2}\Gamma_{W}^{2}}{s_{W}^ {*}},\] (52) which is the (normalised) inverse of Equation 48 as requested.

As it turns out in subsequent generator level studies, this generation procedure gives much better agreement with the differential distributions than the _usual_ (width independent) Breit-Wigner; an example obtained for the \(q\bar{q}\to Wb\bar{b}\) process is shown in Figure **8**. The evident consequence is that the unweighting efficiency is substantially improved due to the reduction of the event weights in the high \(s_{W}^{*}\) region.

#### 5.4.2 The Inclusion of Mass Effects in Propagator Sampling

Studies have shown that the \(x^{-\nu}\) approximation works quite well for t-channel type propagators since the phase space suppression factor \(\sqrt{\lambda}\) participates in the denominator, as shown in Eq. 40, and thus contributes only to the \(x^{-\nu}\) slope. Contrariwise, while the \(x^{-\nu}\) approximation still works reasonably well when describing the s-channel type propagators involving particles with high virtuality and/or decay products with low masses, it can be shown that this is not necessarily the case in the LHC environment, where the presence of massive decay products can significantly affect the invariant mass distributions. As it can be seen in Figure **9** the shape of the propagator dependence can be strongly suppressed by the phase space \(\sqrt{\lambda}\) (boost) factor at low values; thus the sampling function approximation for non-resonant propagators could be approximated with something like:

\[f_{\rm NR}(s)=\frac{\sqrt{\lambda(s,m_{a}^{2},m_{b}^{2})}}{s}\cdot\frac{1}{s^{ \nu}}=\frac{\sqrt{\lambda(s,m_{a}^{2},m_{b}^{2})}}{s^{\nu+1}} \tag{53}\]

and similarly

\[f_{\rm R}(s)=\frac{\sqrt{\lambda(s,m_{a}^{2},m_{b}^{2})}}{s}\cdot\frac{\sqrt{ s}}{(s-M^{2})^{2}+M^{2}\Gamma^{2}}=\frac{\sqrt{\lambda(s,m_{a}^{2},m_{b}^{2})}}{ \sqrt{s}\cdot((s-M^{2})^{2}+M^{2}\Gamma^{2})} \tag{54}\]

for resonant propagators.

As it turns out the two functions cannot be sampled by the well known unitary algorithms (i.e. the biggest collection of recipes [56] yielded no results); already the integral values of the functions yield complicated expressions which cannot be easily calculated, let alone inverted analytically. The solution was to code numerical algorithms to calculate the integrals (i.e. cumulants) explicitly.

After the integrals are calculated, their inverse and the subsequent sampling value can again be obtained numerically. Namely, resorting to the original definition of the unitarity sampling recipe in Eq. 8, by replacing the normalised \(\rm g_{i}(x)\) with:

\[g_{i}(x)\rightarrow\frac{f(x)}{\int\limits_{x_{-}}^{x_{+}}f(x)\;dx}, \tag{55}\]

which in turn gives:

\[\int\limits_{x_{-}}^{x}f(x)\;dx=r\cdot\int\limits_{x_{-}}^{x_{+}}f(x)\;dx, \tag{56}\]

where \(\rm f(x)\) is the non-negative function one wants to sample from, \(\rm[x_{-},x_{+}]\) is the range of values of the parameter \(\rm x\) we want to sample and \(\rm r\) a pseudo random number \(r\in[0,1]\). As already stated (c.f. Eq.8), in the case when the integral of the function \(\rm f(x)\) is an analytic function, \(F(x)=\int_{x_{-}}^{x}f(x)\,dx\), and has a known inverse \(\rm F^{-1}(x)\) one can construct explicit unitary prescriptions by:

\[x=F^{-1}\left(r\cdot[F(x_{+})-F(x_{-})]+F(x_{-})\right) \tag{57}\]

as given for two particular cases in Eq. 42,45.

In the cases the integral can not be inverted, the prescription of the Eq. 56 can directly be transformed into a zero-finding request; thus, since both the integral and the first derivative (i.e. the sampling function and its cumulant) are known, the Newton-Rhapson method is chosen as the optimal one for root finding:

\[g(x) = \left\{\int\limits_{x_{-}}^{x}f(x)dx-r\cdot\int\limits_{x_{-}}^{ x_{+}}f(x)dx\right\}=0 \tag{58}\] \[g^{\prime}(x) = \frac{d}{dx}\left\{\int\limits_{x_{-}}^{x}f(x)dx-r\cdot\int \limits_{x_{-}}^{x_{+}}f(x)dx\right\}=f(x) \tag{59}\]

With a sensible choice of starting points the procedure generally takes on the order of ten cycles until finding the root with adequate numerical precision. The overall generation speed is still deemed quite reasonable.

The integration of the phase-space suppressed resonant propagator of Eq. 54 yields a rather non-trivial expression:

\[\int\limits_{(m_{a}+m_{b})^{2}}^{s}f_{\rm R}(s)\:ds = \int\limits_{(m_{a}+m_{b})^{2}}^{s}\frac{\sqrt{\lambda(s,m_{a}^{2}, m_{b}^{2})}\:ds}{\sqrt{s}\cdot\left((s-M^{2})^{2}+M^{2}\Gamma^{2}\right)}\] \[= \int\limits_{a}^{s}\frac{\sqrt{(s-a)(s-b)}\:ds}{\sqrt{s}\cdot((s- M^{2})^{2}+M^{2}\Gamma^{2})}\] \[= \frac{1}{\sqrt{-b}\,\Gamma\,M^{2}}\times\frac{-2\,i\,a\,b\,\Gamma }{(\Gamma^{2}+M^{2})}\] \[\times \left\{\mathbf{F}\left[i\:\mathrm{arcsinh}(\frac{\sqrt{-b}}{ \sqrt{a}}),\frac{a}{b}\right]-\mathbf{F}\left[i\:\mathrm{arcsinh}(\frac{ \sqrt{-b}}{\sqrt{s}}),\frac{a}{b}\right]\right.\] \[+ \left.\left(i\:\Gamma+M\right)\left(a+i\left(\Gamma+i\:M\right)M \right)\left(b+i\left(\Gamma+i\:M\right)M\right)\mathbf{\Pi}\left[\frac{M\left( -i\:\Gamma+M\right)}{b},i\:\mathrm{arcsinh}(\frac{\sqrt{-b}}{\sqrt{a}}), \frac{a}{b}\right]\right.\] \[+ \left.\left(\Gamma+i\:M\right)\left(b+\left(-i\:\Gamma-M\right) M\right)\left(i\,a+\left(\Gamma-i\:M\right)M\right)\mathbf{\Pi}\left[\frac{M\left( i\:\Gamma+M\right)}{b},i\:\mathrm{arcsinh}(\frac{\sqrt{-b}}{\sqrt{a}}), \frac{a}{b}\right]\right.\] \[- \left.\left(i\:\Gamma+M\right)\left(a+i\left(\Gamma+i\:M\right)M \right)\left(b+i\left(\Gamma+i\:M\right)M\right)\mathbf{\Pi}\left[\frac{M\left( -i\:\Gamma+M\right)}{b},i\:\mathrm{arcsinh}(\frac{\sqrt{-b}}{\sqrt{s}}), \frac{a}{b}\right]\right\}\] \[- \left.\left(\Gamma+i\:M\right)\left(b+\left(-i\:\Gamma-M\right)M \right)\left(i\,a+\left(\Gamma-i\:M\right)M\right)\mathbf{\Pi}\left[\frac{M \left(i\:\Gamma+M\right)}{b},i\:\mathrm{arcsinh}(\frac{\sqrt{-b}}{\sqrt{s}}), \frac{a}{b}\right]\right\}\]

where the variables \(a,b\) stand for \(\mathrm{a}=(\mathrm{m_{a}}+\mathrm{m_{b}})^{2}\) and \(\mathrm{b}=(\mathrm{m_{a}}-\mathrm{m_{b}})^{2}\) and the functions \(\mathbf{F}[\varphi,\mathrm{k}]\) and \(\mathbf{\Pi}[\varphi,\mathrm{k},\mathrm{n}]\) are the Legendre's incomplete elliptic integrals of the second and third kind with complex arguments. In order to perform the calculations the latter functions had to be coded from scratch since they were not found in any (publicly available) computer libraries or code repositories. The prescriptions for calculating them were found in [58]; the results were checked against the values given by Mathematica\({}^{\mathrm{TM}}\).

In the special case \(\mathrm{m_{a}}=\mathrm{m_{b}}\) the above expression simplifies into:

\[\int\limits_{(2m_{a})^{2}}^{s}f_{\rm R}(s)\:ds = \int\limits_{(2m_{a})^{2}}^{s}\frac{\sqrt{\lambda(s,m_{a}^{2},m_{ \rm\rm\rm\rm\rm\rm\rm\rm\rm\rm\rm\rm\rm\rm\,})}\:ds}{\sqrt{s}\cdot\left((s-M^ {2})^{2}+M^{2}\Gamma^{2}\right)}\] \[= \int\limits_{a}^{s}\frac{\sqrt{(s-a)}\:ds}{\cdot((s-M^{2})^{2}+M^ {2}\Gamma^{2})}\] \[= \frac{1}{\Gamma\:M\:\sqrt{a}+(-i\:\Gamma-M)\:\:M}\] \[\times \left\{(i\,a+\left(\Gamma-i\:M\right)\:M)\:\arctan(\frac{\sqrt{- a+z}}{\sqrt{a+(-i\:\Gamma-M)\:\:M}})\right.\] \[- \left.i\:\sqrt{a+(-i\:\Gamma-M)\:\:M}\:\sqrt{a+i\:\left(\Gamma+i \:M\right)\:M}\:\arctan(\frac{\sqrt{-a+z}}{\sqrt{a+i\:\left(\Gamma+i\:M\right) \:M}})\right\}\]

The result of integrating the phase-space suppressed non-resonant propagator (Eq. 53) yields a similarly non-trivial result:

\[\int\limits_{(m_{a}+m_{b})^{2}}^{s}f_{\rm NR}(s)\:ds = \int\limits_{(m_{a}+m_{b})^{2}}^{s}\frac{\sqrt{\lambda(s,m_{a}^{2},m_{b}^{2})}\:ds}{s^{\nu+1}}\] \[= \frac{1}{2\:\sqrt{1-\frac{2}{a}}\:\nu}\left\{\frac{-2\:\sqrt{(a-s )}\:(b-s)\:\mathbf{F}_{1}\left[-\nu,-\left(\frac{1}{2}\right),-\left(\frac{1}{ 2}\right),1-\nu,\:\frac{s}{a},\frac{s}{b}\right]}{s^{\nu}\:\sqrt{1-\frac{2}{a} }}\right.\] \[+ \left.\frac{\sqrt{\pi}\:\sqrt{(-a+b)\:(a-s)}\:\mathbf{\Gamma}\left[ 1-\nu\right]\:\mathbf{F}\left[-\nu,-\left(\frac{1}{2}\right),\frac{3}{2}-\nu, \frac{a}{b}\right]}{a^{\nu}\:\sqrt{1-\frac{2}{b}}\:\mathbf{\Gamma}\left[ \frac{3}{2}-\nu\right]}\right\}\]where the function \(\mathrm{F}[\alpha,\beta,\gamma,\mathrm{x}]\) is the Gauss Hypergeometric function and the \(\mathrm{F}_{1}[\alpha,\beta,\beta^{\prime},\gamma,\mathrm{x},\mathrm{y}]\) is the two-parameter (Appell) Hypergeometric function [59]. Both functions can be calculated by using the prescriptions in [59]; it however turns out that the calculation of the \(\mathrm{F}_{1}[\alpha,\beta,\beta^{\prime},\gamma,\mathrm{x},\mathrm{y}]\) to a certain (high) precision is almost two times slower than the explicit numerical calculation of the integral to the same precision. Subsequently the numerical evaluation of the Gauss Hypergeometric function \(\mathrm{F}[\alpha,\beta,\gamma,\mathrm{x}]\) was retained since it participates in the \(\mathrm{m}_{\mathrm{a}}=\mathrm{m}_{\mathrm{b}}\) simplification and the calculation of the integral was done by using a 50-point Gauss-Legendre quadrature with \(\sqrt{s}\) weight function; the weights were calculated by [60]. The implementation of the (Appell) Hypergeometric function calculation was used as a cross-check to confirm the correct implementation and precision of the numerical method.

As already mentioned, the above integral again simplifies for \(\mathrm{m}_{\mathrm{a}}=\mathrm{m}_{\mathrm{b}}\):

\[\int\limits_{(2m_{\mathrm{a}})^{2}}^{s}f_{\mathrm{NR}}(s)\;ds = \int\limits_{(2m_{\mathrm{a}})^{2}}^{s}\frac{\sqrt{\lambda(s,m_{ \mathrm{a}}^{2},m_{\mathrm{b}}^{2})}\;ds}{s^{\nu+1}}\] \[= \int\limits_{a}^{s}\frac{\sqrt{(s-a)}\;ds}{s^{\nu+\frac{1}{2}}}\] \[= \frac{2}{3}\,a^{1-\nu}\;s^{\frac{3}{2}}\,\mathbf{F}\left[\frac{3 }{2},\nu+\frac{1}{2},\frac{5}{2},-s\right],\]

and the Gauss Hypergeometric function \(\mathrm{F}[\alpha,\beta,\gamma,\mathrm{x}]\) is in this case calculated by the methods described in [59] with some improvements analogous to the ones described e.g. in [61].

### Application of the Phase Space Generation Algorithms

The AcerMC 2.0 Monte-Carlo generator uses the multi-channel phase space generation where each channel corresponds to an expected phase space topology as derived from the participating Feynman diagrams. In AcerMC 2.0 this information was obtained from the modified MadGraph[8] program which also supplied the probability amplitudes for the implemented processes. Each channel topology was in turn constructed from the t-type and s-type modules and sampling functions described in this paper together with some additional importance sampling techniques for space angles and rapidity distributions described in detail elsewhere [1, 37, 38]. The unknown slope parameters (denoted \(\nu\) in the text, c.f. Eq. 53) of the invariant mass sampling functions for non-resonant propagators were obtained by short training runs of the program on a process by process basis.

As a further step the multi-channel self-optimisation procedure was implemented in order to minimise the variance of the event weights further [40]. Eventually, additional smoothing of the phase space was obtained by using a modified VEGAS routine to improve the generation efficiency (see next Section).

The procedure of multi-channel importance sampling used in the event generation can briefly be outlined as follows. The analytically integrable function \(g(\vec{\Phi})\) (c.f. Eq. 9, which aims to approximate the peaking behaviour of the differential cross-section dependence on various kinematic quantities is introduced into the differential cross-section equation as a weighted sum of several channels \(g_{i}(\vec{\Phi})\), each adapted to a certain event topology:

\[g(\vec{\Phi})=\sum_{i}\alpha_{i}\cdot g_{i}(\vec{\Phi}). \tag{64}\]

The values of relative weights \(\alpha_{i}\) are determined from multi-channel self-optimisation procedure in order to minimise the variance of the weights \(w(\vec{\Phi})\)[40]. The phase space points are than sampled from the function \(g(\vec{\Phi})\), first by randomly choosing a channel \(i\) according to the relative frequencies \(\alpha_{i}\) and then deriving the required four momenta from the chosen \(g_{i}(\vec{\Phi})\) using unitary11 algorithms [37].

Footnote 11: Unitary in this context meaning that there is no event rejection in the algorithm.

A few representative invariant mass distribution comparisons between the implemented sampling functions and the actual differential distributions are shown in Figure **9**.

Figure 9: A few representative invariant mass distribution comparisons between the (normalised) sampling functions and the normalised differential cross-section as obtained with AcerMC 2.0 Monte–Carlo generator. Left: The invariant mass of the \(\mathrm{b\bar{b}}\) pair in the process \(\mathrm{u\bar{d}}\to\mathrm{W^{+}g^{*}}\to\mathrm{l^{+}\nu_{1}b\bar{b}}\). Center: The invariant mass of the \(\mathrm{Wb\bar{b}}\) system (equivalently the hard centre-of-mass energy \(\sqrt{s}\)) for the same process. Right: The invariant mass of the \(\ell\bar{\ell}\) pair in the process \(gg\to Z^{0}/\gamma^{*}b\bar{b}\to\ell\bar{\ell}b\bar{b}\). All the distributions were obtained using the prescriptions of this paper without the adaptive algorithms also used in the AcerMC 2.0 Monte–Carlo generator. As one can see the approximations used seem to work quite well.

#### 5.5.1 Modifi ed Vegas Algorithm

Using the described multi-channel approach, the total generation (unweighting) efficiency amounts to about \(3-10\%\) depending on the complexity of the chosen process. In order to further improve the efficiency, a set of modified VEGAS[7] routines was used as a (pseudo-)random number generator for sampling the peaking quantities in each kinematic channel. The conversion into a _(pseudo-)random number generator_ consisted of re-writing the calling routines so that instead of passing the analysed function to VEGAS for sampling and integration, VEGAS calls produce only (weighted) random numbers in the region \([0,1]\) and the corresponding sampling weight, while the VEGAS grid training is done using a separate set of calls.

After training all the sampling grids (of dimensions 4-7, depending on the kinematic channel), the generation efficiency increased to the order of \(6-14\%\). The motivation for this approach was that in unitary algorithms only a very finite set of simple sampling functions is available, since the functions have to have simple analytic integrals for which an inverse function also exists. Consequently, the non-trivial kinematic distributions can not be adequately described by simple functions at hand in the whole sampling domain (e.g. the \(\tau\) distribution, c.f. Figure **10**) and some additional smoothing might be welcome. In addition, the random numbers distributions should, due to the applied importance sampling, have a reasonably flat behaviour to be approached by an adaptive algorithm such as VEGAS12.

Footnote 12: At this point also a disadvantage of using the adaptive algorithms of the VEGAS type should be stressed, namely that these are burdened with the need of training them on usually very large samples of events before committing them to event generation.

The further modification of VEGAS, beside adapting it to function as a (pseudo-)random number generator instead of the usual _integrator_, was based on the discussions [43, 44] that in case of event generation, i.e. unweighting of events to the weight one, reducing the maximal value of event weights is in principle of higher importance than achieving the minimal weight variance. Since the VEGAS algorithm was developed with the latter scope, some modification of the algorithm was necessary. As it turned out, the modification was fairly easy to implement: Instead of the usual cumulants:

\[<I>_{\rm cell}\ =\sum_{\rm cell}{\rm wt}_{i}, \tag{65}\]

according to the size of which VEGAS decides to split its cells, the values:

\[<F>_{\rm cell}\ =\Delta_{\rm cell}\cdot{\rm wt}_{\rm cell}^{\rm max}\ -\sum_{\rm cell}{\rm wt}_{i}, \tag{66}\]

were collected and used as the splitting criterion. The above value (called _loss integral_ in [44]) is basically a measure of the deviation between the maximal weight sampled in the given cell \({\rm wt}_{\rm cell}^{\rm max}\) and the average weight in the cell \(<{\rm wt}_{\rm cell}>=(\sum_{\rm cell}{\rm wt}_{i})/\Delta_{\rm cell}\) (the quantity \(\Delta_{\rm cell}\) denoting the cell width, i.e. the integration range). Re-writing the above expression as:

\[<F>_{\rm cell}\ =\left(\Delta_{\rm cell}\cdot{\rm wt}_{\rm cell}^{\rm max} \right)\cdot\left\{1-\frac{<{\rm wt}_{\rm cell}>}{{\rm wt}_{\rm cell}^{\rm max }}\right\} \tag{67}\]

clearly indicates that the value \(<F>_{\rm cell}\) is actually a measure of the generation _inefficiency_ in the cell, since the term in the curly brackets is equivalent to one minus the generation efficiency \(<{\rm wt}_{\rm cell}>/{\rm wt}_{\rm cell}^{\rm max}\). In addition, the inefficiency is weighted with the _crude_/maximal estimation of the function integral over the cell \(\Delta_{\rm cell}\cdot{\rm wt}_{\rm cell}^{\rm max}\) and cells with the highest \(<F>_{\rm cell}\) are split.

This method is of relevance because the VEGAS cells are actually projections of the whole phase space on the (chosen) side axes, i.e. VEGAS cannot isolate a maximal weight in a certain point in phase-space and build a cell around it, which in principle would be an ideal solution. An implementation with this scope in view has been made in FOAM[44], nevertheless we have not found it competitive with respect to the modified VEGAS for the given application.

The thus modified ac-VEGAS algorithm further increased the unweighting efficiency for almost a factor of two.

One of the sampling distributions is shown in Fig. **10** as a gray histogram (marked _channel_) and the actual (_generated_) differential cross-section dependence is drawn in black. In the first figure, the random variable used for sampling values from \(1/\tau^{\mu}\) distribution was drawn from a flat probability in the interval \([0,1]\); in the second plot the ac-VEGAS algorithm was used to give an optimal grid for sampling the random variables needed for parameter generation (the grid is trained for each kinematic channel separately, the sum of all channels is shown in the plot). The improvement is evident; one has to stress that the use of ac-VEGAS algorithm to generate the values of \(\tau\) directly would be much less efficient since VEGAS gives a grid of 50 bins/dimension, which would give a very crude description of the \(\tau\) distribution compared to the one at hand.

Observing the distributions of the event weights before and after the inclusion of the modified ac-VEGAS algorithm (Fig. **11**) it is evident that ac-VEGAS quite efficiently clusters the weights at lower values. Note that the principal effectof original VEGAS is indeed to cluster event weights in a narrow region, nevertheless a tail towards the high-weight region remains. On the other hand, the ac-VEGAS efficiently reduces the tail in the high weight region; only a few of the event weights are found to be consistent with the high-weight region.

Figure 11: _The distribution of event weights using only the Multi-Channel approach (dotted histogram) and after application of VEGAS (dashed histogram) and ac-VEGAS (full histogram) algorithms in the \(gg\to(Z^{0}\to)l\bar{b}\bar{b}\) process._

Figure 10: _Comparison between the sampling distribution for the \(\tau=\hat{s}/s\in[\tau_{\rm min},1]\) variable in \(gg->t\bar{t}b\bar{b}\) process before and after the application of modified ac-VEGAS [7] smoothing procedure (light gray histogram). The generated (normalised) differential cross-section is also drawn (black histogram, labelled Generated)._

weights still retain their large values, thus reducing the generation efficiency. Given the difference in distributions, the observed increase of the generation efficiency seems relatively modest. To better understand this result one should consider that the formula for the MC generation efficiency is given by:

\[\epsilon=\frac{<\mathrm{wt}>}{\mathrm{wt}_{\mathrm{max}}}, \tag{68}\]

where \(<\mathrm{wt}>\) is the average weight of the sample and equals the total event cross-section, while \(\mathrm{wt}_{\mathrm{max}}\) represents the maximum event weight in the applied generation procedure and is determined through a pre-sampling run with a high statistic. Since the average weight \(<\mathrm{wt}>\) equals the total cross-section of the process, it remains (necessarily) unchanged after the application of the VEGAS refining; consequently the change of efficiency results in the reduction of the maximum weight \(\mathrm{wt}_{\mathrm{max}}\) by approximately a factor two, which is from technical point of view quite an achievement.

A further step to profit from the clustering of weights induced by ac-VEGAS is to adopt a re-definition of the MC generation efficiency as proposed by [42, 44]. In this approach, the alternative definition of \(\mathrm{wt}_{\mathrm{max}}\) is: For a given precision level \(\alpha<<1\), the \(\mathrm{wt}_{\mathrm{max}}\) is determined from the total weight distribution in such a way that the contribution of the events exceeding this value to the total weight sum (i.e. cross-section integral) equals \(\alpha\). Such a quantity is referred to as \(\mathrm{wt}_{\mathrm{max}}^{\alpha}\) and the efficiency expression becomes:

\[\epsilon=\frac{<\mathrm{wt}>}{\mathrm{wt}_{\mathrm{max}}^{\alpha}}. \tag{69}\]

The argument presented in [42, 44] seems to be quite reasonable since the _true_ event weight is in any case only estimated from a finite sample of events and the new definition simply takes into account a certain level of accuracy in the maximum weight determination. In addition, certain very weak singularities that might exist in the simulated process and might occasionally result in a very high event weight are automatically taken into account. The use of new \(\mathrm{wt}_{\mathrm{max}}^{\alpha}\) consequently results in a generation efficiency of about \(\epsilon\geq 20\%\) for all the implemented processes, which is a significant improvement in terms of time needed for MC generation.

#### 5.5.2 Colour Flow Information

Before the generated events are passed to PYTHIA/HERWIG to complete the event generation, additional information on the colour flow/connection of the event has to be defined. Below we discuss the implemented method of the colour flow determination on the example of two processes, \(gg\to t\bar{t}b\bar{b}\) and \(q\bar{q}\to t\bar{t}b\bar{b}\).

For the process \(gg\to t\bar{t}b\bar{b}\) six colour flow configurations are possible, as shown in Figure **12**. With 36 Feynman diagrams contributing to the process and at least half of them participating in two or more colour flow configurations, calculations by hand would prove to be very tedious. Consequently, a slightly modified colour matrix summation procedure from MADGRAPH[8] was used to determine the colour flow combinations of the diagrams and the corresponding colour factors. The thus derived squared matrix elements for separate colour flow combinations \(|\mathcal{M}_{\mathrm{flow}}|^{2}\) were used as sampling weights on an event-by-event basis to decide on a colour flow configuration of the event before passing it on to PYTHIA/HERWIG for showering and fragmentation. The procedure was verified to give identical results regarding the colour flow combinations and corresponding colour factors when applied to the processes published in [45]. As one can see this approach neglects the interference terms between the distinct colour-ordered amplitudes and is indeed exact only in the \(N_{C}\rightarrow\infty\) limit13[46, 47]. Since there is no _a priori_ rule of how to split the interference terms between the colour ordered amplitudes this approach is generally deemed to be the best one can do; recent developments in this field [48] however suggest additional improvements to the method that indeed might be incorporated into later versions of **AcerMC**.

Footnote 13: The matrix elements used in the cross-section calculation and event generation are of course complete and do not employ any approximation.

The colour flow configuration in the \(q\bar{q}\to t\bar{t}b\bar{b}\) channel is much simpler since only two colour flow topologies exist (Fig. **13**); the choice between the two has been solved in a manner identical to the one for the \(gg\to t\bar{t}b\bar{b}\) process, as described above.

Some specifications of the implemented matrix-element-based processes: number of Feynman diagrams, channels used in the phase-space generation and colour flow configurations are collected in Table **12**. The _control_ processes ID=91-94 are omitted from the table due to their simplicity.

### The \(\boldsymbol{\alpha_{\mathrm{QED}}}\) and \(\boldsymbol{\alpha_{s}}\) calculations

Native functions of running \(\alpha_{\mathrm{QED}}(Q^{2})\) and \(\alpha_{s}(Q^{2})\) have been implemented inside **AcerMC** with the main objective of providing a means to keep the (total) cross-sections of the processes unchanged when interfacing with the two supervisinggenerators, since the implementations of the two functions in PYTHIA and HERWIG differ to some extent. Especially the \(\alpha_{s}(Q^{2})\) is subject to experimental and theoretical uncertainties, however obtaining a different cross-sections for the same **AcerMC** process due to different interface, could be regarded (at least to some extent) as an inconsistency14. Footnote 14: The values will still differ by a small amount in processes containing W bosons (processes 3,4) due to different values of the CKM matrix in the two supervising generators.

* \(\boldsymbol{\alpha_{\mathrm{QED}}}\) is implemented in **AcerMC** using the formulae given in [62] and is in complete accordance with the implementations in PYTHIA and HERWIG apart from the updated hadronic component published recently by Burkhardt _et. al._[63]. As one can see in Figure **14**, the latter minimally lowers the \(\alpha_{\mathrm{QED}}\) values.
* \(\boldsymbol{\alpha_{s}}\) has one and three loop implementations in **AcerMC** following the calculations of W. J. Marciano [64] and using \(\Lambda_{MS}^{(nf)}\) transformations for flavour threshold matches. The three loop versions gives good agreement with the HERWIG implementation (both functions have been set to the same \(\Lambda_{MS}^{(nf\to S)}\) value) as one can see in Figure **14**. The PYTHIA two loop implementation deviates somewhat from the latter two; the kinks observed in the plot are due to approximate \(\Lambda_{MS}^{(nf)}\) transformations at flavour thresholds, which are exact to one loop only.

Although the **AcerMC** and PYTHIA one loop implementations are identical in form the resulting values differ by a small amount because the default PYTHIA implementation reads the \(\Lambda_{MS}^{(nf\to 4)}\) value from PDFLIB instead of the \(\Lambda_{MS}^{(nf\to 5)}\) one used by **AcerMC** and HERWIG; the difference thus occurs due to \(\Lambda_{MS}^{(nf)}\) propagation at flavour thresholds.

Figure 12: _A diagrammatic representation of the six colour flow confi gurations in the process \(gg\to t\bar{t}b\bar{b}\). Certain colour combinations, leading for example to colourless (intermediate) gluons, are not allowed._

Figure 13: _A diagrammatic representation of the two colour flow confi gurations in the process \(q\bar{q}\to t\bar{t}b\bar{b}\)._

\begin{table}
\begin{tabular}{|c|c|c|c|c|} \hline \hline Process id & Process specifi cation & Feyn. diagrams & Channels & Colour fbws \\ \hline \hline
1 & \(gg\to t\bar{t}bb\) & 36 & 12 & 6 \\ \hline
2 & \(q\bar{q}\to t\bar{t}bb\) & 7 & 5 & 2 \\ \hline
3 & \(q\bar{q}\to W(\to\ell\nu)bb\) & 2 & 2 & 1 \\ \hline
4 & \(q\bar{q}\to W(\to\ell\nu)tt\) & 2 & 2 & 1 \\ \hline
5 & \(gg\to Z/\gamma^{*}(\to\ell\ell)bb\) & 16 & 6 & 2 \\ \hline
6 & \(q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)bb\) & 8 & 6 & 1 \\ \hline
7 & \(gg\to Z/\gamma^{*}(\to ff,\nu\nu)tt\) & 16 & 6 & 2 \\ \hline
8 & \(q\bar{q}\to Z/\gamma^{*}(\to ff,\nu\nu)tt\) & 8 & 6 & 1 \\ \hline
9 & \(gg\to(Z/W/\gamma^{*}\to)ttbb\) & 72 & 20 & 12 \\ \hline
10 & \(q\bar{q}\to(Z/W/\gamma^{*}\to)ttbb\) & 28 & 12 & 5 \\ \hline
11 & \(gg\to(t\bar{t}\to)ffbbffb\) & 3 & 2 & 2 \\ \hline
12 & \(q\bar{q}\to(t\bar{t}\to)ffbffb\) & 1 & 1 & 1 \\ \hline
13 & \(gg\to(WWbb)ffffbb\) & 31 & 13 & 2 \\ \hline
14 & \(q\bar{q}\to(WWbb\to)ffffbb\) & 14 & 7 & 1 \\ \hline
15 & \(gg\to tttt\) & 72 & 10 & 6 \\ \hline
16 & \(q\bar{q}\to ttttt\) & 14 & 4 & 2 \\ \hline \hline \end{tabular}
\end{table}
Table 12: Some details on matrix-element-based process implementation in **AcerMC**_library. In case of \(q\bar{q}\) initial state the number of Feynman diagrams corresponds to one flavour combination. The \(f=e,\mu,\tau,b\)._

Figure 14: Comparison between the \(\alpha_{\rm QED}(Q^{2})\) (**Left**) and \(\alpha_{s}(Q^{2})\) (**Right**) implementations in **AcerMC**, \(\tt PYTHIA\) and \(\tt HERWIG\). For \(\alpha_{s}(Q^{2})\) calculations with different loop orders (\(\L\)) are given where applicable.

## 6 Structure of the package

The **AcerMC** package consists of a library of the matrix-element-based generators for selected processes, interfaces to the PYTHIA 6.2 and HERWIG 6.5 generators, sets of data files and two main programs: demo_bw.f and demo_py.f. Provided makefiles allow to build the executables with either of these generators as the _supervising generator_. demo_bw.exe and demo_py.exe.

### Main event loop and interface to PYTHIA/HERWIG, TAUOLA and PHOTOS

The main event loop is coded in the demo_hw.f or demo_py.f files, where the opening/closing of the input/output files, reading of the data-cards and event-loop execution is performed. Main event loop consists only of calls to the acermc_py or acermc_hw subroutines, with parameter MODE = -1, 0, 1 respectively set for initialisation, generation and finalisation of the event loop. The call to acermc_xx activates respective procedures of the supervising generator, which in turn activates the acoveloper procedure steering the native **AcerMC** generation of the matrix element event. Fig. **15** illustrates this calling sequence in some details.

As one can deduce from the diagram in Fig. **15**, certain functions called by **AcerMC**, as e.g. pseudo-random number generator acr are re-routed through the interfaces to the linked supervising generator, depending on the choice at compilation time (e.g. acr function giving (pseudo-)random numbers is linked to either pyr or hwygen as shown in the plot), providing the internal consistency of the package. The generated event is rewritten to the format required by the supervising generator by means of the acdump_xx routines.

The pythia_ac.f and herwig_ac.f files contain sets of re-routing/interface functions, specialised for the respective supervising generator. The main library of **AcerMC** is well screened from dependencies on the supervising generator, all dependencies are hidden in herwig_ac.f and pythia_ac.f respectively.

The PYTHIA and HERWIG libraries remain essentially untouched15, without introducing any dependencies on the **AcerMC** code. The input cards are common for both interfaces.

Footnote 15: For specific action of exceptions see Section 7.4 and 7.5.

The calling sequence is further enhanced by the optional calls to the external TAUOLA[5] library, which handles the \(\tau\)-lepton decays using the spin information of the hard process, and the PHOTOS[4] library which adds the final state QED radiation to final state leptons and hadrons. The two interfaces are controlled by two additional input cards. The details of the interface are given in Section 7.3.

### Structure of the AcerMC matrix-element and phase-space code

The **AcerMC** core code performs the generation of a matrix-element-based event. Fig. 16 illustrates the calling sequence for generating an unweighted event. The steering subroutine is called acevent_gen which subsequently constructs the weight by calling the Madgraph/HELAS subroutines for the matrix element evaluation To stress again, this subroutine calls only a sequence of the native **AcerMC** subroutines, any call to the supervising generator goes via the respective interface function/subroutine. A more detailed representation of calling sequence is shown in the Figure 16.

Code for the phase space generation is since the version 2.0 greatly simplified compared to the earlier versions. Code for matrix element calculations is grouped together for all processes in subdirectory matel. Code with different utility subroutines, e.g. kinematic transformations used by all subprocesses, is in the subdirectory common. Subdirectory interface contains code with interfaces to supervising generators, finally subdirectory include contains all include files. The overall view on the structure of the **AcerMC** directories is shown in Fig. 17.

The core code builds one library libacermc.a.

Figure 15: The calling sequence of the main event generation routine acevent_xx. The routine is called either through demo_py \(\rightarrow\) acermc_py sequence when interfacing the PYTHIA 6.2 generator or demo_hw \(\rightarrow\) acermc_hw sequence when the HERWIG 6.5 is linked. The structure of the interface subroutines and relations with the corresponding ones from supervising generators and/or external libraries is also evident.

### Data fi les for the phase-space optimisation

The **AcerMC** matrix-element-based generators are very highly optimised, using multi-channel optimisation and additional improvement with the ac-VEGAS grid. The generation modules require three kinds of the input data to perform the generation of unweighted events:

* A file descrbing the construction of the topologies relevant for the chosen process, the implemented sets are stored in the directory acermc_dat/tops.
* A file containing the list of the values of relative channel weights obtained by the multi-channel optimisation, defaults being stored in acermc_dat/m-cwt.
* A file containing the pre-trained ac-VEGAS grid, the pre-trained (default) ones located in acermc_dat/grids.

Figure 16: The event generation sequence controlled by acevent_gen subroutine. Phase space generation is sequenced by calling the acichn_gen2 routine to obtain the incoming gluon and the outgoing four-momenta of the participating particles. The latter routine handles the possible momenta permutations and calls the explicit four-momenta generation (and PS weight calculation) in the sequence prescribed by the event topology. These (channel-specifi c) routines are constructed from common building blocks listed in the next two columns. The acevent_gen routine also initialises MADGRAPH/HELAS package and retrieves the matrix element values. All the generated four-momenta, as well as the event weight are fit nally passed back to the supervising generator via the acevent_dump call.

* A file containing the maximum weight \(\mathrm{wt}_{\mathrm{max}}\), \(\alpha\)-cutoff maximum weight \(\mathrm{wt}_{\mathrm{max}}^{\alpha}\) and the 100 events with the highest weights, the default ones being provided in aocrmc_dat/maxims.

In case of changing the default running conditions, like parton density functions or centre-of-mass energy, the user should repeat the process of preparation of the listed data files containing the inputs for the phase-space generator modules in order to preserve the initial event generation efficiency.

The reading sequence of data files inside **AcerMC** is shown in Figure 18.

Pre-trained data sets are obtained using \(\sqrt{s}=14\) TeV, PYTHIA default \(\alpha_{s}(Q^{2})\) and \(\alpha_{\mathrm{QED}}(Q^{2})\) and CTEQ5L (parametrised) parton density function set and are provided for each implemented process16. For these, the relative channel weights are stored

Figure 17: _The structure of the_ **AcerMC** _directories._

Figure 18: _The reading sequence of the input fi les and the performing subroutines in the_ **AcerMC** _code._

in the INCLUDE files in acerrmc_src/include/chanwt_xx.inc where xx denotes the process id (c.f. Table 11); the default/pre-trained ac-VEGAS grids are listed in the directory acerrmc_dat/grids/vscalA_xxYYY.weg, where A denotes the scale choice of the process xx and YYY denotes the cutoff value of the \(m_{2^{0}/y^{*}}\) for the **AcerMC** processes xx = 05 \(\rightarrow\) 08. The files containing the maximal weights \(\mathrm{wt}_{\mathrm{max}}\) and \(\mathrm{wt}_{\mathrm{max}}^{\alpha}\) as well as the 100 events with the highest weights are stored in the directory acerrmc_dat/grids/vtmaxA_xxYYY.dat, following the same labelling convention. Both the trained ac-VEGAS grids and the weight files were obtained from test runs with at least \(2\cdot 10^{6}\) weighted events being generated.

The number of required input files might at first look seem large, considering that many event generators do not require any input files for operation; the difference is not in so much in the complexity of the phase space generation as in the fact that many event generators require a _warming run_ instead, i.e. before the generation of unweighted events is performed a certain number of weighted events (typically of the order of \(10^{4}\)) is generated in order to obtain the relative multi-channel weights (in case multi-channel phase space generation is used) and/or the optimised VEGAS grid and/or an estimate of the maximal weight. Such an approach can have an advantage when event generation is very fast and the phase space regions with the highest weights are well known (as done for the \(2\to 2\) processes in PYTHIA); on the other hand, when the phase space topology of the process is more complex and the event generation is comparatively slow, generating a relatively small number of e.g. \(10^{4}\) weighted events _every time_ a generator is started can become CPU wasteful and/or inaccurate in terms of maximum weight estimation.

Reasonably accurate estimation of the latter is namely crucial for correct event unweighting; event generators using _warming-up_ method for maximal weight search often find still higher weights during the production run and reset the maximal weight accordingly. In this case however, statistically correct approach would be to reject all events generated beforehand and start the event generation anew, which is almost never implemented due to the CPU consumption and the possibility of hitting a weak singularity (the same argument leads to the definition of the \(\mathrm{wt}_{\mathrm{max}}^{\alpha}\), c.f. Section 5.5.1). With a small pre-sampled set the generator can however badly under-estimate the maximum weight and a large number of events can be accepted with a too-high probability. The only hope of obtaining correct results is in such cases that the weight _plateau_ will be hit sufficiently early in the event generation process. Consequently, such approach can be very dangerous when generating small numbers of events17.

Footnote 17: _Small_ being a somewhat relative quantifi er, since the size of an representative sample should depend on the phase space dimension, i.e. the number of particles in the fi nal state; with e.g. 4 particles in the fi nal state, \(1\bar{6}\) events can still be considered a relatively small statistics.

In contrast to the _warming-up_ approach for the **AcerMC** we decided that using separate _training_ runs with large numbers of weighted events to obtain the optimised grids and maximum weight estimates are preferable. In case a user wants to produce data sets for non-defaults setting, this can easily be done by configuring the switches in the acerrmc.card (see Section 6.2).

## 7 How to use the package

There are two main steering input files: **run.card** and **acermc.card** which share a common format for both executables. The **run.card** (see App. B.1) provides switches for modifying: generated process, number of events, parton density functions, predefined option for hadronisation/fragmentation in the _supervising generator_, random number, etc.. The **acermc.card** (see App. B.2) provides switches for modifying more specialised settings for the **AcerMC** library itself. Once the user decides on a setup for the generated process, only **run.card** is very likely to be modified for the job submission. In case the user decides to use the external TAUOLA or PHOTOS libraries by selecting the appropriate switches in the **run.card** there are two additional files **tauola.card**(see App. B.3) and **photos.card** (see App. B.4) which steer the performance of these two libraries. All input files are read by AcerMC executables through the CERNLIB FFREAD routines, some commands given in the input files (e.g. LIST entry, see Appendix B) are internal FFREAD commands which should be disregarded by the user.

The same executables can also be used for running standard PYTHIA 6.2 and HERWIG 6.5 processes. The example how to require such process is provided as well, in demo_bw.f and demo_py.f respectively. If the user requires that the **AcerMC** library is not used, the \(ttH\) production will be generated with demo_py.exe and HERWIG 6.5 implementation of the \(Zbb\) production will be generated with demo_bw.exe. In this case only the run.card file will be read, so in case the user requires different processes and/or settings of the supervising generators the user has to implement her/his steering there or create another xxx.card file, together with the corresponding code added to the demo_xx.f.

### Steering switches of the overall run

The overall run is controlled by the switches read from the run.card file (see also App. B.1). Some of these general switches are also passed to the **AcerMC** library.

* CMS : Sets the centre-of-mass energy in GeV.
* use process from PYTHIA/HERWIG ACER=1
- use internal **AcerMC** process ACER=2
- use internal **AcerMC** process & dump events into a record ACER=3
- use internal **AcerMC** process & read events from a record
* PROCESS : Sets process id
* only hard process HAD=1
- only ISR (works for PYTHIA interface only) HAD=2
- only ISR and FSR HAD=3
- full treatment HAD=4
- only FSR HAD=5
- only FSR and hadronisation
* PDFLIB804 NGROUP Sets the value of the PDFLIB804 NGROUP parton density function choice.
* PDFLIB804 NSET Sets the value of the PDFLIB804 NSET parton density function choice.
* use internal PYTHIA/HERWIG mechanisms for \(\tau\)-lepton decays TAUOLA=1
- use the TAUOLA library for \(\tau\)-lepton decays.
* use internal PYTHIA/HERWIG mechanisms for FSR photon radiation PHOTOS=1
- use the PHOTOS mechanisms for FSR photon radiation.
* NEVENT : Required number of generated events

### Steering switches of the AcerMC processes

The **AcerMC** processes are controlled by values set in a simple arrays specified in acerrmc_src/include/AcerMC.inc:

C CROSS-TALK PARAMETERS

DOUBLE PRECISION ACSET

INTEGER IACPROC

COMMON/ACPAR1/ACSET(200),IACPROC(200)

C PARTICLE PROPERTIES

DOUBLE PRECISION ACCHG,ACMAS,ACCKM

COMMON/ACPAR2/ACCHG(50,4),ACMAS(50,4),ACCKM(4,4)

C ROUTINE I/O

INTEGER LACSTD,LACIO

COMMON/ACPAR3/LACSTD,LACIO

The IACPROC array activates the IPROC=PROCESS (read from run.card file) by setting IACPROC(IPROC)=1.

The list of currently implemented processes in **AcerMC** can be found in Table **11**. When running in the generation mode with ACER=0 full list of processes implemented in either PYTHIA 6.2 or HERWIG 6.5 can be activated, however the mechanism for passing information about process id to either of these generators has to be coded by user individually in demo_xx.f.

The main control switches reside in the array ACSET. The COMMON block ACPAR2 contains the particle charges, masses and decay widths as well as the CKM matrix using the PYTHIA convention. The values are filled by the interface routines to be equal to the PYTHIA/HERWIG internal values in order to preserve consistency within the generation stream. In case the user wants to change some of the particle properties this should be done through the native PYTHIA/HERWIG switches; **AcerMC** will copy them and use the new values.

The COMMON block ACPAR3 contains the two logical I/O unit numbers used by **AcerMC**. The LACSTD value determines the output unit of the **AcerMC** messages and the LACIO unit is used for reading/writing the **AcerMC** data files.

The main control switches which reside in the array ACSET (see also App. B.2):

* ACSET(1) : Sets the centre-of-mass energy in GeV.
* ACSET(2) : Scale of the hard process Choose the \(Q^{2}\) scale for the active **AcerMC** process. The implemented values differ for various processes, the currently implemented settings are specified in Section 7.7.
* ACSET(3) : Fermion code The flavour of the fi nal state fermions produced in \(W^{\pm}\), \(Z^{0}/\gamma^{*}\to ff\) decays of **AcerMC** processes \(3\to 8\). The PYTHIA/PDG naming convention is used: ACSET(3)=1 \(W\to q\bar{q}\); \(Z^{0}/\gamma^{*}\to q\bar{q}\) ACSET(3)=4 \(W\to e\nu_{e}\), \(\mu_{\mu^{+}}\); \(Z^{0}/\gamma^{*}\to e^{+}e^{-}\), \(\mu^{+}\mu^{-}\) ACSET(3)=1 \(W\to e\nu_{e}\); \(Z^{0}/\gamma^{*}\to e^{+}e^{-}\) ACSET(3)=12 \(Z\to e\nu_{e}\), \(\mu_{e}\nu_{\mu^{+}}\), \(\mu_{\nu^{+}}\nu_{\mu^{+}}\), \(\mu_{\nu^{+}}\nu_{\mu^{+}}\) ACSET(3)=13 \(W\to\mu\nu_{\mu^{+}}\); \(Z^{0}/\gamma^{*}\to\mu^{+}\mu^{-}\) ACSET(3)=15 \(W\to\tau\nu_{\tau^{+}}\); \(Z^{0}/\gamma^{*}\to\tau^{+}\tau^{-}\) ACSET(3)=5 \(Z^{0}/\gamma^{*}\to b\bar{b}\) At present the ACSET(3)=5 is implemented only for processes \(7\to 8\).
* only \(Z^{0}\) propagator. ACSET(4)=1
- full \(Z^{0}/\gamma^{*}\) propagator.
* ACSET(5) : \(m_{Z^{0}/\gamma^{*}}\) mass cut Cutoff value on the invariant mass \(m_{Z^{0}/\gamma^{*}}\) in GeV when ACSET(4)=1. Note that the provided data fi les exist only for values of ACSET(5)=2.5,10,15,30,60, 120,270,300 and 500 GeV which should satisfy most user requirements for the analyses foreseen at LHC. In case a different value is set the user has also to provide the user data fi les for the run.
* ACSET(6) : Sets the value of the PDFLIB804 NGROUP parton density function choice.
* ACSET(7) : Sets the value of the PDFLIB804 NGET parton density function choice.

- Use the \(\alpha_{s}(Q^{2})\) as provided by the supervising generator ACSET(8)=1
- Use the \(\alpha_{s}(Q^{2})\) (one loop) provided by the **AcerMC**; this option gives \(\alpha_{s}(Q^{2})\) values equal to the default PYTHIA implementation. ACSET(8)=2
- Use the \(\alpha_{s}(Q^{2})\) (three loop) provided by the **AcerMC**.
* The \(\alpha_{MS}^{(n-f)S}\) value is taken from PDFLIB804 for the selected parton density function set. ACSET(9)>0
- The provided value is taken.
* Use the \(\alpha_{\rm QED}(Q^{2})\) as provided by the supervising generator. ACSET(10)=1
- Use the \(\alpha_{\rm QED}(Q^{2})\) implemented in the **AcerMC**.
* The \(\alpha_{\rm QED}(0)\) value is set to \(\alpha_{\rm QED}(0)=0.0072993\). ACSET(11)>0
- The provided value is taken.
* both W bosons decay according to PYTHIA/HERWIG switches. ACSET(12)=1 \(W_{1}\to e\nu_{e}\) and \(W_{2}\to q\bar{q}\). ACSET(12)=2 \(W_{1}\to\mu\nu_{\mu}\) and \(W_{2}\to q\bar{q}\). ACSET(12)=3 \(W_{1}\to\tau\nu_{\mu}\) and \(W_{2}\to q\bar{q}\). ACSET(12)=4 \(W_{1}\to\tau\nu_{e}\), \(\mu\nu_{\mu}\) and \(W_{2}\to q\bar{q}\). ACSET(12)=5 \(W_{1}\to e\nu_{e}\), \(\mu\nu_{\mu}\) and \(W_{2}\to q\bar{q}\). The setting ACSET(12)=5 works for PROCESS=4 only and implies leptonic decay of the \(W\)-boson with the same charge as the one of the primary \(W\) boson produced in the hard process. Following confiurations are possible: \(q\bar{q}\to W^{+}t\bar{t}\to(W^{+}\to\to)L^{+}\nu_{L}\)\((W_{1}^{+}\to)l^{+}\nu_{L}\)\(b\)\((W_{2}^{-}\to)q^{\prime}\)\(\bar{q}\)\(\bar{b}\), or: \(q\bar{q}\to W^{-}t\bar{t}\to(W^{-}\to)L^{-}\bar{\nu}_{L}\)\((W_{1}^{+}\to)q^{\prime}\bar{q}\)\(b\)\((W_{2}^{-}\to)l^{-}\bar{\nu}_{L}\), where \(L^{\pm}\) is the lepton from the primary \(W\) decay (controlled by ACSET(3) switch) and \(l^{\pm}\) is either an \(e^{\pm}\) or \(\mu^{\pm}\) as for ACSET(12)=4. Since the charge of the semi-leptonic decaying \(W\) is correlated with the charge of the primary \(W\) boson, the \(\sigma\times BR\) is consequently a factor two smaller than the one for ACSET(12)=4.
* both W bosons decay according to PYTHIA/HERWIG switches. ACSET(13)=1 \(W_{1}\to e\nu_{e}\) and \(W_{2}\to q\bar{q}\). ACSET(13)=2 \(W_{1}\to\mu\nu_{\mu}\) and \(W_{2}\to q\bar{q}\). ACSET(13)=3 \(W_{1}\to\tau\nu_{e}\) and \(W_{2}\to q\bar{q}\). ACSET(13)=4 \(W_{1}\to e\nu_{\mu}\), \(\mu\nu_{\mu}\) and \(W_{2}\to q\bar{q}\). ACSET(13)=1
- both \(W=e\nu_{e}\). ACSET(13)=1
- both \(W=\nu_{\mu}\). ACSET(13)=15
- both \(W\to\tau\nu_{\tau}\). ACSET(13)=20 -both \(W\to q\bar{q}\).
* production run, generate unweighted events. ACSET(50)=1
- perform multi-channel optimisation and output the user fi le with channel weights. ACSET(50)=2
- perform ac-VEGAS grid training and output the user fi le with trained ac-VEGAS grid. ACSET(50)=3
- perform ac-VEGAS grid training as in ACSET(50)=2 but do this by updating a provided grid.
* ACSET(51): Required number of generated events NEVENT In case the switch ACSET(50) is set to the non-zero value (i.e. in one of the training modes) the ACSET(51) entry is used and def ines the number of (weighted) events that will be generated; this information is necessary for the learning algorithms to decide on steps in the learning sequence.

- no, use native (default) **AcerMC** data fi les. ACSET(52)=1
- use the user's multi-channel optimisation and VEGAS grid fi les. ACSET(52)=2
- use the default multi-channel optimisation and user's VEGAS grid fi les. ACSET(52)=3
- use the default multi-channel optimisation and VEGAS grid fi les; read the user maximal weight fi le.
* no, use the provided fi les containing maximal weights. ACSET(53)=1
- use the provided fi les for max. weights and re-calculate the max. weights using the stored 100 events with the highest weight. ACSET(53)=2
- perform the search and give the new wtmax_xx_new.dat fi le; the switch is equivalent to generation of weighted events.
* use the \(\mathrm{wt}^{\alpha}_{\mathrm{max}}\) weight. ACSET(54)=1
- use the \(\mathrm{wt}_{\mathrm{max}}\) weight.
* use the naive QCD corrections ACSET(56)=0
- don't use naive QCD corrections

### Steering Tauola and Photos

It is highly recommended that in case TAUOLA is used for \(\tau\) decays that PHOTOS is also activated and the setting PMODE is set at least to 2 in order to keep the \(\tau\)-leptons radiating (see below), since it gives the necessary contribution to the expected \(\tau\) branching ratios.

It should also be stressed that the actions of the interfaced TAUOLA and PHOTOS are meaningful only when the full hadronisation procedure of the event is selected (by setting HAD 3 in run.card).

The switches and settings specific to the TAUOLA library are set in the tauola.card:

* switch polarisation off POLAR=1
- switch polarisation on
* switch corrections off RADCOR=1
- switch corrections on
* default value by TAUOLA authors
* all decay modes allowed DMODE=1
- (LEPTON-LEPTON): only leptonic decay modes DMODE=2
- (HADRON-HADRON): only hadronic decay mode DMODE=3
- (LEPTON-HADRON): one tau decays into leptons and the other one into hadrons DMODE=4
- (\(\tau\rightarrow\tau\nu\)) : thus are restricted to decay to a pion and neutrino
* JAK1/JAK2 : Decay modes of taus according to charge, the list is taken from the TAUOLA output. The listing gives only \(\tau^{-}\) modes, the \(\tau^{+}\) are charge conjugate, neutrinos are omitted. JAK1 : decay mode of \(\tau^{+}\), JAK2 : decay mode of \(\tau^{-}\): JAK1/2 = \(\tau^{-}\rightarrow\tau\rightarrow\epsilon\) JAK1/2 = 2 \(\tau^{-}\rightarrow\mu-\) JAK1/2 = 3 \(\tau^{-}\rightarrow\pi^{-}\) JAK1/2 = 4 \(\tau^{-}\rightarrow\pi^{-}\),\({}^{0}\) JAK1/2 = 5 \(\tau^{-}\rightarrow\Lambda_{1}^{-}\) (two subch) JAK1/2 = 6 \(\tau^{-}\rightarrow\Lambda^{-}\) JAK1/2 = 7 \(\tau^{-}\rightarrow\Lambda^{-}\) (two subch) JAK1/2 = 8 \(\tau^{-}\rightarrow\pi^{-}\),\({}^{0}\),\({}^{+}\) JAK1/2 = 9 \(\tau^{-}\rightarrow\pi^{-}\),\({}^{+}\) JAK1/2 = 10 \(\tau^{-}\rightarrow\pi^{-}\),\({}^{+}\),\({}^{2}\pi^{0}\)JAK1/2 = 11 - \(\tau^{-}\to 3\tau^{-},2\pi^{+}\) JAK1/2 = 12 - \(\tau^{-}\to 3\tau^{-},2\pi^{+},\pi^{0}\) JAK1/2 = 13 - \(\tau^{-}\to 2\pi^{-},\pi^{+},3\pi^{0}\) JAK1/2 = 14 - \(\tau^{-}\to\tau^{-},\pi^{-},K^{+}\) JAK1/2 = 15 - \(\tau^{-}\to K^{0},\pi^{-},K^{0}\) JAK1/2 = 16 - \(\tau^{-}\to K^{-},K^{0},\pi^{0}\) JAK1/2 = 17 - \(\pi^{0}\pi^{-}K^{-}\) JAK1/2 = 18 - \(\tau^{-}\to K^{-}\pi^{-}\) JAK1/2 = 19 - \(\tau^{-}\to\pi^{-}\bar{K}^{0}\pi^{0}\) JAK1/2 = 20 - \(\tau^{-}\to\eta\pi^{-}\bar{\pi}^{0}\) JAK1/2 = 21 - \(\tau^{-}\to\tau^{-}\pi^{-}\) JAK1/2 = 22 - \(\tau^{-}\to K^{-}K^{0}\)

The switches and settings specific to the PHOTOS routines are set in the photos.card:

* enable radiation of photons for leptons and hadrons PMODE=2
- enable radiation of photons for \(\tau\)-leptons only PMODE=3
- enable radiation of photons for leptons only
* default value by PHOTOS authors
* leave default (0.00729735039)
* interference is switched on INTERF = 0
- interference is switched off
* double bremsstrahlung is switched on ISEC=0
- double bremsstrahlung is switched off
* the procedure is is switched on IFTOP=0
- the procedure is is switched off

Detailed information about TAUOLA and PHOTOS implementations in the **AcerMC** setup can be found in Sections 7.10 and 7.11.

### How to prepare data-fi les for the non-default setup

The following actions are possible, to recover better efficiency of the generator modules with the non-default settings:

* _The user wants to generate events using different parton density function sets and/or different coupling values (e.g._ **AcerMC**_third order \(\alpha_{s}(Q^{2})\) instead of the first order one)_:

It should suffice to set the the switch ACSET(53)=1, which signals **AcerMC** to re-calculate the \(\mathrm{wt}_{\mathrm{max}}\) and \(\mathrm{wt}^{\alpha}_{\mathrm{max}}\) using the 100 events stored in the file acermc_dat/grids/turnax_xxYYYY.dat. The coupling and parton density functions values should not change significantly the process topology but affect foremost the overall scale of the event weights; thus, the stored hundred events should still remain the ones with the highest weights and the re-calculated approximate estimates of the highest weight should be accurate enough. In case the user is not confident in the obtained result, the new maximal weight estimation can be initiated by setting the switch ACSET(53)=2, which will result in generation of weighted events. The number of generated events is determined by the usual NEVENT in run.card. At the end of the run **AcerMC** will produce a file called wtmax_xx_new.dat, with xx specifying the process number. The user should then start the generation of unweighted events with the setting ACSET(52)=3 and linking(renaming) the new file to wtmax_xx_usr.dat, with xx denoting the process number (e.g. wtmax_01_usr.dat).
* _The user wants to generate events using different values of particle/boson masses or other significant changes of the parameters apart from the centre-of-mass energy and/or \(m_{Z^{0}/\gamma^{*}}\) cutoff value for processes 5-8_: In this case the user should re-train the VEGAS grid since the process topology is assumed to undergo minor changes. This is done by setting the switch ACSET(50)=2 or ACSET(50)=3; in the first case **AcerMC** starts with an untrained grid and in the second one it starts modifying the existing grid provided for the process at the selected hard process scale. In general the second option should be preferable since the topology should still be close to the pre-trained one. **AcerMC** again produces weighted events and at the end of the run outputs a file grid_xx_new.veg. The number of generated events is determined by the usual NEVENT in run.card. As in the previous case, the user should re-name the file to grid_xx_usr.veg, re-set the switch to ACSET(50)=0 and repeat the maximal weight search procedure described above, by setting the switch ACSET(53)=2 etc.. When the maximum weight search is completed the user switch ACSET(52)=2, which will cause **AcerMC** to read the wtmax_xx_usr.dat as well as grid_xx_usr.veg files and produce unweighted events with the new setup.
* _The user wants to generate events at a different \(m_{Z^{0}/\gamma^{*}}\) cutoff value and/or different centre-of-mass energy \(\sqrt{s}\)_: When the user changes at least one of these two parameters the event topology is significantly changed as well as the contributions from different kinematic channels. The user should thus start with a new multi-channel optimisation by setting the mode switch ACSET(50)=1 and start an **AcerMC** run. The number of generated events is determined by the usual NEVENT in run.card. At the end of the run **AcerMC** will produce a file chanwt_xx_new.dat which should be renamed/linked to chanwt_xx_usr.dat. The user should then set the switch ACSET(52)=1 and first put ACSET(50)=2 and and repeat the VEGAS grid training as described above and consequently ACSET(50)=0 and ACSET(53)=2 to perform the maximum weight search. After obtaining all three user files the ACSET(53) should again be put back to ACSET(53)=0 and a normal run should be started; the switch ACSET(52)=1 will in this case force **AcerMC** to read all three user files and produce unweighted events. At the first look procedure for listed action scenaria might seem a bit complex but should after a few trials and errors become a straightforward routine; it is expected that the vast majority of users would have to deal with at most the first scenario.

### Details on the interface to PYTHIA 6.2

The **AcerMC** interface to Pythia 6.2 is implemented close to the new standard specified at the Les Houches workshop 2001 [3]. The full description of the standard can be found in the PYTHIA 6.2 manual ([1]). In addition to the **UPINIT** and **UPEVNT** routines the file **acerMC_src/interface/pythia_ac.f** provides links between a list of **AcerMC** routines and the corresponding PYTHIA ones, as e.g. the (pseudo-)random number generator, \(\alpha_{s}\) and \(\alpha_{\mathrm{QED}}\) calculations as well as a series of routines that re-write the **AcerMC** event output to the required PYTHIA format. Using this strategy, the native **AcerMC** code is completely de-coupled from the linked hadronisation library (at the moment PYTHIA/HERWIG) and new interfaces can thus easily be added. The special **AcerMC** requirement is the call to the ACFINAL subroutine at the end of the run which signals the **AcerMC** to close the various I/O files and produce the final output. An example of the implementation of the PYTHIA/**AcerMC** interface can be found in the provided demo_py.f. The PYTHIA code is unmodified apart from making a small modification in PYINIT routine:

CALL UPINIT(1)

..parameter initialisation..

CALL UPINIT(2)

..process initialisation..

since the user-supplied processes in this new interface are not allowed to (re-)estimate maximal weights (as e.g. the native PYTHIA processes do). In the original code the call to **UPINIT** is set before the PYTHIA parameters and functions (e.g. PYALPS for \(\alpha_{s}(Q^{2})\) calculation) are initialised with the user settings18.

Footnote 18: This was however possible in the old PYTHIA 6.1 interface

An additional modification of the PYTHIA code was needed in order to put the top decay products (handled by PYTHIA) back into the history part of the PYTHIA event record, which was deemed useful for e.g. top reconstruction studies. The modification is however assumed to be only temporary, i.e. until the feature is added in the PYTHIA code itself.

The user can thus add the most recent PYTHIA library without other necessary modifications but for the two lines of code in PYINIT routine as described above (the dummy routines **UPINIT**, **UPEVNT**, **STRUCTM**, **STRUCTP** and **PDFSET** however have to be removed from the code for an external process to work and to activate the **PDFLIB** interface).

By setting **ACER=1** user decides to generate hard process from **AcerMC** library. Modeling of ISR/FSR shower, hadronisation and decays are generated by PYTHIA generator. All steering parameters, relevant for these steps of full event generation remain the same as in standard PYTHIA execution.

By setting **ACER=0** user decides to generate standard PYTHIA process. The simple example how to generate \(t\bar{t}\) and \(t\bar{t}H\) production process within **AcerMC** framework is provided in demo_py.f.

The additional settings **ACER=2** and **ACER=3**, which allow the user to produce event records according to the Les Houches standard are given in the Section 7.8.

### Details on the interface to HERWIG 6.5

Interfacing the **AcerMC** to HERWIG 6.5 is almost identical with the PYTHIA implementation since the interfaced version now also complies with the Les Houches standard [3]. The interface routines are written in accordance with the Les Houches description; in the HERWIG 6.5 interface the UPINIT routine also has to be called in two steps in order to enable the user to change the HERWIG 6.5 default settings and get the correct re-evaluation of the maximal weight (as in the PYTHIA interface):

CALL UPINIT(1)...user values..CALL UPINIT(2)

The first UPINIT call is made from the original location in the HWIGUP routine and the second call to UPINIT is placed at the end of the HWUINC routine, after all the internal HERWIG settings have been modified. As in the PYTHIA implementation all the interface subroutines needed for communication between HERWIG and **AcerMC** are stored in acermc_src/interface/herwig_ac.f.

One minor additional modification of the original HERWIG 6.5 code was albeit necessary, namely the IMPLICIT NONE was commented out in the herwig6500.inc file; this was needed since the **AcerMC** code is written with the implicit IMPLICIT DOUBLE PRECISION(A-H,O-Z).

In principle the implemented changes should be very easy and transparent for the transfer into new HERWIG releases; an example of the use of **AcerMC**/HERWIG interface is provided in the file demo_hw.f.

By setting ACER=1 the user decides to generate a hard process from **AcerMC** library. Modeling of ISR/FSR shower, hadronisation and decays are generated by HERWIG generator. All steering parameters, relevant for these steps of full event generation remain valid as for the standard HERWIG execution.

By setting ACER=0 the user decides to generate standard HERWIG processes. The simple example how to generate \(Zb\bar{b}\) production process within the **AcerMC** framework is provided in demo_hw.f.

The additional settings ACER=2 and ACER=3, which allow the user to produce event records according to the Les Houches standard are given in the Section 7.8.

[MISSING_PAGE_FAIL:53]

there are the settings implemented so far.

### Installation procedure

The installation requires availability of the CERNLIB fortran library.

* Ungzip and untar distribution file.
* In the main directory type make demo_py or make demo_hw. It will compile demo_py.f or demo_hw.f and produce the executables demo_py.exe, demo_hw.exe depending on the selected option. The first-time call will also build and install all the required libraries; this will not be repeated when the demo_py.f or demo_hw.f are subsequently changed.
* To execute the programs type make run_py or make run_hw. The scripts will change directory to prod and create respective links to data directories there. The execution will also be performed there. All input files should be accessible/routed from directory prod, the output files will also be produced in that directory.

### Storing and reading events using the Les Houches accord

When setting the ACER=2 switch the **AcerMC 1.4** is instructed to dump the events generated by the **AcerMC** library in combination with PYTHIA or HERWIG into a pair of output files using the Les Houches format [4]. The files are **AcerMC_pXXX_rYYYYYY.inparn** and **AcerMC_pXXX_rYYYYYY.events, with XXX denoting the AcerMC process ID while YY.. is currently the random seed used in **AcerMC**, to provide a unique identifier in the absence of other choices (run number & similar).

The *inparn file is basically an information header, containing the relevant run parameters in accordance with the Les Houches standard [4], e.g. the cross-section of the process and the number of dumped/stored events; it is written in a 'human-readable' format in order to provide the user with the necessary information. The *_events file on the other hand contains the actual record of the hard process events produced by the **AcerMC**. The event dump is obtained by compiling and running the provided programs demo_py.exe or demo_hw.exe as detailed in Section 7.8.

Using the ACER=3 switch the thus produced event record can subsequently be read back either into the **AcerMC 1.4** generator to be processed further by PYTHIA or HERWIG, i.e. the ISR/FSR and hadronisation can be added.

The same event records can also be read into the stand-alone PYTHIA or HERWIG generators, by re-directing the original(dummy) UPINIT routine to the INITACERMC routine and the original UPEVNT routine to USEACERMC routine (In the **AcerMC 1.4** setup this is done automatically).

The files containing the respective routines are named initacerrmc.f and useacermc.f and are provided in the leshouches directory of the **AcerMC 1.4** distribution. The reading of a specified set of generated events is achieved by copying the *.inparm and *.events files into the running directory and linking/copying the desired *.inparm file to a file named inparmAcerMC.dat; there is no need to modify the name of the *.events file since its name is already stored in the corresponding *.inparm file.

### Interface of Tauola to Pythia and Herwig

* Interface to PYTHIA :

The choice of TAUOLA library in PYTHIA sets the \(\tau\)-s to be stable by setting MDC,(15,1)=0, thus leaving them to be treated by TAUOLA procedures. The TAUOLA library is called via the TAUOLAHEPEVT(IMODE) routine, where IMODE=-1,0,1 represent the initialisation, operation and finalisation respectively. In the operation mode the call to TAUOLAHEPEVT(0) is made after the PYEVNT and PYHEPC(1) calls which generate the full event and translate and fill it into the HEPEVT common block. After TAUOLA has finished a subsequent call PYHEPC(2) is made to translate the new event back into the PYTHIA internal structure and a subsequent call to PYEXEC is made so that any undecayed particles (e.g. the \(\pi^{0}\)) are decayed. It was decided against using the provided PYTHIA interface via the PYTAUD routine since this routine is called for each occurrence of a \(\tau\)-lepton separately so no (complex) polarisation options can be included without substantial changes to PYTHIA routines.

* Interface to HERWIG :

The present version 6.5 of HERWIG contrary to PYTHIA does internal tracking of the polarisations of the \(\tau\)-leptons for the more complex built-in processes (e.g. Higgs decays); contriarwise nothing can be done for the external hard processes passed to HERWIG for hadronisation. In order to preserve this feature the HWDTAU routine has been modified to perform the TAUOLA calls only for internal HERWIG processes which provide the \(\tau\) polarisation information; other \(\tau\)-lepton decays are again executed via a call to TAUOLAHEPEVT. Since HERWIG is using the HEPEVT common block already as the internal event record no translation of events is needed. In order to also keep other HERWIG parameters current (e.g. IDHW of the particle) a call to a new routine HWHEPC is provided; this new routine also corrects the vertex positions of the \(\tau\) decay products and sets the status codes of new particles to the HERWIG recognisable values. Subsequently a call to HWDHAD is made in order to decay any undecayed particles.

### Interface of Photos to Pythia and Herwig

* Interface to PYTHIA :

Choosing PHOTOS to provide the QED final state radiation sets the parameter PARJ(90)= \(2\cdot 10^{4}\) order to prevent PYTHIA to radiate photons off leptons, thus inducing double counting. The parameter is representing the threshold in GeV below which leptons do not radiate. Pythia does not contain the routines to handle radiation of hadrons however some caution is necessary due to some exceptions/specific decays (e.g. \(\pi^{0}\to e^{+}e^{-}\gamma\)) which are generally recognised by PHOTOS itself. The initialisation, execution and finalisation are done by calls to the new PHOTOS.HEPEVT(IMODE), IMODE=-1,0,1 subroutine, constructed for this purpose by the AcerMC authors. Since PHOTOS operates on the HEPEVT record the calls to PYHEPC routine are again necessary.

* Interface to HERWIG :

The present version 6.5 of HERWIG does itself not provide the final state QED radiation of any kind, thus the inclusion of PHOTOS is simple and possibly also rather necessary. The call sequence is the same as in PYTHIA, with no need for event record conversion.

### Details of the Tauola implementation

The TAUOLA library is built from the latest distribution source with the _Cleo_ setup option. The native random generator was replaced with a link to the random generator of the linked event generator (PYTHIA or HERWIG ) in the same manner as done for AcerMC, which decreases the number of random seeds which need to be initialised.

The TAUOLA_HEPEVT routine is a modification of the original TAUOLA routine provided in the file tauface.jetset.f in the TAUOLA distribution. The modifications were restricted to allow for the 'overloaded' use of the HEPEVT record by PYTHIA and HERWIG, where respective mother and daughter pointers (which should match) sometimes point to different particles (e.g. hard process copies and similar). The original TAUOLA routine already worked when interfaced to PYTHIA, albeit requiring the non-default setting of MSTP(128)=1, whereby all the (sometimes useful) links to the hard record were lost. The modified version also works with the default PYTHIA MSTP(128)=0 setting.

Additional modifications were made in order to use the parameters set in tauola.card and the call to INIMAS routine was replaced by a call to TAU_INIMAS, which is a copy of the former but sets the particle masses to the values of PYTHIA or HERWIG defaults.

A routine TAURRS that defines the special decay modes (e.g. LEPTON-HADRON, where one tau decays hadronically and the other one leptonically) was written; it operates by modifying the internal GAMPRT array on an event by event basis. A related routine TAURR_PRINT prints the value of the branching ratio into the tauola.out file.No changes to the native tauola code was necessary (and therefore not made).

### Details of the Photos implementation

The PHOTOS is also built from the latest distribution source. As in TAUOLA The native random generator was replaced with a link to the random generator of the linked event generator (PYTHIA or HERWIG ) in the same manner as done for AcerMC.

The PHOTOS_HEPEVT routine and the subsequently called PHOTOS_HEPEVT_MAKE are newly written routines that inspects the HEPEVT record for charged particles and finds their highest'mother' particle, which is consequently passed to photos routines as the starting point. Photos itself then walks down the branches and performs radiation where possible. A bookkeeping of the starting points is made in PHOTOS_HEPEVT in order to prevent multiple invocations of radiation on the same particle.

Original photos code had to be modified due to the 'overloaded' HEPEVT record, since its requirements for matching mother-daughter pointers were too strict for either PYTHIA (with external processes and/or MSTP(128)=0 setting) or HERWIG. The modification was limited to PHOTOS_MAKE and PHOBOS routines. In addition the tracking of IDHW array was added to PHOTOS_MAKE to accommodate the HERWIG event record. A further modification was however necessary in the PHOIN routine since in HERWIG the entry JMOHEP(2,I) is not empty but filled with colour flow information, which in turn inhibited PHOTOS radiation off participating particles19. No modifications of the core (physics) PHOTOS code was made.

Footnote 19: PHOTOS expects the non-zero second ‘mother’ JMOHEP(2,I) entry only for \(gg(qq)\to t\bar{t}\) process, which is treated by a set of dedicated routines; this in turn clashes with HERWIG’ overloaded’ JMOHEP(2,I) entry.

## 8 Outlook and conclusions

In this paper we presented the **AcerMC** Monte Carlo Event Generator, based on the library of the matrix-element-based generators and interfaces to the universal event generators PYTHIA 6.2 and HERWIG 6.5. The interfaces are based on the standard proposed in [4].

The presented library fulfills the following goals:

* It gives a possibility to generate the few Standard Model background processes which were recognised as very dangerous for the searches for the _New Physics_ at LHC, and generation of which was either unavailable or not straightforward so far.
* Although the hard process event is generated with matrix-element-based generator, the provided interface allows to complete event generation with initial and final state radiation, multiple interaction, hadronisation, fragmentation and decays, using implementation of either PYTHIA 6.2 or HERWIG 6.5.
* These interfaces can be also used for studying systematic differences between PYTHIA 6.2 or HERWIG 6.5 predictions for the underlying QCD processes.

The complete list of the native **AcerMC** processes implemented so far is: \(gg,q\bar{q}\to t\bar{t}b\bar{b}\); \(q\bar{q}\to W(\to\ell\nu)b\bar{b}\); \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)b\bar{b}\); \(q\bar{q}\to W(\to\ell\nu)t\bar{t}\); \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b})t\bar{t}\); \(gg,q\bar{q}\to(Z/W/\gamma^{*}\to)t\bar{t}b\bar{b}\); \(gg,q\bar{q}\to t\bar{t}t\bar{t}\); \(gg,q\bar{q}\to(t\bar{t}\to)f\bar{f}b\bar{f}\bar{b}\) ; \(gg,q\bar{q}\to(WWb\to)f\bar{f}\bar{f}\bar{b}\bar{b}\). We plan to extend this not too exhaustive, but very much demanded list of processes, in the near future.

Several improvements of the existing Monte Carlo algorithms/programs have been developed in the process of this work. Let us make short list of the most interesting ones: (1) The use of the adapted Kajantie-Byckling enables one to automatise and modularise the phase space generation of n-particle final states. (2) The additions and extensions to the available (multi-channel) phase space algorithms (e.g. Breit-Wigner function with s-dependent width, mass-threshold effects) lead to substantial improvement of the unweighting efficiency; Figs. **8**, **10** and **11** illustrate the improvements achieved in the generation efficiency. (3) The power of the multi-channel optimisation was enhanced by using the modified ac-VEGAS package. We believe that the modification in the VEGAS code represents a very powerful extension of this package; (4)the colour flow information has been obtained after some modification of MADGRAPH package.

Having all these different production processes implemented in the consistent framework, which can be also directly used for generating standard processes available in either PYTHIA 6.2 or HERWIG 6.5 Monte Carlo, represents very convenient environment for several phenomenological studies dedicated to the LHC physics. Such frame was not available to our knowledge so far. We hope that it can serve as an interesting example or even a framework. This way some tools for discussing the ambiguities due to QCD effects are collected, however the necessary discussion for the appropriate uncertainties is still not exhausted. Nevertheless some discussions using this tool can be already found in [11, 12, 13, 14].

## Acknowledgments

We would like to thank Daniel Froidevaux, Torbjorn Sjostrand, Bryan Webber and Alessandro Ballestrero, Zbigniew Was and Svjetlana Fajfer for several very valuable discussions. We would like also to thank all our colleagues from ATLAS Collaboration who were the first and very enthusiastic users of the preliminary versions of this package. We both very warmly acknowledge the support from the CERN PH division.

## References

* [1]
* [2] T. Sjostrand _et al._, Computer Phys. Commun. **135** (2001) 238. eprint hep-ph/0108264, LU-TP 01-21, August 2001.
* [3] G. Marchesini et al., Comp. Phys. Commun. **67** (1992) 465; G. Corcella et al., JHEP **0101** (2001) 010,
* [4] E. Boos at al., _Generic user process interface for event generators_, hep-ph/0109068.
* [5] E. Barberio and Z. Was, Comp. Phys. Commun. **79** (1994) 291.
* [6] S. Jadach, J. H. Kuhn, Z. Was, Comput. Phys. Commun. **64** (1990) 275; M. Jezabek, Z. Was, S. Jadach, J. H. Kuhn, Comput. Phys. Commun. **70** (1992) 69; R. Decker, S. Jadach, J. H. Kuhn, Z. Was, Comput. Phys. Commun. **76** (1993) 361.