# Cobra Overview

Wim T.L.P. Lavrijsen

University of Nijmegen

Faculty of Science

Toernooveld 1

NL-6525 ED Nijmegen

The Netherlands

Wim.Lavrijsen@cern.ch

###### Abstract

This note provides an overview of the COmBined Reconstruction for Atlas (Cobra) package. Cobra extends on the L3 Geane package and implements a combined muon reconstruction in Atlas. The concepts behind the package, the assumptions made and their implications in a general sense are documented here, but their validity and their implications for Atlas in specific are investigated in an upcoming note.

## 1 Introduction

The muon spectrometer in Atlas is capable of measuring positions along a charged particle trajectory, with high accuracy. Reconstructed muon tracks in the muon spectrometer have therefore a direction that is well enough defined to exploit the distance of the muon spectrometer from the vertex (the lever arm) to obtain the best estimates of the track parameters on the vertex. This is especially true for muons with higher momenta, as their energy loss in the calorimeter is small, relative to their total energy. The best way to exploit this lever arm, is to combine the measurements from the inner tracker with those of the muon spectrometer in the reconstruction (as opposed to in the analysis).

Cobra is an acronym for COmBined muon Reconstruction for Atlas and it is part of the Atlas reconstruction software. The package allows for track matching through extrapolation of track segments from the inner tracker and muon spectrometer as obtained from the respective pattern recognition packages. Cobra is capable of refitting the track segments and performing a global fit of matched track segments, taking into account an average (or, alternatively, a most probable) energy loss in the calorimeter.

This note describes the reasons for doing combined muon reconstruction in Atlas (Section 2) and how Cobra achieves the goals set out for such a combined reconstruction. It gives a detailed account of Cobra's generic fit, both its concept (Section 3) and its implementation (Section 4), without referring to actual code, though. Along the way, the various assumptions made by Cobra are indicated. These assumptions are listed in the final section (Section 5) and are briefly explored.

The test of the Cobra package and its assumptions is done using simulated events in the Atlas software environment and in comparison with the pattern recognition packages, as described in [Wlav01.02].

## 2 Combined Muon Reconstruction

The Atlas detector consists, from the point of view of combined muon reconstruction, of three main subsystems: the inner tracker, the calorimeter and the muon spectrometer. It is only natural that the measured observables from the three subsystems are combined in the final analysis. Often it is beneficial to combine the measurements of the subdetectors before the final analysis, i.e. already in the reconstruction phase where there is full and easy access to the raw data and the detector description. This is particularly true for any analyses that involve muons. In Atlas, both the inner tracker and the muon spectrometer act as a tracker for muons. Moreover, both subdetectors measure basically the same set of track parameters and, over the range of 10 to 100 GeV/c in momentum, their performance is of similar quality. As a consequence, their measurements complement each other and, when combined, improve the overall reconstruction quality of the muon tracks.

### Benefits

A combined muon reconstruction has several benefits, as listed below.

#### improve track parameters

* Achieve the best possible momentum resolution: at worst only as good as a weighted average of the reconstructed momenta obtained in stand-alone mode, but in most cases better.
* Reduce the tails, in the momentum resolution distribution of the muon spectrometer, that resulted from fluctuations in the energy loss in the calorimeter.
* Improve charge determination for high energy muons, by means of the longer lever arm. Due to the inhomogeneous magnetic field, this is not straightforward and a global fit after track matching is needed.

#### complement measurements

* Provide seeds for the inner tracker: muon tracks from the muon spectrometer, backtracked to the inner tracker, act as starting points for the inner tracker pattern recognition and help to distinguish muon tracks from electron tracks (note that this is also the task of the transition radiation tracker).
* Discriminate muons from delta electrons in the muon spectrometer. Similarly to the inner tracker, this helps the pattern recognition in the muon spectrometer.
* Associate muon spectrometer inner station track segments with a full muon track. Low energy muons do not reach the middle and outer stations, and are therefore impossible to reconstruct in the muon spectrometer alone.
* Reject decay muons (from kaons and pions) by requiring tracks to originate from the (primary) vertex. The inner tracker can do little to filter out decay muons that originate from its outer parts or from the calorimeter.
* Discriminate low energy muons in jets from hadrons in the calorimeter. Moreover, the energy deposited by the muon individually can be estimated after its momentum is reconstructed in both the inner tracker and the muon spectrometer.

### 2.2 Combined Muon Reconstruction in Cobra

The main features of Cobra for combined muon reconstruction are:

* Refit of the track segments in the subdetectors (to obtain the covariance matrices).
* Extrapolation and subsequent matching/association of track segments.
* Global fit of matched track segments.

For each of the refits and the global fit, Cobra utilises the exact same code. How this is done is the subject of the next two sections. Cobra does not (yet) take into account any of the calorimeter measurements.

A schematic overview of the Cobra approach is shown in Figure 1, the first part (Figure 1, A) takes place in the pattern recognition packages, whereas the second part (Figure 1, B-D) is implemented in Cobra.

The pattern recognition identifies the track segments in both the inner tracker and the muon spectrometer (Figure 1, A). These track segments are stored and picked up by Cobra. Cobra refits the track segments (this is not really necessary, but it is the easiest way of obtaining a well-defined covariance matrix at every point along the track). After the refit, the track segments are extrapolated and their covariance matrices are propagated onto the outer edge of the calorimeter (Figure 1, B), while taking into account deflections due to the magnetic field

Figure 1: The Cobra approach.

and an average energy loss due to interactions in the calorimeter. The outer edge of the calorimeter is the most effective place for track matching, as the track segment in the inner tracker has a better defined direction than the segment in the muon spectrometer.

After the extrapolation, tracks are matched based on the \(\chi^{2}\) constructed from their covariance matrices and the difference in track parameters (Figure 1, C). If there are multiple candidate pairs, a selection is made by taking the candidate pair that results in the best \(\chi^{2}\) for the global fit. Unmatched track segments are extrapolated to the closest approach to the beamline, in order to determine whether they came from the (primary) vertex or originated from a decay. Finally, tracks with a good match are fitted (Figure 1, D), to obtain the best estimate of the set of track parameters.

Note that Cobra can be stopped at every point in this prescription. In particular, Cobra can be used to perform only the refit, yielding the covariance matrix at every point along the track. This is useful for alignment studies. Cobra can also be run as a backend to a pattern recognition package, providing the final fit with fixed hits.

## 3 Generic Geometrical Fit

In a software environment that is constantly changing, not the least because of the move to new technologies and libraries, a package must be protected against the adverse effects of changes as much as possible. In particular, a combined reconstruction package depends on the stand-alone reconstruction packages (and the simulation), so it could be affected by changes in any of them. Therefore, Cobra needs (and has) several protection mechanisms, one of which is the generalisation of its fit.

Each measurement that is associated with the track, defines a position (and an uncertainty on this position) in global space. The particle's trajectory passed through each of these positions. The fit in Cobra is a search for the physically valid track that is most consistent with the geometrical constraints of these positions. It does not include any kinematical constraints from the event as a whole. Cobra receives its geometry input in a standardised way from the simulation, similar to what is done in Geane [12]. The input of hits is independent of the detector description, as they too are provided in a standard way. Thus, the fit code is unaffected by changes in the detector description.

The next section explains the Geane concepts and what Cobra adds to become as detector-version independent as possible. The most important Cobra concept, the construction of geometrical constraints based on physical measurements, is described in the next section. The proof of the Cobra concept is the comparison of the fit results with the (dedicated) final fit algorithms of the pattern recognition packages of the two Atlas trackers. If the exact same fit code can refit track segments in these two completely different subsystems with good performance, then the code can be expected to handle differences in detector description versions as well. These comparisons are presented in [13], where it is shown that the generic fit works fine.

### Generalisation of the Fit

The fit as used by Cobra has two main inputs (excluding the data): the detector geometry and the physics that define particle tracks. Generalisation of the geometry is easiest, as a geometry constrained fit is, to first order[2], just mathematics. In writing down the mathematics of a fit, the detector geometry, the magnetic field and the physics of the measurements are suitably abstracted. Consequently, it is also possible to write a track fit in 

[MISSING_PAGE_FAIL:5]

new detector is very similar to the original detector). A further refinement is called for and that is what Cobra adds to the Geane concepts.

#### Generalisations from Cobra

Having insulated the fit from the distribution of materials (the 'physics'), the next step is to insulate the fit from geometry (or hit) details. In order to understand this, consider the following:

* A track fit does not fit hits; it just constrains parameters. The physical meaning of these parameters is of no concern to the fit. Thus, all that is required is a set of (abstract) parameters with a definite meaning for all participants (fit, hit, user/developer), constructed such, that the measurements are easily (read: automatically) mappable onto them.
* Every hit is identifiable. Once a hit is identified, the generalisation of its (local) parameters and their constraints is fixed. In terms of code this means that once the hit information is created and initialised from the data, sufficient information is available for computing the set of parameters that are input to the fit.

The track fit, the hit representing the measurement and the user/developer of the fit code need to be consistent in the number and meaning of the parameters that are constrained in the fit. In the case of Cobra, the choice is to have five explicit and three implicit parameters. Only one of the explicit parameters (i.e. 1/P, with P the magnitude of the particle momentum) and the three implicit ones (charge, particle species and track length) have a definite meaning. The meaning of the remaining four parameters always depends on the context. In practice, only the explicit parameters and the track length are constrained in the Cobra fit. The remaining two parameters are established by the pattern recognition, although the Cobra fit can determine the most likely charge and particle species. Once the explicit parameters are decided upon, each measurement can be converted to a set of these five parameters plus a corresponding set of (up to) five constraints. The constraints represent the measurement and its uncertainty or the geometry of a sensitive detector element and its boundaries. The context dependent parameters are given definite meaning by choosing the context of the measurement as the context of the hit. That is, when the fit applies the constraints of the hit, it will do so within the context of the measurement.

The generalisation of a measurement consists of the split into context and constraints in terms of the fit parameters. For this, code with access to the detector description transforms the measurements to geometrical information defined in the global cartesian system that is the mother frame of the Atlas detector. Starting with this global information and given the identity of a hit, Cobra generalises the measurement info (Section 4). In Cobra, this code resides in a subpackage that contains the interfaces to the pattern recognition packages[5], thereby shielding the abstract hits in the core library. Although not strictly necessary (due to generalisation of hits), Cobra works with a separate interface for each pattern recognition package, which acts as a buffer for changes during code development[6]. In the conversion, the hit context is defined as a local coordinate system, defined by the measurement, and the uncertainties on the measurement in that local system are used as the fit constraints. Globally defined track parameters are now mappable onto the local system, to be constrained locally. The reverse is also possible, but is not particularly useful. The local coordinate system is to be stored with the other hit information, to be available whenever a transformation from global to local parameters is required.

[MISSING_PAGE_FAIL:7]

## 4 Generic Geometrical Hits

The previous section argued that an important step towards a generic geometry based fit is the ability of expressing a measurement in terms of constraints in a local coordinate system. This section explains how this is done, in Cobra, for isotropic space points, anisotropic space points (in Atlas, strip hits), cluster hits and hits which rely on a drift model. In practice, the hits themselves need not be generalised (for one, they can maintain their identity), it is sufficient if their representations (read: interfaces) are identical from the point of view of the fit. This section assumes that the hits themselves are indeed generalised and the first part describes how physical hits are converted to geometrical hits. The second part describes how these hits are then used in the fit.

### 4.1 Hits as Geometrical Constraints

In Atlas, there are two basic types of hits: anisotropic space points (or strip hits) and hits with a radial drift model (drift hits, for short). The reconstructed space points in the muon spectrometer could be used as isotropic space points, but although Cobra supports these, there is no reason to use them in Atlas, as they are a bit unnatural. The pixel detector is designed to produce clustered hits, but describing them as strip hits with slightly increased weight works fine. As yet, Cobra does not incorporate hits with a direction constraint, but they are trivial to add, as they fit in naturally.

The term 'constraint' as used in the following paragraphs is always about measurement uncertainties, used as geometrical constraints, not the real geometrical constraints (i.e. the limits of the detector element). In particular, in the case of a strip hit, length / \(\surd\)12 is the constraint, not the geometrical length of the strip (and naturally, in the other direction the constraint is pitch / \(\surd\)12).

#### 4.1.1 Isotropic Space Points

An isotropic space point has, by definition, the same uncertainty in every direction (Figure 3, A). That is, the constraint on its centre position is controlled by only one parameter.

**Figure 3. Generalising an isotropic space point.**

As a first step towards generalisation, a coordinate system, intersecting the centre of the hit, is defined locally (Figure 3, B). In principle, the plane that defines the coordinate system can have any direction; however, a plane more or less perpendicular to the local track segment is easiest to work with. Next, the uncertainties aretransformed to the local system (Figure 3, C). Note that in the local system, the constraints are now explicit only on two (local) parameters: the third parameter has become implicit in the form of the track length.

The fit sees the local coordinate system[8] and links the constraints up with the track parameters as extrapolated onto the plane (Figure 3, D): the fit minimises the distance between the track-plane intersection and the local centre of the plane.

#### 4.1.2 Anisotropic Space Points

In the anisotropic case, two cases are distinguished. Either one of the three local directions has a significantly _smaller_ uncertainty than the other two, or it has a significantly _larger_ uncertainty. The first is the case in the silicon tracker in Atlas, hits of this kind are therefore referred to as strip hits. The other case is described in the next section, as a large uncertainty in one direction will yield clustered hits.

A strip hit is rather similar to an isotropic space point (Figure 4, A; for clarity the uncertainty due to the strip thickness has been left out). As a consequence of the unequal constraints, it is not possible to just choose any direction for the local plane. Instead, the strip geometry dictates the local plane (Figure 4, B).

The result, as far as the fit is concerned (Figure 4, C), is the same as for the isotropic space point. As mentioned, the uncertainty on the hit is used and not the geometrical boundaries of the strip: the fit is, theoretically at least, allowed to place the final position outside the actual strip[9].

#### 4.1.3 Clustered Hits

If sensitive detector elements are constructed in a row and have a large extent in one direction, then they will produce cluster hits (Figure 5, A) when a track passes through under an angle. (If it does not, the resulting single detector element which fires still a cluster, albeit a small one.) A cluster is transformed into a position at the 'centre of gravity' (with the corresponding uncertainty) and an angular constraint, derived from the shape of the cluster (Figure 5, B). Note that the uncertainties on these constraints are correlated. The latter holds an ambiguity which is to be resolved by the fit. The local coordinate system is defined by a plane parallel to the detector elements and through the 'centre of gravity'.

Figure 4: Generalising an anisotropic space point.

For the fit, direction constraints are equivalent to position constraints (Figure 5, C). The ambiguity is resolved by the hit, which selects, when asked for it, the direction constraint best suited to the current fit parameters. In Cobra there is, at the time of writing, no code that directly implements the clustered hit, but the fit takes potential constraints on local direction into account. So, all an implementation of a clustered hit needs to do for the code to work, is to fill in non-null values for these constraints.

#### 4.1.4 Hits with a Drift Model

The generalisation of hits with a drift model is quite different from any of the previous kinds of hits, as there is no naturally suggested plane. In Atlas, there is one type of drift hit: both the straw tubes in the transition radiation tracker and the monitored drift tubes have a radial model: the drift hit consists of a drift distance to some wire, the direction and position of which are known. The constraint consists of an annular shaped region defined by the drift distance (Figure 6, A).

A local coordinate system is defined by choosing a plane going parallel with and through the wire (Figure 6, B) and as a consequence there is a left-right ambiguity. This ambiguity is the only model dependence for such a drift hit (the correction due to the propagation time along the wire is small and taken into account by the pattern

Figure 5: Generalising a clustered hit.

Figure 6: Generalising a hit with a radial drift model.

recognition instead of by the drift model). The plane's orientation in global space can not be defined until the particle trajectory is known.

During fitting, the local plane must be adjusted to be as perpendicular as possible to the particle track, as the particle trajectory itself is tangential to the circle defined by the drift distance (Figure 6, C). Furthermore, the sign of the drift distance must be allowed to flip, as the sign is determined by the fit, not by the measurement. Neither concerns the fit: in the local system, the distance to the origin (the wire), and the constraint (a delta around the drift distance) is always the same.

### Fitting Generalised Hits

From the perspective of the fit, a generalised hit always looks the same, as there is one and only one interface for tracking and one and only one interface for fitting. Any generalised hit class[10] that implements those interfaces can be fitted.

* The fit tracks from and to hits by asking each of the 'from' and 'to' hits for a plane at a point in the mother frame, which designate the start point and end point of the tracking[11], respectively. These planes are nothing more than the local coordinate systems in which the hits can apply their geometrical constraints. The track parameters that result from the tracking are stored for each hit.
* The fit requests the local track parameters and constraints from each hit. This includes the track parameters previously obtained by propagating the track, which the hit has converted from the global to the local system. The actual fit then follows.

Cobra implements two fit algorithms, a Kalman filter [17] and a block banded matrix inversion [18]. The matrix inversion is more stable as track parameters are not updated during tracking and it converges faster. It is therefore the default algorithm. The two algorithms are mathematically equivalent to first order in 1/P, i.e. they are equivalent if the contribution to the covariance matrix due to propagation through the detector is dominated by multiple scattering instead of by the magnetic field. In Atlas, such is the case.

The block banded matrix algorithm is fully described in [18]. In short, and with reference to Figure 7, the fitted track parameters (\(\xi\)) on the first hit are propagated to the second hit, resulting in a prediction (\(\zeta\)). From there, propagation continues with the fitted parameters of the second hit (so, there might be a kink in position and/or direction) to the next, etc. During tracking, the material and magnetic field contributions are collected in a separate covariance matrix for each segment in between two hits. After tracking, the results are input to the linearised, analytical solution of a \(\chi^{2}\) equation minimised w.r.t. the fit parameters.

**Figure 7. The (block banded matrix inversion) fit algorithm.**

In the \(\chi^{2}\) equation, the contribution of each hit (except the first and the last) consists of its own measurement w.r.t. the fit and the measurements of the previous and the next hit as predictions for the current hit, suitably deweighted with the covariance matrix of the material and magnetic field that separates them, w.r.t. to the fitted track parameters. Consequently, the resulting set of linear equations has a block banded form and is solvable by matrix inversion.

## 5 Assumptions

There are two kinds of assumptions made in Cobra. The first kind, involving things like the availability of pattern recognition packages and a geometry in Geant, is solvable if any of them turns out to be false. The second kind consists of more fundamental assumptions, those that need to be valid for the concepts behind Cobra to be valid. If any of these fundamental assumptions turns out to be flawed, it will be difficult, if not impossible, to use Cobra. For the Atlas environment (given the current simulation software) at least, these assumptions have been proven to be valid (see [20]). When used in any other environment, or a drastically changed Atlas software environment, the validity must be checked again.

The following lists the fundamental assumptions that have been identified.

1. The real geometrical constraints (the detector element edges) need not be considered.
2. The main contribution to the uncertainty on parameters with geometrical meaning (positions, directions) comes from multiple scattering.
3. All constraints have a Gaussian distribution or can be reasonably well approximated by one.
4. \(\chi^{2}\) minimisation leads to the optimal, physical track.

Cobra does not know about geometry. It is therefore possible, that the fit forces the fitted position outside a detector element. Of course this can happen if the hit does not belong to the track, but was mistakenly assigned to it anyway. Or, more likely (given a high quality pattern recognition), if the current layer is misaligned with respect to the previous and the next layer, then these surrounding layers pull the fitted track into one direction. If the real hit was already on the edge of the detector element, then the misalignment might pull it outside the detector element. In a perfectly aligned detector (like in the simulation), the fit had better keep the hits inside the detector element. The way to check this, is by looking at the residuals of the hits (not, of course the _fit_ residuals, where the hit under consideration has not participated in the fit). It turns out, that indeed, the fit sometimes does pull a hit outside the detector element, but this is extremely rare: detector element edges are clearly visible in the residual distribution, at the correct distance and sharply defined.

In the derivation of the equations that form the fit as used in Cobra, there is a linearisation in 1/P (where 'P' is the total momentum). This is valid if multiple scattering is the main contributor the uncertainty of position and momentum, as the multiple scattering contribution to the uncertainty of the prediction is linear in 1/P. The other important random process is loss of energy due to ionisation. Its contribution to the uncertainty of the parameters with geometrical meaning is only indirect: fluctuations in momentum yield different contributions due to magnetic field gradients (as the deflections are different at different particle energies). In practice it means that multiple scattering always dominates the fit, even if energy loss fluctuations are the dominant physics process.

The weights on the prediction come from the inverse of the covariance matrix, which is dominated by multiple scattering. As such, these weights are the widths of a Gaussian distribution around the average track. The geometry constraints, however, come from a uniform distribution (strip hits) or from some gas-specific, non-symmetric distribution (drift hits). It is assumed in the fit, that the weighting according to the inverse of one standard deviation of the applicable distribution is a valid weight, and that hits and predictions can be compared based on this definition of weight, regardless the underlying distribution. In order to test this assumption, hits can be assigned different weights (which effectively scans the magnitude of the uncertainty on the uncertainty). The fit is very stable against such modifications and the naively chosen values are indeed the optimal ones, in terms of momentum resolution.

Finally, the Cobra fit is based on a minimisation of a weighted average of the measurement and the predictions of the track segments formed by the hits that come before and after the current hit, respectively. This weighted average is expressed as a \(\chi^{2}\) equation, which is minimised by differentiation with respect to the true hit parameters. This is a well proven method, but it might cause problems in the case of the combined, global fit, as the prediction of the muon spectrometer track segment is propagated through the calorimeter, potentially losing all predictive power. To counter that, Cobra does not use the classic inverse matrix approach, but has a block-banded matrix approach (from [12]), which only relates every hit to the previous and the next hit, not the all the others. Of course, each previous and next hit are themselves related to their previous and next hits, thus in the end, all hits are related to all others. This way, Cobra has no problems traversing the calorimeter in the global fit.

## 6 Summary

As a combined reconstruction package in a software environment that is constantly changing, Cobra deploys generalisation and abstraction techniques to protect itself from the effects of changes outside its control. Basedon the ideas of the authors of Geane, Cobra takes the generalisation of a geometry based fit one step further, such that the fit does not only use the geometry from the simulation, but becomes (sub)detector (version) independent as well.

For this generalisation to work, several assumptions need to be valid (where 'valid' means: may not compromise physics performance). In practice, these assumptions are not so tight (at that, they are not so Cobra specific either) and do not pose a problem.

## References

* [Inno94]_GEANE: Average Tracking and Error Propagation Package_, V. Innocente, M. Maire, and E. Nagy, CERN-PPE note, January 13, 1994.
* [Inno93]_Trajectory Fit in Presence of Dense Materials_, V. Innocente and E. Nagy, CERN-PPE note, May 24, 1993.
* [Fruh87] "Application of Kalman Filtering to Track and Vertex Fitting", R. Fruhwirth, Nucl. Instr. and Meth., A 262 (1987) 444.
* [Bill84] "Track Fitting with Multiple Scattering: a New Method", P. Billoir, Nucl. Instr. and Meth., 225 (1984) 352.
* [Lutz88] "Optimum Track Fitting in the Presence of Multiple Scattering", G. Lutz, Nucl. Instr. and Meth., A 273 (1988) 349.
* [Witt80]_Propagation of Errors along a Particle Trajectory in a Magnetic Field_, W. Wittek, EMC internal reports, EMC/80/15 + additions, November 1980.
* [Kalm61] R.E. Kalman, J. Basic Eng., 82 (1961) 34, 1961.
* [Wlav01.02]_Cobra Performance_, W. Lavrijsen, Atlas internal notes, to be published.

Notes
1. Cobra started out with using Geane as a library and still uses major parts of the code, albeit suitably updated.
2. Second order effects, like Lorentz angle corrections and/or varying accuracy as a function of one of the fitted parameters are taken into account as if they were geometry effects.
3. There is a small error in [Witt80] in the transformation from the 'natural' multiple scattering system to the system in which the author performs the propagation (which is the natural system of the magnetic field). The version of Geane that is incorporated in Cobra has this corrected.
4. Of course, if you do not have a simulation in Geant, 'free' is somewhat relative and problems with versioning are likely to remain.