# The Monte Carlo Event Generator

AcerMC version 1.0

with interfaces to

PYTHIA 6.2 and HERWIG 6.3

B. P. Kersevan

Jozef Stefan Institute, Jamova 39, SI-1000 Ljubljana, Slovenia;

Faculty of Mathematics and Physics, University of Ljubljana, Jadranska 19,

SI-1000 Ljubljana, Slovenia.

E. Richter-Was

Institute of Computer Science, Jagellonian University

30-072 Krakow, ul. Nawojki 11, Poland;

Institute of Nuclear Physics, 30-055 Krakow, ul. Kawiory 26a, Poland.

###### Abstract

The **AcerMC** Monte Carlo Event Generator is dedicated for the generation of Standard Model background processes at \(pp\) LHC collisions. The program itself provides a library of the massive matrix elements and phase space modules for generation of a set of selected processes: \(gg,q\bar{q}\to t\bar{t}b\bar{b}\), \(q\bar{q}W(\to\ell\nu)b\bar{b}\), \(q\bar{q}W(\to\ell\nu)t\bar{t}\), \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)b\bar{b}\), \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b})t\bar{t}\) and complete electroweak \(gg\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) process. The hard process event, generated with one of these modules, can be completed by the initial and final state radiation, hadronisation and decays, simulated with either PYTHIA or HERWIG Monte Carlo event generator. Interfaces to both of these generators are provided in the distribution version. The matrix element codes have been derived with the help of the MADGRAPH package. The phase-space generation is based on the multi-channel self-optimising approach as proposed in NEXTCALIBUR event generator. Eventually, additional smoothing of the phase space was obtained by using a modified ac-VEGAS routine in order to improve the generation efficiency.

keywords: SM backgrounds at LHC, massive matrix elements, Monte Carlo generator, heavy flavor production, multi-channel phase-space generation Pacs: 02.70.-c, 13.38.-b, 13.90.+i +
[FOOTNO

###### Contents

* 1 PROGRAM SUMMARY
* 2 Introduction
* 3 Physics content
	* 3.1 The \(gg,q\overline{q}\to t\overline{t}b\overline{b}\) processes
	* 3.2 The \(q\overline{q}\to W(\to\ell\nu)g^{*}(\to b\overline{b})\) process
	* 3.3 The \(q\overline{q}\to W(\to\ell\nu)g^{*}(\to t\overline{t})\) process
	* 3.4 The \(gg,q\overline{q}\to Z/\gamma^{*}(\to\ell\ell)b\overline{b}\) processes
	* 3.5 The \(gg,q\overline{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\overline{b})t\overline{t}\) processes
	* 3.6 The electroweak \(gg\to(Z/W/\gamma^{*}\to)b\overline{b}t\overline{t}\) process
* 4 Monte Carlo algorithm
	* 4.1 The Matrix Element Calculation
	* 4.2 The Four Fermion Phase Space Generation
	* 4.3 The \(\alpha_{\rm QED}\) and \(\alpha_{s}\) calculations
* 5 Structure of the package
	* 5.1 Main event loop and interface to PYTHIA/HERWIG
	* 5.2 Structure of the **AcerMC*
* matrix-element and phase-space code
	* 5.3 Data files for the phase-space optimisation
* 6 How to use the package
	* 6.1 Steering switches of the overall run
	* 6.2 Steering switches of the **AcerMC*
	* 6.3 How to prepare data-files for the non-default setup
	* 6.4 Details on the interface to PYTHIA 6.2
Details on the interface to HERWIG 6.3
* 6.6 Definition of the energy scale
* 6.7 Installation procedure
* 7 Outlook and conclusions

Acknowledgements

References

A Feynman Diagrams
* B Example input files
* B.1 File run.card
* B.2 File acermc.card
* C Example output files
* C.1 File acermc.out
* C.2 File pythia.out
* C.3 File herwig.out

[MISSING_PAGE_EMPTY:4]

## 1 Program Summary

_Title of the program:_**AcerMC version 1.0**

_Operating system:_ Linux

_Programming language:_ FORTRAN 77 with popular extensions.

_External libraries:_ CERNLIB.

_Size of the compressed distribution directory:_ about 3.6 MB. The distribution includes modified versions of PYTHIA 6.2, HERWIG 6.3 and HELAS libraries.

_Key words:_ Standard Model backgrounds at LHC, massive matrix elements, Monte Carlo generator, heavy flavor production, multi-channel phase-space generation.

_Nature of physical problem:_ Despite a large repertoire of processes implemented for generation in event generators like PYTHIA [1] or HERWIG [2] a number of background processes, crucial for studying expected physics potential of the LHC experiments is missing. For some of these processes the matrix element expressions are rather lengthly and/or to achieve a reasonable generation efficiency it is necessary to tailor the phase-space selection procedure to the dynamics of the process. That is why it is not practical to imagine that any of the above general purpose generators will contain _every_, or even only _observable_, processes which will occur at LHC collisions. A more practical solution can be found in a library of dedicated matrix-element-based generators, with the standardised interfaces like that proposed in [3], to the more universal one which is used to complete the event generation.

_Method of solution:_ The **AcerMC** Event Generator provides itself library of the matrix-element-based generators for a few example processes. The initial- and final- state showers, beam remnants and underlying events, fragmentation and remaining decays are supposed to be performed by the other universal generator to which this one is interfaced. We will call it _supervising generator_. The interfaces to PYTHIA 6.2 and HERWIG 6.3, as such generators, are provided. At present, the following matrix-element-based processes have been implemented: \(gg,q\bar{q}\to t\bar{t}b\bar{b}\), \(q\bar{q}\to W(\to\ell\nu)b\bar{b}\); \(q\bar{q}\to W(\to\ell\nu)t\bar{t}\), \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)b\bar{b}\); \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b})t\bar{t}\) and complete EW \(gg\to(Z/W/\gamma^{*}\to)t\bar{t}b\bar{b}\). Both interfaces allow the use of the PDFLIB library of parton density functions.

_Restriction on the complexity of the problem:_ The package is dedicated for the 14 TeV _pp_ collision simulated in the LHC environment. In particular, using it for the 2 TeV _pp_ collision although technically possible might not be efficient and would require dedicated optimisation of the phase space generation. The consistency between results of the complete generation using PYTHIA 6.2 or HERWIG 6.3 interfaces is technically limited by the different approaches taken in both these generators for evaluating \(\alpha_{QCD}\) and \(\alpha_{QED}\) couplings and by the different models for fragmentation/hadronisation. For the consistency check,in the **AcerMC** library contains native coded definitions of the \(a_{QCD}\) and \(a_{QED}\). Using these native definitions leads to the same total cross-sections both with PYTHIA 6.2 or HERWIG 6.3 interfaces. _Typical running time:_ On an PIII 800 MHz PC it amounts to \(\sim 0.05\to 1.1\) events/sec, depending on the choice of process.

[1]. T. Sjostrand et al., _High energy physics generation with PYTHIA 6.2_, eprint hep-ph/0108264, LU-TP 01-21, August 2001.

[2]. G. Marchesini et al., Comp. Phys. Commun. **67** (1992) 465, G. Corcella et al., JHEP **0101** (2001) 010.

[3]. E. Boos at al., _Generic user process interface for event generators_, hep-ph/0109068.

Introduction

Despite a large repertoire of processes implemented for generation in the universal generators like PYTHIA[1] or HERWIG[2] a number of Standard Model background processes for studying expected physics potential of the LHC experiments is still missing. For some of these processes the matrix element expressions are rather lengthy and/or to achieve a reasonable generation efficiency it is necessary to tailor the phase-space selection procedure to the dynamics of the process. Due to this fact it cannot be expected that any of the universal purpose generators will contain _every_ process that is expected to participate at LHC pp collisions with an observable rate. A more practical solution could come in form of dedicated matrix-element-based generators with standardised interfaces, like the one proposed in [3], to the more general ones which are used to complete event generation.

The **AcerMC** Monte Carlo Event Generator follows up on this idea. It is dedicated for the simulation of the specific Standard Model background processes at LHC collisions: the \(gg,q\bar{q}\to t\bar{t}b\bar{b}\), \(q\bar{q}\to W(\to\ell\nu)b\bar{b}\); \(q\bar{q}\to W(\to\ell\nu)t\bar{t}\), \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)b\bar{b}\); \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b})t\bar{t}\) and complete EW \(gg\to(Z/W/\gamma^{*}\to)t\bar{t}b\bar{b}\). They are characterised by the presence of the heavy flavour jets and multiple isolated leptons in the final state. For the Higgs boson searches, the \(t\bar{t}H\), \(ZH,WH\) with \(H\to b\bar{b}\), the \(gg\to H\) with \(H\to ZZ^{*}\to 4\ell\), the \(b\bar{b}h/H/A\) with \(h/H/A\to\tau\tau,\,\mu\mu\) are the most obvious examples of signals where the implemented processes would contribute to the dominant irreducible backgrounds. The same background processes should also be considered for e.g. estimating the observability of SUSY events with a signature of multi-b-jet and multi-lepton production.

The program itself provides library of the massive matrix elements and phase space modules for the generation of a few selected \(2\to 4\) processes. The hard process event, generated with these modules, can be completed by the initial and final state radiation, hadronisation and decays, simulated with either PYTHIA 6.2 or HERWIG 6.3 Monte Carlo Event Generators. These will subsequently be called the _Supervising Generators_. Interfaces of **AcerMC** to both, PYTHIA 6.2 or HERWIG 6.3 generators, are provided in the distribution version. The **AcerMC** also uses several other external libraries: CERNLIB, HELAS[4], VEGAS[5]. The matrix element codes have been derived with the help of MADGRAPH[6] package. The achieved typical efficiency for the generation of unweighted events is of **20% - 30%**, rather high given a complicated topology of the implemented processes.

The very first version of this library, interfaced to PYTHIA 6.1 within the standard of the so-called _external processes_ (i. e. stand-alone implementations of hard processes interfaced to PYTHIA for further treatment of ISR/FSR and hadronisation, c.f [1] ), was already available and used by ATLAS Collaboration for physics simulation studies since several months. The documentation, for the processes implemented in this early version: \(q\bar{q}\to W(\to\ell\nu)b\bar{b}\), \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)b\bar{b}\) and \(gg,q\bar{q}\to t\bar{t}b\bar{b}\), can be found respectively in [7], [8], [9]. Since then, when upgrading to the **AcerMC** standard, the efficiency has been significantly improved thanks to the additional optimisation step in the phase space generation. Also, the interface standard was changed from PYTHIA 6.1 to PYTHIA 6.2 conventions, an interface to HERWIG 6.3 generator was introduced and the native **AcerMC** calculations of the \(\alpha_{QED}\) and \(\alpha_{QCD}\) couplings were coded to allow for consistent benchmarking between results obtained with PYTHIA and HERWIG as supervising generators. As a significant extension, the: \(q\bar{q}\to W(\to\ell\nu)t\bar{t}\); \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b})t\bar{t}\) and complete electroweak \(gg\to(Z/W/\gamma^{*}\to)t\bar{t}b\bar{b}\) processes were added, which have been implemented for the first time in the **AcerMC** library.

The outline of this paper is as follows. In Section 3, we describe physics motivation for implementing each of the above processes and we collect some numerical results (plots, tables) which can be used as benchmarks. In Section 4 we describe the overall Monte Carlo algorithm. Section 5 gives details on the structure of the program. Section 6 collects information on how to use this program and existing interfaces to PYTHIA 6.2 and HERWIG 6.3. Summary, Section 7, closes the paper. Appendix A documents sets of Feynman diagrams used for calculation of the matrix element for each subprocess, Appendices B and C give examples of the input/output of the program.

## 3 Physics content

The physics programme of the general purpose LHC experiments, ATLAS [10] and CMS [11], focuses on the searches for the _New Physics_ with the distinctive signatures indicating production of the Higgs boson, SUSY particles, exotic particles, etc. The expected environment will in most cases be very difficult, with the signal to background ratio being quite low, on the level of a few percent after final selection in the signal window.

Efficient and reliable Monte Carlo generators, which allow one to understand and predict background contributions, are becoming the key point to the discovery. As the cross-section for signal events is rather low, even rare Standard Model processes might become the overwhelming background in such searches. In several cases, generation of such a process is not implemented in the general purpose Monte Carlo generators, when the complicated phase space behaviour requires dedicated (and often rather complex) pre-sampling, whilst the general purpose Monte Carlo generators due to a large number of implemented processes tend to use simpler (albeit more generic) phase space sampling algorithms. In addition, the matrix element for these processes is often lengthy and thus requiring complicated calculations. Only recently, with the appearance of modern techniques for automatic computations, their availability _on demand_ became feasible for the tree-type processes. With the computation power becoming more and more easily available, even very complicated formulas can now be calculated within a reasonable time frame.

The physics processes implemented in **AcerMC** library represent such a set of cases. They are all being key background processes for the discovery in the channels characterised by the presence of the heavy flavour jets and/or multiple isolated leptons. For the Higgs boson searches, the \(t\bar{t}H\), \(ZH,WH\) with \(H\to b\bar{b}\), the \(gg\to H\) with \(H\to ZZ^{*}\to 4\ell\), the \(b\bar{b}h/H/A\) with \(h/H/A\to\tau\tau,\mu\mu\) are the most obvious examples of such channels.

It is not always the case that the matrix element calculations in the lowest order for a given topology represent the total expected background of a given type. This particularly concerns the heavy flavour content of the event. The heavy flavour in a given event might occur in the hard process of a much simpler topology, as the effect of including higher order QCD corrections (eg. in the shower mechanism). This is the case for the b-quarks present in the inclusive Z-boson or W-boson production, which has a total cross-section orders of magnitude higher than the discussed matrix-element-based \(Wb\bar{b}\) or \(Zb\bar{b}\) production. Nevertheless, the matrix-element-based calculation is a very good reference point to compare with parton shower approaches in different fragmentation/hadronisation models. It also helps to study matching procedures between calculations in a fixed \(\alpha_{QCD}\) order and parton shower approaches. Forvery exclusive hard topologies matrix-element-based calculations represent a much more conservative approximation than the parton shower ones [12].

Let us shortly discuss the motivation for these few Standard Model background processes which are implemented in the **AcerMC 1.0** library.

**The \(t\overline{t}b\overline{b}\) production** at LHC is a dominant irreducible background for the Standard Model (SM) and Minimal Supersymmetric Standard Model (MSSM) Higgs boson search in the associated production, \(t\overline{t}H\), followed by the decay \(H\to b\overline{b}\). The potential for the observability of this channel has been carefully studied and documented in [10] and [13]. Proposed analysis requires identifying four b-jets, reconstruction of both top-quarks in the hadronic and leptonic mode and visibility of the peak in the invariant mass distribution of the remaining b-jets. The irreducible \(t\overline{t}b\overline{b}\) background contributes about 60-70% of the total background from the \(t\overline{t}\) events (\(t\overline{t}b\overline{b}\), \(t\overline{t}bj\), \(t\overline{t}jj\)).

**The \(Wb\overline{b}\) production** at LHC is recognised as a substantial irreducible background for the Standard Model (SM) and Minimal Supersymmetric Standard Model (MSSM) Higgs boson search in the associated production, \(WH\), followed by the decay \(H\to b\overline{b}\). The massive matrix element for \(q\bar{q}\to Wg^{*}(\to b\overline{b})\) process has been calculated [14] and interfaced with HERWIG 5.6 Monte Carlo [15] already a few years ago. A more recent implementation of the \(Wbb\) + multi-jet final states is available from [16]. Recently, the massless matrix element has been implemented in the general purpose Monte Carlo program MCFM [17], where the radiative corrections to this process are also addressed. Another implementation of the \(q\bar{q}\to W(\to\ell\nu)g^{*}(\to b\overline{b})\) massive matrix elements, with the interface to PYTHIA 6.1 became available in [7]. The **AcerMC** library discussed here includes even more efficient implementation of the algorithm presented in [7].

**The \(Wt\overline{t}\) production** at LHC has to our knowledge not been implemented in the publicly available code so far2. It is of interest because it contributes an overwhelming background [18] for the measurement of the Standard Model Higgs self-couplings at LHC in the most promising channel \(pp\to HH\to WWWW\).

Footnote 2: We thank M. L. Mangano for bringing this process to our attention and for providing benchmark numbers for verifying the total cross-section.

**The \(Z/\gamma^{*}(\to\ell\ell)b\overline{b}\) production** at LHC has since several years been recognised as one of the most substantial irreducible (or reducible) backgrounds for the several Standard Model (SM) and Minimal Supersymmetric Standard Model (MSSM) Higgs boson decay modes as well as for observability of the SUSY particles. There is a rather wide spectrum of _regions of interest_ for this background. In all cases the leptonic \(Z/\gamma^{*}\) decay is asked for, but events with di-lepton invariant mass around the mass of the Z-boson mass or with the masses above or below the resonance peak could be of interest. The presented process enters an analysis either by the accompanying b-quarks being tagged as b-jets, or by the presence of leptons from the b-quark semi-leptonic decays in these events, in both cases thus contributing to the respective backgrounds.

Good understanding of this background, and having a credible Monte Carlo generator available, which allows studying of expected acceptances for different final states topologies, is crucial. Despite a very large effort taken in time of the preparation of the Aachen Workshop [19], such well established Monte Carlo generator was missing for several years. The matrix element for the \(gg\to Zb\bar{b}\to b\bar{b}\ell\ell\) production has been published already in [20] and in time of Aachen Workshop implemented into EUROJET Monte Carlo [21]. But that generator was not giving the possibility for having fully generated hadronic event with modelled initial and final state radiation and hadronisation, for analyses presented in [22] it was interfaced to PYTHIA 5.6[23] Monte Carlo. This is no longer supported and available at present. The same matrix element has been directly implemented into PYTHIA 5.7[23]. However, with this implementation the algorithm for the phase space generation never working credibly, it has finally been removed from the version PYTHIA 6.1[24]. A year ago, the massless matrix elements for \(gg,q\bar{q}\to Zb\bar{b}\) processes have been implemented in the general purpose Monte Carlo program MCFM[17]. In that implementation radiative corrections to this process are addressed as well. The massive matrix element implementation is also present in the very recent version of HERWIG 6.3[2]. At that time the \(gg,q\bar{q}\to Z/\gamma^{*}b\bar{b}\to\ell\ell b\bar{b}\) massive matrix elements, with the interface to PYTHIA 6.1 became available [8]. The **AcerMC** library discussed here includes more efficient implementation of the algorithm presented in [8].

**The \(Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b})t\bar{t}\) production at LHC is an irreducible background to the Higgs search in the invisible decay mode (case of \(Z\to\nu\nu\)) in the production with association to the top-quark pair [25]. With the \(Z/\gamma^{*}(\to b\bar{b})\) it is also an irreducible resonant background to the Higgs search in the \(t\bar{t}H\) production channel but with the Higgs boson decaying to the b-quark pair [13].**

The complete **EW production** of the \(gg\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) final state is also provided. It can be considered as a benchmark for the previous process, where only the diagrams with resonant \(gg\to(Z/\gamma^{*}\to)b\bar{b}t\bar{t}\) are included. It thus allows the verification of the question, whether the EW resonant contribution is sufficient in case of studying the \(t\bar{t}b\bar{b}\) background away from the Z-boson peak, like for the \(t\bar{t}H\) with Higgs-boson mass of 120 GeV.

This completes the list of the native **AcerMC** processes implemented so far. Having all these different production processes implemented in the consistent framework, which can also be directly used for generating standard subprocesses implemented in either PYTHIA or HERWIG Monte Carlo, represents a very convenient environment xor several phenomenological studies dedicated to the LHC physics.

For the cases, where radiative photon emission from final state leptons is important the package PHOTOS[26] can be used in the chain of event generation. In similar way also package TAUOLA[27] can be interfaced directly to the generation chain and used for events generation in cases where more detailed treatment of the tau-lepton decay and including spin correlations effects is relevant.

In the following subsections we discuss in more detail implementation of each subprocess. We also give benchmark Tables with the total cross-sections obtained with AcerMC processes but different implementations and setting of \(\alpha_{\rm QCD}(Q_{QCD})\): the native AcerMC, PYTHIA and HERWIG ones. For a more detailed discussion on this topic the reader is referred to Section 4.3. If the native **AcerMC** definition is used, the same cross-section is obtained either with PYTHIA or HERWIG generation chains.

### The \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) processes

In the implementation discussed here, the matrix element was derived using the MADGRAPH package [6]. These matrix elements are not covering the decay of the top-quarks, the latter are considered as massive final states of the process. The top-quark decays is than performed by the supervising generator. Rather important spin effects (spin correlations) in the top decays are therefore not yet included. The similar solution, like for tau decay in the Z-boson production process discussed in [28], is planned to be implemented here in the near future.

As a benchmark, the processes \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) have been simulated for pp collisions with 14 TeV centre-of-mass energy and CTEQ5L [29] parton density functions, using event generation with massive \(2\to 4\) matrix element implemented as an external process to PYTHIA 6.2 (see Section 4 and 5). The decays of the top-quarks have been left under control of PYTHIA 6.2 generator. The \(q\bar{q}\to t\bar{t}b\bar{b}\) subprocess contributes less than 10% of the total cross-section.

The total cross-section is very sensitive to the choice of the QCD energy scale used for calculation of that process, thus indicating potentially large contributions from higher order corrections. The same definition for the factorisation and renormalisation scale is used. The example values of the total cross-section for implemented choices of the QCD energy scale are given in Table 1.

As a cross-check, the processes \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) have been coded independently using the COMPHEP package [30]. The same set of diagrams was selected and only the integrating part of the package was used to calculate total cross-section. The choices for the QCD energy scale were kept consistent. A very good agreement between the cross-sections obtained with two independent calculation streams prepared for this study has been achieved [9].

One can observe a very strong scale dependence of the cross-section for the \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) process (c.f. Table 1). Factor four (!!) can be expected on the predicted cross-section when changing from the scale \(Q_{QCD}^{2}\ =\ \hat{s}\) to the scale \(Q_{QCD}^{2}\ =\ \ <p_{T}^{2}>\). This very strong dependence on the energy scale is also observed in the case of the \(t\bar{t}H\) production, for recent discussion see [31]. There, the recommended _central_ factorisation and renormalisation energy scale is \(\mu_{0}\ =\ (m_{t}+m_{H}/2)\). Having in mind that the primary interest of evaluating this background is the Higgs search in the \(t\bar{t}H\) production, i.e. with the b-quark system being produced with the invariant mass of the expected Higgs boson, we have also introduced this _central_ energy scale, with \(m_{H}\ =\ 120\ {\rm GeV}\) as one of the possible choices.

Fig. 1 shows the distributions of the \(Q_{QCD}=\sqrt{Q_{QCD}^{2}}\) (distributions have been normalised to one) for the \(t\bar{t}b\bar{b}\) events with the invariant mass of the b-jets system, calculated using the default PYTHIA (LO) \(\alpha_{\rm QCD}\) implementation3. \(m_{bb-jets}\ =\ 120\ \pm\ 30\ {\rm GeV}\). The distribution is well collimated around the

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(a_{QCD}\) (1L) & \(a_{QCD}\) (1L) & \(a_{QCD}\) (2L) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.3 \\ \hline \hline  & \multicolumn{3}{|c|}{\(gg\to t\bar{t}b\bar{b}\)} \\ \hline \(Q_{QCD}^{2}\ =\ \hat{s}\) & 4.2 \(|\)pb\(|\) & 3.9 \(|\)pb\(|\) & 2.7 \(|\)pb\(|\) \\ \hline \(Q_{QCD}^{2}\ =\ \sum\ ({p_{T}^{2}}^{2}+m_{1}^{2})/4\) & 10.3 \(|\)pb\(|\) & 10.2 \(|\)pb\(|\) & 6.4 \(|\)pb\(|\) \\ \hline \(Q_{QCD}^{2}\ =\ \sum\ ({p_{T}^{2}}^{2})/4\) & 17.0 \(|\)pb\(|\) & 16.9 \(|\)pb\(|\) & 10.1 \(|\)pb\(|\) \\ \hline \(Q_{QCD}^{2}\ =\ (m_{t}+m_{H}/2)^{2}\) & 8.2 \(|\)pb\(|\) & 8.1 \(|\)pb\(|\) & 5.2 \(|\)pb\(|\) \\ \hline \hline  & \multicolumn{3}{|c|}{\(q\bar{q}\to t\bar{t}b\bar{b}\)} \\ \hline \(Q_{QCD}^{2}\ =\ \hat{s}\) & 0.30 \(|\)pb\(|\) & 0.29 \(|\)pb\(|\) & 0.20 \(|\)pb\(|\) \\ \hline \(Q_{QCD}^{2}\ =\ \sum\ ({p_{T}^{2}}^{2}+m_{1}^{2})/4\) & 0.61 \(|\)pb\(|\) & 0.60 \(|\)pb\(|\) & 0.38 \(|\)pb\(|\) \\ \hline \(Q_{QCD}^{2}\ =\ \sum\ ({p_{T}^{2}}^{2})/4\) & 0.91 \(|\)pb\(|\) & 0.90 \(|\)pb\(|\) & 0.54 \(|\)pb\(|\) \\ \hline \(Q_{QCD}^{2}\ =\ (m_{t}+m_{H}/2)^{2}\) & 0.52 \(|\)pb\(|\) & 0.51 \(|\)pb\(|\) & 0.33 \(|\)pb\(|\) \\ \hline \hline \end{tabular}
\end{table}
Table 1: **AcerMC**_cross-sections for the \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) production at different choices of the QCD energy scale and \(\alpha_{QCD}\) implementations. The 14 TeV centre-of-mass energy and CTEQ5L parton density functions were used for the simulation with interfaces to PYTHIA 6.2 and HERWIG 6.3. The \(m_{H}\ =\ 120\) GeV and \(m_{t}\ =\ 175\) GeV were used for calculating the \(Q_{QCD}^{2}\) in the last row of this table. The default settings of \(\alpha_{QCD}\) as implemented in_**AcerMC**_, PYTHIA 6.2 and HERWIG 6.3 were used._average value when \(Q_{QCD}^{2}\) is defined as \(<m_{T}^{2}>\) or \(<p_{T}^{2}>\) while it is much broader when \(Q_{QCD}^{2}\) is defined as \(\hat{s}\). The kinematic distributions are very similar in shape for separate \(gg\to t\bar{t}b\bar{b}\) and \(q\bar{q}\to t\bar{t}b\bar{b}\) contributions. The total cross-section for accepted events as a function of the averaged \(Q_{QCD}^{2}\) (for these events) is shown in the bottom plot. It can be noted that the cross-section decreases rather fast with the increasing value of the average \(<Q_{QCD}^{2}>\). Also shown is the \(\alpha_{s}^{4}(Q_{QCD})\) dependence scaled to match the cross-section at \(Q_{QCD}=(m_{H}/2+m_{t})\) with \(m_{H}=120\) GeV, it being the only calculated cross-section point with a fixed scale. The other cross-sections are shown to follow the expected \(\alpha_{s}^{4}(Q_{QCD})\) dependence rather well, while the deviations are induced by the parton density function dependence on the \(Q_{QCD}^{2}\) scale, most notably at \(Q_{QCD}^{2}=\hat{s}\) value. The deviations induced by the parton density functions dependence on the \(Q_{QCD}^{2}\) scale are different for the \(gg\) and \(q\bar{q}\) contributions, as can be concluded from results given in Table 1.

The series of plots illustrating the most relevant differential distributions for the top-quarks and b-quarks can be found in [9].

Figure 1: _Top: the \(Q_{QCD}^{2}\) distributions for \(t\bar{t}b\bar{b}\) events with the invariant mass of the b-jets system \(m_{bb-jets}=120\ \pm\ 30\) GeV. Bottom: the total cross-section of accepted events as a function of the averaged \(Q_{QCD}^{2}\) (for these events)._

### The \(q\bar{q}\to W(\to\ell\nu)g^{*}(\to b\bar{b})\) process

The matrix element for the implemented process was again coded by using the MADGRAPH package [6]. This process is represented by only two Feynman diagrams, with quark exchange in the t-channel, leading to the production of the \(W\)-boson and virtual gluon splitting into \(b\bar{b}\) pair. Only the \(u,d,s,c\) quarks were considered in this implementation, the possibility of the b-quark in the initial state was omitted as expected to be negligible numerically (e.g. \(|V_{bc}/V_{ud}|^{2}\sim 0.002\)) but leading to several additional diagrams which would have to be included. The massive matrix element takes into account spin correlations in the W-boson decay and angular correlations between leptons and quarks. Due to the massive treatment of the final state fermions the amplitude has no singularities; the total cross-section is well defined. The effect from the \(W\)-boson natural width and the \(W\)-boson propagator are also properly included.

As a benchmark, the process \(q\bar{q}\to W(\to\ell\nu)g^{*}(\to b\bar{b})\) has been simulated for pp collision with 14 TeV centre-of-mass energy. The total cross-section, including branching ratio for \(W\to\ell\nu\) (single flavour) is 36.5 pb (CTEQ5L parton density functions, \(Q^{2}=M_{W}^{2}\), PYTHIA 6.2 interface)4.

Footnote 4: This can be compared with the matrix element implementation to HERWIG 5.6, used in [33],[34], where originally this cross-section was estimated to 19.8 pb (CTEQ2L parton density functions) but, when implementing CTEQ5L parton density functions and setting kinematic parameters to be in approximate accordance with PYTHIA defaults, rises to 36.0 pb, which is consistent with the AcerMC implementation by taking into account the remaining differences in the two calculations (e.g. the former implementation uses an on-shell W boson in the ME calculation).

The dependence on the choice of the factorisation scale is rather modest (c.f. Table 2) and does not exceed 20% for the choices implemented in **AcerMC**library. The variation of the cross-section due to different \(\alpha_{QED}\) and \(\alpha_{QCD}\) implementations and default settings is again evident; as one can expect the two-loop\(\alpha_{QCD}\) implementation given in HERWIG gives a \(\sim\)20 % lower cross-section when compared to the cases when native **AcerMC** and PYTHIA one-loop\(\alpha_{QCD}\) were used5.

Footnote 5: While performing further comparisons of native **AcerMC** and PYTHIA processes we discovered a misinterpretation of our CKM matrix implementation. This correction effectively changes the cross-section for \(q\bar{q}\to Wb\bar{b}\) and \(q\bar{q}\to Wt\bar{t}\) processes by \(\sim\)10% compared to the draft versions of this paper, which is nevertheless still well within the physics precision of the program. The affected tables in this paper are already updated.

The differential distributions of the \(q\bar{q}\to Wb\bar{b}\) events turn out to be interesting when compared to the corresponding ones of the \(q\bar{q}\to Zb\bar{b}\) and \(gg\to Zb\bar{b}\) events (generated with pure Z-boson exchange). Such comparison is well documented in [8].

### The \(q\bar{q}\to W(\to\ell\nu)g^{*}(\to t\bar{t})\) process

The matrix elements, coded by the MADGRAPH package [6], are not covering the decay of the top-quarks; the latter are considered as massive final states of the process. The top decay is than performed by the supervising generator. As in the case of \(gg,q\bar{q}\to t\bar{t}b\bar{b}\) process spin effects in the top decays are therefore not yet included. This process, although rare, contributes an overwhelming irreducible background to possible measurement of the Higgs-boson self-coupling in the \(HH\to WWWW\) decay mode[18].

Table 3 shows the expected **AcerMC** cross-sections for different choices of the energy scale and coupling (\(\alpha_{QED}\), \(\alpha_{QCD}\)) definitions. One should notice the effect of almost a factor two from different choices of the energy scale.

**AcerMC**_production cross-sections for the \(q\bar{q}\to Wit\bar{t}\) with primary \(W\to e\nu\) decay (single flavour). The 14 TeV centre-of-mass energy, CTEQ5L parton density functions with different factorisation scales and different definitions of the \(\alpha_{QED}\) and \(\alpha_{QCD}\) were used in the matrix element calculations._

\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED}\), \(\alpha_{QCD}\) (1L) & \(\alpha_{QED}\), \(\alpha_{QCD}\) (1L) & \(\alpha_{QED}\), \(\alpha_{QCD}\) (2L) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.3 \\ \hline \(Q_{QCD}^{2}\ =\ M_{W}^{2}\) & 69.3 \(\rm{\,fb}\) & 69.1 \(\rm{\,fb}\) & 56.0 \(\rm{\,fb}\) \\ \hline \(Q_{QCD}^{2}\ =\ s_{t,\tau}^{*}\) & 40.9 \(\rm{\,fb}\) & 39.9 \(\rm{\,fb}\) & 33.9 \(\rm{\,fb}\) \\ \hline \(Q_{QCD}^{2}\ =\ M_{W}^{2}+pT_{W}^{2}\) & 59.7 \(\rm{\,fb}\) & 59.5 \(\rm{\,fb}\) & 48.8 \(\rm{\,fb}\) \\ \hline \(Q_{QCD}^{2}\ =\ (s_{W}^{*}+s_{t}^{*})/2+pT_{W}^{2}\) & 43.7\(\rm{\,fb}\) & 42.8 \(\rm{\,fb}\) & 36.0 \(\rm{\,fb}\) \\ \hline \hline \end{tabular}

Footnote 5: While performing further comparisons of native **AcerMC** and PYTHIA processes we discovered a misinterpretation of our CKM matrix implementation. This correction effectively changes the cross-section for \(q\bar{q}\to Wb\bar{b}\) and \(q\bar{q}\to Wt\bar{t}\) processes by \(\sim\)10% compared to the draft versions of this paper, which is nevertheless still well within the physics precision of the program. The affected tables in this paper are already updated.

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline \hline Factorisation scale & \(\alpha_{QED}\), \(\alpha_{QCD}\) (1L) & \(\alpha_{QED}\), \(\alpha_{QCD}\) (1L) & \(\alpha_{QED}\), \(\alpha_{QCD}\) (2L) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.3 \\ \hline \(Q_{QCD}^{2}\ =\ M_{W}^{2}\) & 69.3 \(\rm{\,fb}\) & 69.1 \(\rm{\,fb}\) & 56.0 \(\rm{\,fb}\) \\ \hline \(Q_{QCD}^{2}\ =\ s_{t,\tau}^{*}\) & 40.9 \(\rm{\,fb}\) & 39.9 \(\rm{\,fb}\) & 33.9 \(\rm{\,fb}\) \\ \hline \(Q_{QCD}^{2}\ =\ M_{W}^{2}+pT_{W}^{2}\) & 59.7 \(\rm{\,fb}\) & 59.5 \(\rm{\,fb}\) & 48.8 \(\rm{\,fb}\) \\ \hline \(Q_{QCD}^{2}\ =\ (s_{W}^{*}+s_{t}^{*})/2+pT_{W}^{2}\) & 43.7\(\rm{\,fb}\) & 42.8 \(\rm{\,fb}\) & 36.0 \(\rm{\,fb}\) \\ \hline \hline \end{tabular}
\end{table}
Table 3: **AcerMC**_production cross-sections for the \(q\bar{q}\to Wt\bar{t}\) with primary \(W\to e\nu\) decay (single flavour). The 14 TeV centre-of-mass energy, CTEQ5L parton density functions with different factorisation scales and different definitions of the \(\alpha_{QED}\) and \(\alpha_{QCD}\) were used in the matrix element calculations._

### The \(\boldsymbol{gg},\boldsymbol{q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)b\bar{b}}\) processes

The matrix elements, derived using the MADGRAPH package [6], properly take into account spin correlations in the Z-boson decay and angular correlations between leptons and quarks. Thank to keeping non-zero b-quark masses the amplitude has no singularities; the total cross-section is well defined.

The full \(Z/\gamma^{*}\) exchange proves to be important: For events well below the Z-boson resonance the contribution from \(\gamma^{*}\) becomes dominant; the \(\gamma^{*}\) contribution is also sizeable in the high mass tail and increases proportionally with the effective mass of the di-lepton system.

As a benchmark result, the process has been simulated for pp collisions at 14 TeV centre-of-mass energy. The total cross-sections, including the branching ratio for \(Z/\gamma^{*}\to\ell\ell\) (single flavour) are given in Table 4 for different definitions of \(\alpha_{QED}\), \(\alpha_{QCD}\) couplings.

Several differential benchmark distributions for leptons and b-quarks originating from the hard process has been collected and discussed in [7].

The \(\boldsymbol{gg},\boldsymbol{q\bar{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b} )t\bar{t}}\) processes

This process, in spite of having a very small cross-section at LHC energies, contributes as irreducible background to the \(t\bar{t}H\) production at low masses. In case the Higgs boson is searched within the \(H\to b\bar{b}\) mode, this contribution becomes less and less important with the Higgs boson mass moving away from the Z-boson mass. In case of the Higgs-boson search in the invisible decaying mode, the \(Z\to\nu\nu\) might be more relevant also for the higher masses, as themass peak cannot be reconstructed for signal events. The \(Z/\gamma^{*}\to\ell\ell\) decay is of less interest, as the expected observability at LHC is very low (c.f. Table 5).

### The electroweak \(gg\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) process

One should be well aware, that the \(gg,q\bar{q}\to Z/\gamma^{*}t\bar{t}\) with \(Z/\gamma^{*}\to b\bar{b}\) does not represent a complete electroweak production of the \(t\bar{t}b\bar{b}\) final state. Consequently, a separate implementation for generation of the complete set of such diagrams (including as well W-boson exchange) was addressed. In fact this final state leads to complicated pattern of the 72 Feynman diagrams.

The contribution from all non-resonant channels is a dominant one for the inclusive cross-section, see Table 6. An almost factor 10 higher cross-section is calculated with the full electroweak \(gg\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) with respect to calculated with the \(gg\to(Z/\gamma^{*}\to b\bar{b})t\bar{t}\) process only. The interesting region for the background estimates to the Higgs searches is the one with the mass of the \(b\bar{b}\) system around 120 GeV, see Fig. 2. This contribution was not included in results discussed in [10],[13], so these analyses will require revisiting. One should also note that the electroweak \(gg\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) inclusive cross-section is on the level of 10% of the QCD \(gg\to b\bar{b}t\bar{t}\) cross-section, see Table 1, for the same choice of the energy scale. But in the mass range around 120 GeV it is on the level of 50% of the QCD contribution, as clearly indicated in Fig. 2.

The implementation of the EW \(q\bar{q}\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) is still lacking but will be added in the near future. One could expected, on the base of cross-sections in Table 5, that the contribution from the quark-antiquark

\begin{table}
\begin{tabular}{|c|c|c|c|} \hline Factorisation scale & \(\alpha_{QED}\), \(\alpha_{QCD}(1L)\) & \(\alpha_{QED}\), \(\alpha_{QCD}(1L)\) & \(\alpha_{QED}\), \(\alpha_{QCD}(2L)\) \\  & native AcerMC & as in PYTHIA 6.2 & as in HERWIG 6.3 \\ \hline \hline  & \multicolumn{3}{|c|}{\(gg\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\)} \\ \hline \(Q^{2}_{QCD}~{}=~{}\hat{s}\) & 0.58 \(|\)pb\(|\) & 0.56 \(|\)pb\(|\) & 0.71 \(|\)pb\(|\) \\ \hline \(Q^{2}_{QCD}~{}=~{}\sum{({p_{T}^{1}}^{2}+{m_{i}^{2}})/4}\) & 1.10 \(|\)pb\(|\) & 1.05 \(|\)pb\(|\) & 0.84 \(|\)pb\(|\) \\ \hline \(Q^{2}_{QCD}~{}=~{}\sum{({p_{T}^{1}}^{2})/4}\) & 1.50 \(|\)pb\(|\) & 1.50 \(|\)pb\(|\) & 1.16 \(|\)pb\(|\) \\ \hline \(Q^{2}_{QCD}~{}=~{}({m_{t}}+{m_{H}}/{2})^{2}\) & 0.90 \(|\)pb\(|\) & 0.89 \(|\)pb\(|\) & 0.71 \(|\)pb\(|\) \\ \hline \hline  & \multicolumn{3}{|c|}{\(gg\to(Z/\gamma^{*}\to b\bar{b})t\bar{t}\)} \\ \hline \(Q^{2}_{QCD}~{}=~{}M_{Z}^{2}\) & 0.092 \(|\)pb\(|\) & 0.092 \(|\)pb\(|\) & 0.071 \(|\)pb\(|\) \\ \hline \hline \end{tabular}
\end{table}
Table 6: **AcerMC** _[roduction cross-sections for the electroweak \(gg\to(Z/W/\gamma^{*}\to)b\bar{b}t\bar{t}\) and only for the resonant gg \(\to(Z/\gamma^{*}\to b\bar{b})t\bar{t}\). The 14 TeV centre-of-mass energy and CTEQ5L parton density functions were used along with different definitions for the \(\alpha_{QED}\), \(\alpha_{QCD}\) (as in native_ **AcerMC**_, default_ PYTHIA 6.2 _and_ HERWIG 6.3_). The threshold \(m_{b\bar{b}}~{}\geq~{}10\) GeV was used for generation in the resonant case. The \(m_{H}~{}=~{}120\) GeV was used for calculation of the energy scale._Monte Carlo algorithm

The conceptual motivation leading to the present implementation of **AcerMC** was to exploit the possibility of dedicated matrix-element-based generation interfaced to a more general event generator, called _supervising_ event generator, which is subsequently used to complete the event generation procedure.

The goal of the dedicated matrix-element-based part is to efficiently generate complicated event topologies using native (multi-channel based) phase space generation procedures. The strategy is based on the understanding that a case-by-case optimisation is in complex cases of phase space topologies preferable to an universal algorithm. Given that phase-space is optimised on a case-by-case basis, an user-defined pre-selection for the generated regions of the phase-space is not implemented. Due to the fact that the \(2\to 4\) matrix elements, provided by the MADGRAPH/HELAS[6] package, contain full massive treatment of the final state particles, there are no explicit divergences present for implemented processes and **AcerMC** can indeed cover the _full_ (kinematically allowed) phase space of the processes at hand.

The matrix-element-based part uses \(\alpha_{QCD}(Q^{2})\) and \(\alpha_{QED}(Q^{2})\) couplings and mass spectra, as calculated by the supervising event generator, to insure the full internal consistency in treatment of the event itself. Optionally, the native \(\alpha_{QCD}(Q^{2})\) and \(\alpha_{QED}(Q^{2})\) definitions can also be invoked.

The generation chain is built from the following steps:

* The PYTHIA 6.2 or HERWIG 6.3 interfaces to the library of the structure functionsPDFLIB 8.04[39] are used to calculate convolution of the partonic density.
* **AcerMC** modules produce unweighted hard-process events with colour flow information and pass them to the supervising generator PYTHIA 6.2 or HERWIG 6.3 as an external event.
* The generated events are then further treated within PYTHIA 6.2 or HERWIG 6.3 event generators, where the fragmentation and hadronisation procedures, as well as the initial and final state radiation are added and final unweighted events are produced.

The **AcerMC** efficiency6 for generating unweighted events, using the implementation of the phase-space generation discussed below, is summarised in Table 7. A certain (very small) fraction of events is further rejected in the showering/fragmentation procedures of the supervising generators.

In the following we will briefly describe the key points of the implemented **AcerMC** modules and developed algorithms: matrix element calculations, four-fermion phase-space generation, the issue of the \(\mathfrak{s}\)-dependent width for resonances, unitary generation of multiipheral topology, and finally, the modification of the VEGAS algorithm.

### The Matrix Element Calculation

The squared matrix elements of the processes were obtained by using the MADGRAPH/HELAS[6] package. They take properly into account the masses and helicity contributions of final states particles, incoming quarks are considered as massless. The particle masses, charges and coupling values that are passed to the code derived with the MADGRAPH package are calculated from functions consistent with the ones used in supervising generators (PYTHIA/HERWIG). This allows to preserve the internal consistency of the event generation procedure. In particular, the (constant) coupling values of \(\alpha_{s}\) and \(\alpha_{\rm QED}\) were replaced with the appropriate running functions that were either taken from the interfaced generators or provided by the **AcerMC** code according to user settings. Slightly modified MADGRAPH/HELAS allowed for obtaining colour flow information of the implemented processes.

The sets of the MADGRAPH/HELAS coded diagrams, for each of the implemented processes, are collected in Appendix A.

\begin{table}
\begin{tabular}{|c|c|c|} \hline \hline Process & Description & Internal AcerMC efficiency \\ \hline \hline
[1] & \(gg\to t\overline{t}b\overline{b}\) & 20.2 \% \\ \hline
[2] & \(q\overline{q}\to t\overline{t}b\overline{b}\) & 26.3 \% \\ \hline
[3] & \(q\overline{q}\to W(\to\nu\ell)b\overline{b}\) & 33.0 \% \\ \hline
[4] & \(q\overline{q}\to W(\to\nu\ell)t\overline{t}\) & 25.2\% \\ \hline
[5] & \(gg\to Z/\gamma^{*}(\to\ell\ell)b\overline{b}\) & 33.0 \% \\ \hline
[6] & \(q\overline{q}\to Z/\gamma^{*}(\to\ell\ell)b\overline{b}\) & 29.7 \% \\ \hline
[7] & \(gg\to Z/\gamma^{*}(\to f\overline{f},\nu\nu)t\overline{t}\) & 28.2 \% \\ \hline
[8] & \(q\overline{q}\to Z/\gamma^{*}(\to f\overline{f},\nu\nu)t\overline{t}\) & 34.6 \% \\ \hline
[9] & \(gg\to(Z/W/\gamma^{*}\to)t\overline{t}b\overline{b}\) & 11.2 \% \\ \hline \hline \end{tabular}
\end{table}
Table 7: _Efficiency for the generation of unweighted events with the default definition of the energy scale (see Section 6.6 for details). For generation of the \(q\overline{q},gg\to Z/\gamma^{*}(\to\ell\ell)b\overline{b}\) and \(q\overline{q},gg\to Z/\gamma^{*}(\to\ell\ell)t\overline{t}\) events threshold \(m_{\ell\ell}\ \geq\ 60\) GeV has been used. For generating \(gg\to(Z/W/\gamma^{*}\to)t\overline{t}b\overline{b}\) central energy scale was used. The \(f=e,\mu,\tau,b\)._

### The Four Fermion Phase Space Generation

The four-fermion phase space for the implemented processes was modelled using the importance sampling technique based on the procedures implemented in the \(e^{+}e^{-}\) event generators FERMISV[35], EXCALIBUR[36] and NEXTCALIBUR[37]. For each implemented process a sequence of different kinematic diagrams (_channels_) modelling the expected event topologies was constructed and the relative weights between contributions of each sampling channel were subsequently obtained by using the multi-channel self-optimising approach[38]. Eventually, additional smoothing of the phase space was obtained by using a modified VEGAS routine to improve the generation efficiency.

The procedure of multi-channel importance sampling used in the event generation can briefly be outlined as follows. An analytically integrable function \(g(\vec{\Phi})\), which aims to approximate the peaking behaviour of the differential cross-section dependence on various kinematic quantities is introduced into the differential cross-section equation as:

\[d\sigma=s(\vec{\Phi})\,d\vec{\Phi}=\frac{s(\vec{\Phi})}{g(\vec{\Phi})}\cdot g (\vec{\Phi})\,d\vec{\Phi}=w(\vec{\Phi})\,g(\vec{\Phi})\,d\vec{\Phi}, \tag{1}\]

where the \(d\vec{\Phi}\) denotes the (four-)particle phase space and the \(s(\vec{\Phi})\) summarises the matrix element, flux and parton density functions, which all depend on the chosen phase space point. The function \(g(\vec{\Phi})\) has to be a normalised probability density:

\[\int g(\vec{\Phi})d\vec{\Phi}=1. \tag{2}\]

Since the peaking behaviour of \(s(\vec{\Phi})\) can be very complex due to several possible topologies introduced by a large number of contributing Feynman diagrams, the function \(g(\vec{\Phi})\) is composed as a weighted sum of several channels \(g_{i}(\vec{\Phi})\), each adapted to a certain event topology:

\[g(\vec{\Phi})=\sum_{i}\alpha_{i}\cdot g_{i}(\vec{\Phi}). \tag{3}\]

The values of relative weights \(\alpha_{i}\) are determined from multi-channel self-optimisation procedure in order to minimise the variance of the weights \(w(\vec{\Phi})\)[38]. The phase space points are than sampled from the function \(g(\vec{\Phi})\), first by randomly choosing a channel \(i\) according to the relative frequencies \(\alpha_{i}\) and then deriving the required four momenta from the chosen \(g_{i}(\vec{\Phi})\) using unitary7 algorithms[35].

In order to have a closer look at the event generation steps, one first has to write down the generic differential cross-section formula:

\[d\sigma=\sum_{a,b}f_{a}(x_{1},Q^{2})f_{b}(x_{2},Q^{2})\frac{|{\cal M}|^{2}}{(2 \pi)^{8}(2\hat{s})}dx_{1}dx_{2}d\vec{\Phi}, \tag{4}\]

where \(f_{a,b}(x,Q^{2})\) represent the gluon or (anti)quark parton density functions, \(|{\cal M}|^{2}\) the squared matrix element divided by the flux factor \(2\hat{s}\) and \(d\vec{\Phi}\) denotes the phase space differential. The quantity \(\hat{s}=x_{1}\,x_{2}\,s\) is the effective centre-of-mass energy, and the sum \(\sum_{a,b}\) runs in case of quark-antiquark incident partons over all possible quark-antiquark combinations (\(a,b=u,d,s,c,\vec{u},\vec{d},\vec{s},\vec{c}\)). In case of \(gg\) initial state the sum has only one term with \(a=b=g\).

Alternatively, in order to use the PDFLIB built-in structure functions \(xf(x,Q^{2})\), it is convenient to rewrite the differential cross-section to the form:

\[d\sigma=\sum_{a,b}x_{1}f_{a}(x_{1},Q^{2})\ x_{2}f_{b}(x_{2},Q^{2})\frac{|{\cal M }_{ab}|^{2}}{(2\pi)^{8}(2s)}dy\frac{d\tau}{\tau^{2}}d\vec{\Phi}, \tag{5}\]

with the two new variables given by \(\tau=x_{1}\cdot x_{2}\) and \(y=0.5\log(x_{1}/x_{2})\). The matrix element used in the calculation depends explicitly on the four-momenta of the incoming and outgoing partons:

\[{\cal M}_{ab}={\cal M}_{ab}(q_{1},q_{2},p_{1},p_{2},p_{3},p_{4}), \tag{6}\]

where the \(p_{i}\) represent the four-momenta of the final state particles and \(q_{1},q_{2}\) the four-momenta of the incident partons. Consequently, all the four-momenta have to be explicitly generated.

While generating events with (anti-)quarks in the initial state, an additional step is required to pick the flavours of the incoming pair. The selection is again done using importance sampling, using as sampling weights:

\[\lambda_{i}=x_{1}f_{q_{i}}(x_{1},Q^{2})\cdot x_{2}f_{\vec{q}_{1}}(x_{2},Q^{2} )\cdot|{\cal M}_{i}|^{2}, \tag{7}\]

where the index \(i\) runs over all possible quark-antiquark combinations. When the matrix element of the hard scattering process is for a given processes independent of the incoming quark flavour, it is excluded from the above weights for the sake of simplicity (note that the incoming quarks are treated as massless so only flavour/(weak-)isospin dependent couplings can introduce the flavour dependence of the \(|{\cal M}_{i}|^{2}\) term).

Only four flavours (\(u,d,s,c\)) of the incoming quarks are considered at the moment, the contributions of the incoming \(b\) quarks are excluded from cal culation due to the very high suppression induced by either the structure functions and/or CKM matrix suppression.

In the event generation procedure, a generation channel is thus chosen by weighted sampling using a (pre-determined) set of \(\alpha_{i}\). Next, the values of \(\tau\) are sampled from a distribution:

\[\frac{1}{(\tau)^{\mu}}\hskip 28.452756pt\mu\sim 1, \tag{8}\]

and \(y\) from the distribution

\[\frac{1}{\cosh(\nu\ y)}\hskip 28.452756pt\nu\sim 1, \tag{9}\]

as also used in PYTHIA standard phase-space algorithm [23]. From the two values \(x_{1}\) and \(x_{2}\), the momenta \(q_{1},q_{2}\) of incoming particles and the effective centre-of-mass energy \(\sqrt{\hat{s}}\) are derived. In the following step, the four momenta of the final state particles \(p_{i}\) are sampled by re-parametrising the general four-body phase space:

\[d\vec{\Phi}=\left(\prod_{i=1}^{4}d^{4}p_{i}\delta(p_{i}^{2}-m_{i}^{2})\theta(p_ {i}^{0})\right)\delta^{4}(q_{1}+q_{2}-\sum_{i=1}^{4}p_{i}). \tag{10}\]

in terms of kinematic variables that are expected to exhibit the strongest peaking behaviour for a specific channel topology and consequently introducing appropriate sampling functions for these variables.

The modelling of kinematic channels relies heavily on the procedures developed in NEXTCALIBUR program [37]; nevertheless, many additions and improvements were made. Two examples of the extended/added procedures used in **AcerMC** are given below.

The detailed description of the implementations of four-momenta sampling in all existing kinematic channels is omitted for the sake of brevity; the two examples below should serve as a representative illustration.

Subsequently, the four-momenta constructed from the obtained set of kinematic variables are used in the matrix element calculation. Each event is further weighted by the appropriate phase space weight corresponding to the importance sampling procedure and calculated using the unitary algorithms; for further details on the applied method and unitary algorithms the reader is referred to the original papers (e.g. [35, 37]).

#### 4.2.1 Breit-Wigner Function with s-dependent Width

In some topologies of the processes involving \(W^{\pm}\) or \(Z^{0}\) bosons, a bias of the matrix element towards large values in the high \(s^{*}_{W/Z}\) region is evident, which in turn means that a more accurate description of the tails of \(s^{*}_{W/Z}\) distribution is needed. Consequently, the Breit-Wigner sampling function was replaced by8:

Footnote 8: To our knowledge this implementation is original and done for the first time in **AcerMC**.

\[BW_{s}(s^{*}_{W})=\frac{s^{*}_{W}}{(s^{*}_{W}-M^{2}_{W})^{2}+M^{2}_{W}\Gamma^{2 }_{W}}, \tag{11}\]

which is proportional to the (more accurate) Breit-Wigner function with an \(s^{*}_{W}\) dependent width (W in the above formula denotes either a \(W^{\pm}\) or a \(Z^{0}\) boson).

In order to implement a unitary algorithm (an algorithm that produces a result for every trial, i.e. there is no rejection) of value sampling on the above function one first has to calculate the normalisation integral (cumulant) and then its inverse function. Introducing a new variable \(\eta=(s^{*}_{W}-M^{2}_{W})/(M_{W}\ \Gamma_{W})\) the integral of the above function can be expressed as:

\[\int BW_{s}(s^{*}_{W})\ ds^{*}_{W}=\int\biggl{\{}\frac{M^{2}_{W}}{M_{W}\Gamma_{ W}}\cdot\frac{1}{1+\eta^{2}}+\frac{\eta}{1+\eta^{2}}\biggr{\}}\ d\eta, \tag{12}\]

where the upper integral limit is left as a free parameter. The integral thus gives a function:

\[F(\eta)=\biggl{\{}\frac{M^{2}_{W}}{M_{W}\Gamma_{W}}\cdot\mbox{atan}(\eta) \biggr{\}}+\biggl{\{}\frac{1}{2}\cdot\log(\eta^{2}+1)\biggr{\}},=F_{1}(\eta)+ F_{2}(\eta) \tag{13}\]

with \(F(\eta_{\mbox{\scriptsize max}})-F(\eta_{\mbox{\scriptsize min}})\) defining the normalisation. One of the undesirable features is that the function \(F(\eta)\) does not have a (simple) analytical inverse, which is a prerequisite for unitary sampling. Taking a closer look at the two above expressions one can quickly spot another undesirable feature, namely that the second term in the Equation 12 is an odd function of \(\eta\), which after the integration gives an even term \(F_{2}(\eta)\) in \(\eta\) in Equation 13. In other words the second term alone is neither a non-negative function nor does it have an unique inverse - one has to deal with a _negative probability_. A reasonably elegant solution to this problem has been developed and implemented here:

* One samples values of \(\eta\) by using only the first term of the above expressions (the _usual_ Breit-Wigner function).

* One then re-samples the obtained value of \(\eta\) using the full expression of Equation 12: If \(\eta\) is less than zero the value is mapped to \(-\eta\) with the probability given by Equation 12.

Why this works can quickly be deduced by looking at the Figure 3: At negative values of \(\eta\) the second term of Equation 12 gives a _negative probability_ in the region \(\eta<0\), i.e. using a simple Breit-Wigner (Cauchy) probability function too many events are generated in this region. Correspondingly, since the second term of Eq. 12 is an odd function, exactly the same fraction (distribution) of events is _missing_ in the region \(\eta>0\). By mapping events with \(\eta<0\) over the \(\eta=0\) axis one thus solves both problems at the same time. Using the above re-sampling procedure the whole approach remains unitary, i.e. no events are rejected when there are no limits set on the value of \(\eta\) or they are symmetric \(|\eta_{\min}|=\eta_{\max}\). In the contrary case, a small fraction of sampling values is rejected.

After some calculation the whole unitary procedure can thus be listed as follows:

* Calculate the kinematic limits \(\eta_{\min}\) and \(\eta_{\max}\).
* Calculate the _normalisation_ factors \(\Delta_{1}=F_{1}(\eta_{\max})-F_{1}(\eta_{\min})\), \(\Delta_{2}=F_{2}(\eta_{\max})-F_{2}(\eta_{\min})\) and \(\Delta_{s}=\Delta_{1}+\Delta_{2}\); the term \(\Delta_{2}\) can actually be negative and thus does not represent proper normalisation.
* Obtain a (pseudo-)random number \(\rho_{1}\).
* If \(\rho_{1}\leq\Delta_{2}/\Delta_{s}\) then:
* Obtain a (pseudo-)random number \(\rho_{2}\);

Figure 3: **Left** Comparisons of the two functional terms of Eq. 12 to \(\mathrm{BW}_{s}(\eta)\) given by Equation 11. Note that the scaling factor \(A\) is chosen in view of making the contributions more transparent; it is much too small compared to the real case of \(W^{\pm}/Z^{0}\) bosons.

* Construct \(\eta\) as: \[X =\Delta_{2}\cdot\,\rho_{2}+F_{2}(\eta_{\min}),\] \[\eta =\sqrt{(}e^{2X}-1),\] which is the inverse of the (normalised) cumulant \((F_{2}(\eta)-F_{2}(\eta_{\min}))/\Delta_{2}\).
* Note that the condition \(\rho_{1}\leq\Delta_{2}/\Delta_{s}\) can be fulfilled only if \(\Delta_{2}\geq 0\), which means that \(\eta_{\max}\) is positive and greater than \(\eta_{\min}\).
* Conversely, if \(\rho_{1}>\Delta_{2}/\Delta_{s}\) then:
* Obtain a (pseudo-)random number \(\rho_{2}\);
* Construct \(\eta\) as: \[X =\Delta_{1}\cdot\,\rho_{2}+F_{1}(\eta_{\min}),\] \[\eta =\tan(\frac{M_{W}\Gamma_{W}}{M_{W}^{2}}\cdot X)\] which is the inverse of the (normalised) cumulant \((F_{1}(\eta)-F_{1}(\eta_{\min}))/\Delta_{1}\).
* If the obtained \(\eta\) is less than zero then calculate the normalised probability densities: \[P_{1} =\frac{1}{\Delta_{1}}\cdot\{\frac{M_{W}^{2}}{M_{W}\Gamma_{W}} \cdot\frac{1}{1+\eta^{2}}\}\] \[P_{s} =\frac{1}{\Delta_{s}}\cdot\{\frac{M_{W}^{2}}{M_{W}\Gamma_{W}} \cdot\frac{1}{1+\eta^{2}}+\frac{\eta}{1+\eta^{2}}\}\]
* Obtain a (pseudo-)random number \(\rho_{3}\);
* If \(\rho_{3}>P_{s}/P_{1}\) map \(\eta\to-\eta\).
* If the new \(\eta\) falls outside the kinematic limits \([\eta_{\min},\eta_{\max}]\) the event is rejected.
* Note also that the last mapping can only occur if the original \(\eta\) was negative, since \(P_{s}<P_{1}\) only in the region \(\eta<0\).
* Calculate the value of \(s_{W}^{*}\) using the inverse of \(\eta\) definition: \[s_{W}^{*}=(M_{W}\ \Gamma_{W})\cdot\eta+M_{W}^{2}\] (14)

The weight corresponding to the sampled value \(\eta\) is exactly:

\[\Delta_{s}\cdot\frac{(s_{W}^{*}-M_{W}^{2})^{2}+M_{W}^{2}\Gamma_{W}^{2}}{s_{W} ^{*}}, \tag{15}\]

which is the (normalised) inverse of Equation 11 as requested.

As it turns out in subsequent generator level studies, this generation procedure gives much better agreement with the differential distributions than the _usual_ (width independent) Breit-Wigner; an example obtained for the \(q\bar{q}\to Wb\bar{b}\) process is shown in Figure 3. The evident consequence is that the unweightingefficiency is substantially improved due to the reduction of the event weights in the high \(s_{W}^{*}\) region.

#### 4.2.2 Unitary Generation of Multipherical Topology

The procedure implemented in **AcerMC** for generating events with multi-pheral topology is an extension of the three-body phase-space sampling, developed in [37] for the phase space generation in NEXTCALIBUR program (kinematic channel MULTI1, Appendix A). In order to describe the features implemented in the extension of that procedure, let us recapitulate first its basic principles: The procedure used in MULTI1 starts with splitting the four-body phase space into a three-body times a two-body decay:

\[\int d\Phi_{4}=\int ds_{34}\;I_{3}(p_{1},p_{2},p_{34})\;I_{2}(p_{3},p_{4}), \tag{16}\]

where the integral \(I_{3}\) represents the three-body and \(I_{2}\) the two-body phase space, the labels \(p_{i},\;i=1,4\) represent the four-momenta of the produced particles with \(p_{34}=p_{3}+p_{4}\) and \(s_{34}=p_{34}^{2}\). The key issue thus becomes parametrisation of the (more difficult) three body phase-space integral \(I_{3}(P_{1},P_{2},P_{3})\):

\[I_{3}(P_{1},P_{2},P_{3})=\int\prod_{i=1}^{3}d^{4}P_{i}\delta(P_{i}^{2}-M_{i}^{ 2})\theta(E_{i}). \tag{17}\]

It should be stressed that the masses \(M_{i}\) in the above on-shell constraint do not necessarily correspond to physical masses of the elementary particles, can as well be values derived by a pre-sampling procedure (e.g. \(M_{3}^{2}=s_{34}\) in the above example, \(M_{3}\) representing the off-shell mass of a gluon decaying into \(p_{3}\) and \(p_{4}\)). Defining the reduced energies \(x\) and \(y\) as:

\[E_{1}=\frac{\sqrt{s}}{2}\;x,\qquad\qquad E_{2}=\frac{\sqrt{s}}{2}\;y, \tag{18}\]

where the \(s\) is the square of centre-of-mass energy of the system, and setting \(\mu_{i}=M_{i}^{2}/s\) one can re-parametrise the integral \(I_{3}(P_{1},P_{2},P_{3})\) as:

\[I_{3}(P_{1},P_{2},P_{3})=\frac{s}{32}\int\limits_{2\sqrt{\mu_{1}}}^{x-}dx\int dy \,d\Omega_{1}\,d\Omega_{2}\,\delta[F(x,y)]. \tag{19}\]

The integral is now parametrised with the energies and solid angles of two particles with a constraint in form of a \(\delta[F(x,y)]\) due to the presence of the third particle. The integration limits on \(x\) can be easily derived from the Dalitz constraints, with \(x_{-}\) given by:

\[x_{-}=(1+\mu_{1})-(\sqrt{\mu_{2}}+\sqrt{\mu_{3}})^{2}. \tag{20}\]

The delta-function \(\delta[F(x,y)]\) is actually a constraint on the value of the cosine of the angle between the particles 1 and 2:

\[F(x,y)=C(x,y)-c_{12}, \tag{21}\]

the full expression for \(C(x,y)\) is given in [37]. A short calculation shows that, given values \(x\in[2\sqrt{\mu_{1}},x_{-}]\) and \(c_{12}\in[-1,1]\), the constraint of Equation 21 gives either two, one or no solutions for \(y\), i.e. the procedure of event generation can involve some event rejection and is thus not necessarily unitary.

In the original MULT11 channel implementation, the event generation uses the sampling sequence:

* Sample the value of \(x\).
* Calculate the value of \(\bar{y}\) assuming \(c_{12}=-1\) (which is favoured by multi-pheral singularity).
* Use the \((x,\bar{y})\) to sample the four values \(\cos(\theta_{1,2}),\phi_{1,2}\).
* From the angles calculate \(c_{12}=\cos(\theta_{12})\) and hence determine the possible values of \(y\) using Equation 21. If there is no solution for \(y\), the event is rejected.

As it turns out, the rejection rate, very low in cases of processed where it was applied originally [37], increases dramatically for the QCD process where heavy quarks are involved. Therefore, the approach was extended to an unitary one (albeit at the cost of computation time).

Figure 4: _A diagrammatic representation of a three-body decay as modelled by the procedure described in the text._

The developed extension is based on a short calculation, which shows the existence of a turning point (maximum) at \(y_{T}=y_{T}(x)\) in the \(c_{12}(y)=C(x,y)\) function, i.e. there is a value of \(x\) where \(c_{12}(y_{T})\) reaches its maximal value. At given values of \(x\) and \(c_{12}\), the number of solutions for \(y\) thus depends on the location and value of the extremum \(c_{T}=c_{12}(y_{T})\). Basing on these deductions, a new approach was developed:

* Sample the value of \(x\) from a distribution: \[\frac{1}{(1-x)^{\nu}}\hskip 28.452756pt\nu\sim 1,\] (22)
* Sample the angles \(\phi_{1}\in[0,2\pi]\) from a flat distribution and \(\theta_{1}\) from: \[\frac{1}{a_{1}-\cos(\theta_{1})}\hskip 28.452756pta_{1}=\frac{2E_{1}E_{g_{1}}-s _{1}-s_{g_{1}}+s_{3}}{2|\vec{P}_{1}||\vec{P}_{g_{1}}|},\] (23) where the index \(g_{1}\) represents the incoming particle that splits into the t-channel exchange and the \(s_{i}\) terms correspond to \(s_{i}=M_{i}^{2}\) from Equation 17 (remember that \(E_{1}=\sqrt{s}/2\cdot x\)).
* Calculate the values of kinematic limits on \([y_{\min}(x),y_{\max}(x)]\) and the values \(y_{T}(x)\). If the \(y_{T}\) is within kinematic limits \([y_{\min}(x),y_{\max}(x)]\), calculate the maximum limit \(c_{T}\) and hence the limits on \(\phi_{2}\) and \(\theta_{2}\).
* Calculate the value of \(\tilde{y}\) assuming \(c_{12}=-1\) (which is always allowed).
* Sample the value of \(\theta_{2}\) within the calculated limits from a distribution analogous to Equation 23 using \(\tilde{y}\).
* Get the value of \(\phi_{2}\) from a flat distribution within the allowed limits.
* From the generated angles calculate \(c_{12}=\cos(\theta_{12})\) and hence determine the possible values of \(y\) using Equation 21. If the calculations were done correctly, there should always be at least one solution.

The modified procedure is thus an unitary one, giving the four-vectors \(P_{1},P_{2},P_{3}\).

Going back to the initial issue of the four body phase space (Eq. 16), the whole sampling procedure for such kinematic channels is as follows:

* The squared invariant mass \(s_{34}\) is sampled from: \[\frac{1}{(s_{34})^{\mu}}.\] (24) The value of \(\mu\) depends on the channel implementation (virtual gluon, a t-channel object, masses of the particles 3 and 4).
* The described above three-body decay procedure is implemented.
* The virtual \(P_{34}\) object is decayed according to the actual channel (a t-channel angular dependence, isotropic decay of a virtual gluon).

#### 4.2.3 Modified Vegas Algorithm

Using the described multi-channel approach, the total generation (unweighting) efficiency amounts to about \(3-10\%\) depending on the complexity of the chosen process. In order to further improve the efficiency, a set of modified VEGAS[5] routines was used as a (pseudo-)random number generator for sampling the peaking quantities in each kinematic channel. The conversion into a _(pseudo-)random number generator_ consisted of re-writing the calling routines so that instead of passing the analysed function to VEGAS for sampling and integration, VEGAS calls produce only (weighted) random numbers in the region \([0,1]\) and the corresponding sampling weight, while the VEGAS grid training is done using a separate set of calls.

After training all the sampling grids (of dimensions 4-7, depending on the kinematic channel), the generation efficiency increased to the order of \(6-14\%\). The motivation for this approach was that in unitary algorithms only a very finite set of simple sampling functions is available, since the functions have to have simple analytic integrals for which an inverse function also exists. Consequently, the non-trivial kinematic distributions can not be adequately described by simple functions at hand in the whole sampling domain (e.g. the \(\tau\) distribution, c.f. Figure 5) and some additional smoothing might be welcome. In addition, the random numbers distributions should, due to the applied importance sampling, have a reasonably flat behaviour to be approached by an adaptive algorithm such as VEGAS9.

Footnote 9: At this point also a disadvantage of using the adaptive algorithms of the VEGAS type should be stressed, namely that these are burdened with the need of training them on usually very large samples of events before committing them to event generation.

The further modification of VEGAS, beside adapting it to function as a (pseudo-)random number generator instead of the usual _integrator_; was based on the discussions [41, 42] that in case of event generation, i.e. unweighting of events to the weight one, reducing the maximal value of event weights is in principle of higher importance than achieving the minimal weight variance. Since the VEGAS algorithm was developed with the latter scope, some modification of the algorithm was necessary. As it turned out, the modification was fairly easy to implement: Instead of the usual cumulants:

\[<I>_{\rm cell}\ \ =\sum_{\rm cell}{\rm wt}_{i}, \tag{25}\]

according to the size of which VEGAS decides to split its cells, the values:

\[<F>_{\rm cell}\ \ =\Delta_{\rm cell}\cdot{\rm wt}_{\rm cell}^{\,\rm max}\ -\sum_{\rm cell}{\rm wt}_{i}, \tag{26}\]were collected and used as the splitting criterion. The above value (called _loss integral_ in [42]) is basically a measure of the deviation between the maximal weight sampled in the given cell \(\mathrm{wt}_{\mathrm{cell}}^{\mathrm{max}}\) and the average weight in the cell \(<\mathrm{wt}_{\mathrm{cell}}>=(\sum_{\mathrm{cell}}\mathrm{wt}_{\mathrm{i}})/ \Delta_{\mathrm{cell}}\) (the quantity \(\Delta_{\mathrm{cell}}\) denoting the cell width, i.e. the integration range). Re-writing the above expression as:

\[<F>_{\mathrm{cell}}\ =(\Delta_{\mathrm{cell}}\cdot\mathrm{wt}_{\mathrm{cell}}^{ \mathrm{max}})\cdot\left\{1-\frac{<\mathrm{wt}_{\mathrm{cell}}>}{\mathrm{wt}_ {\mathrm{cell}}^{\mathrm{max}}}\right\} \tag{27}\]

clearly indicates that the value \(<F>_{\mathrm{cell}}\) is actually a measure of the generation _inefficiency_ in the cell, since the term in the curly brackets is equivalent to one minus the generation efficiency \(<\mathrm{wt}_{\mathrm{cell}}>/\mathrm{wt}_{\mathrm{cell}}^{\mathrm{max}}\). In addition, the inefficiency is weighted with the _crude_/maximal estimation of the function integral over the cell \(\Delta_{\mathrm{cell}}\cdot\mathrm{wt}_{\mathrm{cell}}^{\mathrm{max}}\) and cells with the highest \(<F>_{\mathrm{cell}}\) are split.

This method is of relevance because the VEGAS cells are actually projections of the whole phase space on the (chosen) side axes, i.e. VEGAS cannot isolate a maximal weight in a certain point in phase-space and build a cell around it, which in principle would be an ideal solution. An implementation with this scope in view has been made in FOAM [42], nevertheless we have not found it competitive with respect to the modified VEGAS for the given application.

The thus modified ac-VEGAS algorithm further increased the unweighting efficiency for almost a factor of two.

One of the sampling distributions is shown in Fig. 5 as a gray histogram (marked _channel_) and the actual (_generated_) differential cross-section dependence is drawn in black. In the first figure, the random variable used for

Figure 5: _Comparison between the sampling distribution for the \(\tau=\hat{s}/s\in[\tau_{\mathrm{min}},1]\) variable in \(gg->t\bar{t}b\bar{b}\) process before and after the application of modified ac-VEGAS [5] smoothing procedure (light gray histogram). The generated (normalised) differential cross-section is also drawn (black histogram, labelled Generated)._

sampling values from \(1/\tau^{\mu}\) distribution was drawn from a flat probability in the interval \([0,1]\); in the second plot the ac-VEGAS algorithm was used to give an optimal grid for sampling the random variables needed for parameter generation (the grid is trained for each kinematic channel separately, the sum of all channels is shown in the plot). The improvement is evident; one has to stress that the use of ac-VEGAS algorithm to generate the values of \(\tau\) directly would be much less efficient since VEGAS gives a grid of 50 bins/dimension, which would give a very crude description of the \(\tau\) distribution compared to the one at hand.

Observing the distributions of the event weights before and after the inclusion of the modified ac-VEGAS algorithm (Fig. 6) it is evident that ac-VEGAS quite efficiently clusters the weights at lower values. Note that the principal effect of original VEGAS is indeed to cluster event weights in a narrow region, nevertheless a tail towards the high-weight region remains. On the other hand, the ac-VEGAS efficiently reduces the tail in the high weight region; only a few of the event weights still retain their large values, thus reducing the generation efficiency. Given the difference in distributions, the observed increase of the generation efficiency seems relatively modest. To better understand this result one should consider that the formula for the MC generation efficiency is given by:

\[\epsilon=\frac{<\mathrm{wt}>}{\mathrm{wt}_{\mathrm{max}}}, \tag{28}\]

where \(<\mathrm{wt}>\) is the average weight of the sample and equals the total event

Figure 6: _The distribution of event weights using only the Multi-Channel approach (dotted histogram) and after application of VEGAS (dashed histogram) and ac-VEGAS (full histogram) algorithms in the \(gg\rightarrow(Z^{0}\rightarrow)l\bar{l}b\bar{b}\) process._

cross-section, while wt\({}_{\text{max}}\) represents the maximum event weight in the applied generation procedure and is determined through a pre-sampling run with a high statistic. Since the average weight \(<\) wt \(>\) equals the total cross-section of the process, it remains (necessarily) unchanged after the application of the VEGAS refining; consequently the change of efficiency results in the reduction of the maximum weight wt\({}_{\text{max}}\) by approximately a factor two, which is from technical point of view quite an achievement.

A further step to profit from the clustering of weights induced by ac-VEGAS is to adopt a re-definition of the MC generation efficiency as proposed by [40, 42]. In this approach, the alternative definition of wt\({}_{\text{max}}\) is: For a given precision level \(\alpha<<1\), the wt\({}_{\text{max}}\) is determined from the total weight distribution in such a way that the contribution of the events exceeding this value to the total weight sum (i.e. cross-section integral) equals \(\alpha\). Such a quantity is referred to as wt\({}_{\text{max}}^{\alpha}\) and the efficiency expression becomes:

\[\epsilon=\frac{<\text{wt}>}{\text{wt}_{\text{max}}^{\alpha}}. \tag{29}\]

The argument presented in [40, 42] seems to be quite reasonable since the _true_ event weight is in any case only estimated from a finite sample of events and the new definition simply takes into account a certain level of accuracy in the maximum weight determination. In addition, certain very weak singularities that might exist in the simulated process and might occasionally result in a very high event weight are automatically taken into account. The use of new wt\({}_{\text{max}}^{\alpha}\) consequently results in a generation efficiency of about \(\epsilon\geq 20\%\) for all the implemented processes, which is a significant improvement in terms of time needed for MC generation.

#### 4.2.4 Colour Flow Information

Before the generated events are passed to PYTHIA/HERWIG to complete the event generation, additional information on the colour flow/connection of the event has to be defined. Below we discuss the implemented method of the colour flow determination on the example of two processes, \(gg\to t\overline{t}b\overline{b}\) and \(q\overline{q}\to t\overline{t}b\overline{b}\).

For the process \(gg\to t\overline{t}b\overline{b}\) six colour flow configurations are possible, as shown in Figure 7. With 36 Feynman diagrams contributing to the process and at least half of them participating in two or more colour flow configurations, calculations by hand would prove to be very tedious. Consequently, a slightly modified colour matrix summation procedure from MADGRAPH[6] was used to determine the colour flow combinations of the diagrams and the corresponding colour factors. The thus derived squared matrix elements for separate colour flow combinations \(|{\cal M}_{\rm flow}|^{2}\) were used as sampling weights on an event-by-event basis to decide on a colour flow configuration of the event before passing it on to PYTHIA/HERWIG for showering and fragmentation. The procedure was verified to give identical results regarding the colour flow combinations and corresponding colour factors when applied to the processes published in [43]. As one can see this approach neglects the interference terms between the distinct colour-ordered amplitudes and is indeed exact only in the \(N_{C}\to\infty\) limit 10[44, 45]. Since there is no _a priori_ rule of how to split the interference terms between the colour ordered amplitudes this approach is generally deemed to be the best one can do; recent developments in this field [46] however suggest additional improvements to the method that indeed might be incorporated into later versions of **AcerMC**.

Footnote 10: The matrix elements used in the cross-section calculation and event generation are of course complete and do not employ any approximation.

The colour flow configuration in the \(q\overline{q}\to t\overline{t}b\overline{b}\) channel is much simpler since only two colour flow topologies exist (Fig. 8); the choice between the two has been solved in a manner identical to the one for the \(gg\to t\overline{t}b\overline{b}\) process, as described above.

Figure 8: _A diagrammatic representation of the two colour flow configurations in the process \(q\overline{q}\to t\overline{t}b\overline{b}\)._

Figure 7: _A diagrammatic representation of the six colour flow configurations in the process \(gg\to t\overline{t}b\overline{b}\). Certain colour combinations, leading for example to colourless (intermediate) gluons, are not allowed._

Some specifications of the implemented matrix-element-based processes: number of Feynman diagrams, channels used in the phase-space generation and colour flow configurations are collected in Table 8.

### The \(\boldsymbol{\alpha_{\mathrm{QED}}}\) and \(\boldsymbol{\alpha_{s}}\) calculations

Native functions of running \(\alpha_{\mathrm{QED}}(Q^{2})\) and \(\alpha_{s}(Q^{2})\) have been implemented inside **AcerMC** with the main objective of providing a means to keep the (total) cross-sections of the processes unchanged when interfacing with the two supervising generators, since the implementations of the two functions in PYTHIA and HERWIG differ to some extent. Especially the \(\alpha_{s}(Q^{2})\) is subject to experimental and theoretical uncertainties, however obtaining a different cross-sections for the same **AcerMC** process due to different interface, could be regarded (at least to some extent) as an inconsistency11.

Footnote 11: The values will still differ by a small amount in processes containing W bosons (processes 3,4) due to different values of the CKM matrix in the two supervising generators.

* \(\boldsymbol{\alpha_{\mathrm{QED}}}\) is implemented in **AcerMC** using the formulae given in [47] and is in complete accordance with the implementations in PYTHIA and HERWIG apart from the updated hadronic component published recently by Burkhardt _et. al._[48]. As one can see in Figure 9, the latter minimally lowers the \(\alpha_{\mathrm{QED}}\) values.

\begin{table}
\begin{tabular}{|c|c|c|c|c|} \hline \hline Process id & Process specification & Feyn. diagrams & Channels & Colour flows \\ \hline \hline
1 & _gg_\(\to t\overline{t}b\overline{b}\) & 36 & 11 & 6 \\ \hline
2 & \(q\overline{q}\)\(\to t\overline{t}b\overline{b}\) & 7 & 4 & 2 \\ \hline
3 & \(q\overline{q}\)\(\to\)\(W(\to\ell\nu)b\overline{b}\) & 2 & 2 & 1 \\ \hline
4 & \(q\overline{q}\)\(\to\)\(W(\to\ell\nu)t\overline{t}\) & 2 & 2 & 1 \\ \hline
5 & _gg_\(\to\)\(Z/\gamma^{*}(\to\ell\ell)b\overline{b}\) & 16 & 6 & 2 \\ \hline
6 & \(q\overline{q}\)\(\to\)\(Z/\gamma^{*}(\to\ell\ell)b\overline{b}\) & 8 & 5 & 1 \\ \hline
7 & _gg_\(\to\)\(Z/\gamma^{*}(\to ff,\nu\nu)t\overline{t}\) & 16 & 6 & 2 \\ \hline
8 & \(q\overline{q}\)\(\to\)\(Z/\gamma^{*}(\to ff,\nu\nu)t\overline{t}\) & 8 & 5 & 1 \\ \hline
9 & _gg_\(\to\)\((Z/W/\gamma^{*}\to)t\overline{t}b\overline{b}\) & 72 & 21 & 12 \\ \hline \hline \end{tabular}
\end{table}
Table 8: _Some details on matrix-element-based process implementation in_ **AcerMC** _library. In case of \(q\overline{q}\) initial state the number of Feynman diagrams corresponds to one flavour combination. The \(f=e,\mu,\tau,b\)._* \(\boldsymbol{\alpha_{s}}\) has one and three loop implementations in **AcerMC** following the calculations of W. J. Marciano [49] and using \(\Lambda_{MS}^{[nf]}\) transformations for flavour threshold matches. The three loop version gives good agreement with the HERWIG implementation (both functions have been set to the same \(\Lambda_{MS}^{[nf=5]}\) value) as one can see in Figure 9. The PYTHIA two loop implementation deviates somewhat from the latter two; the kinks observed in the plot are due to approximate \(\Lambda_{MS}^{[nf]}\) transformations at flavour thresholds, which are exact to one loop only.

Although the **AcerMC** and PYTHIA one loop implementations are identical in form the resulting values differ by a small amount because the default PYTHIA implementation reads the \(\Lambda_{MS}^{[nf=4]}\) value from PDFLIB instead of the \(\Lambda_{MS}^{[nf=5]}\) one used by **AcerMC** and HERWIG; the difference thus occurs due to \(\Lambda_{MS}^{[nf]}\) propagation at flavour thresholds.

Figure 9: _Comparison between the \(\alpha_{\text{QED}}(Q^{2})\) (_**L** **eft**_) and \(\alpha_{s}(Q^{2})\) (_**Right**_) implementations in **AcerMC**, PYTHIA_ and HERWIG. For \(\alpha_{s}(Q^{2})\) calculations with different loop orders (\(\L\)) are given where applicable.

Structure of the package

The **AcerMC** package consist of a library of the matrix-element-based generators for selected processes, interfaces to the PYTHIA 6.2 and HERWIG 6.3 generators, sets of data files and two main programs: demo_hw.f and demo_py.f. Provided makefiles allow to build the executables with either of these generators as the _supervising generator_. demo_hw.exe and demo_py.exe.

### Main event loop and interface to PYTHIA/HERWIG

The main event loop is coded in the demo_hw.f or demo_py.f files, where the opening/closing of the input/output files, reading of the data-cards and event-loop execution is performed. Main event loop consists only of calls to the acermc_py or acermc_hw subroutines, with parameter MODE = -1, 0, 1 respectively set for initialisation, generation and finalisation of the event loop. The call to acermc_xx activates respective procedures of the supervising generator, which in turn activates the acevtgen procedure steering the native **AcerMC** generation of the matrix element event. Fig. 10 illustrates this calling sequence in some details.

As one can deduce from the diagram in Fig. 10, certain functions called by **AcerMC**, as e.g. pseudo-random number generator acr are re-routed through the interfaces to the linked supervising generator, depending on the choice at compilation time (e.g. acr function giving (pseudo-)random numbers is linked to either pyr or hwrgen as shown in the plot), providing the internal consistency of the package. The generated event is rewritten to the format required by the supervising generator by means of the acdump_xx routines.

The pythia_ac.f and herwig_ac.f files contain sets of re-routing/interface functions, specialised for the respective supervising generator. The main library of **AcerMC** is well screened from dependencies on the supervising generator, all dependencies are hidden in herwig_ac.f and pythia_ac.f respectively.

The PYTHIA and HERWIG libraries remain essentially untouched12, without introducing any dependencies on the **AcerMC** code. The input cards are common for both interfaces.

Footnote 12: For specification of exceptions see Section 6.4 and 6.5.

### Structure of the **AcerMC** matrix-element and phase-space code

The **AcerMC** core code performs the generation of a matrix-element-based event. Fig. 11 illustrates an example of the calling sequence for generating \(gg\to t\overline{t}b\overline{b}\) event. The steering subroutine is called **a**cevent_xx, where **xx** denotes an unique label corresponding to the process at hand13 (in case of \(gg\to t\overline{t}b\overline{b}\) we have **xx=tt**). To stress again, this subroutine calls only a sequence of the native **AcerMC** subroutines, any call to the supervising generator goes via the respective interface function/subroutine. A more detailed representation of calling sequence is shown in the Figure 11.

Figure 10: _The calling sequence of the main event generation routine_**a**cevent_xx. The routine is called either through **d**emo_py**\(\rightarrow\)**a**ce**m_py sequence when interfacing the PYTHIA 6.2 _generator or_d**mo_hw**\(\rightarrow\)**a**ce**m_hw**_sequence when the HERWIG 6.3 is linked. The structure of the interface subroutines and relations with the corresponding ones from supervising generators and/or external libraries is also evident._Code for the phase space generation is grouped together in the subdirectories, one per subprocess, e. g. code for generating \(gg\to t\overline{t}b\overline{b}\) event is in subdirectory 01_gg_ttbb. Code for matrix element calculations is grouped together for all processes in subdirectory matel. Code with different utility subroutines, e.g. kinematic transformations used by all subprocesses, is in the subdirectory common. Subdirectory interface contains code with interfaces to supervising generators, finally subdirectory include contains all include files. The overall view on the structure of the **AcerMC** directories is shown in Fig. 12.

The core code builds one library libacermc.a.

### Data files for the phase-space optimisation

The **AcerMC** matrix-element-based generators are very highly optimised, using multi-channel optimisation and additional improvement with the ac-VEGAS grid. The generation modules require three kinds of the input data to perform the generation of unweighted events:

Figure 11: _The event generation sequence controlled by_ acevent_tt _subroutine. Phase space generation is sequenced by calling first the_ acshat_tt _routine to obtain the incoming gluon momenta and next the phase space generation via the_ ackin_sel_tt _routine which re-routes the generation to a certain kinematic channel_ ackin_ch _The latter routine handles the possible momenta permutations and calls the explicit four-momenta generation (and PS weight calculation) in the routines_ acwteen_tt_ _These (channel-specific) routines are constructed from common building blocks listed in the next two columns. The_ acevent_tt _routine also initialises_ MADGRAPH/HELAS _package and retrieves the matrix element values. All the generated four-momenta, as well as the event weight are finally passed back to the_ supervising generator _via the_ acdump_tt _call._

* A file containing the list of the values of relative channel weights obtained by the multi-channel optimisation, defaults being stored in acermc_src/include.
* A file containing the pre-trained ac-VEGAS grid, the pre-trained (default) ones located in acermc_dat/grids.
* A file containing the maximum weight wt\({}_{\text{max}}\), \(\alpha\)-cutoff maximum weight wt\({}_{\text{max}}^{\alpha}\) and the 100 events with the highest weights, the default ones being provided in acermc_dat/maxims.

In case of changing the default running conditions, like parton density functions or centre-of-mass energy, the user should repeat the process of preparation of the listed data files containing the inputs for the phase-space generator modules in order to preserve the initial event generation efficiency.

The reading sequence of data files inside **AcerMC** is shown in Figure 13.

Pre-trained data sets are obtained using \(\sqrt{s}=14\) TeV, PYTHIA default \(\alpha_{s}(Q^{2})\) and \(\alpha_{\text{QED}}(Q^{2})\) and CTEQ5L (parametrised) parton density function set and

Figure 13: _The reading sequence of the input files and the performing subroutines in the_ **AcerMC** _code_.

Figure 12: _The structure of the_ **AcerMC** _directories_.

are provided for each implemented process14. For these, the relative channel weights are stored in the INCLUDE files in acermc_src/include/chanwt_xx.inc where xx denotes the process id (c.f. Table 7); the default/pre-trained ac-VEGAS grids are listed in the directory acermc_dat/grids/vscalA_xxYYY.veg, where A denotes the scale choice of the process xx and YYY denotes the cutoff value of the \(m_{Z^{0}/\gamma^{*}}\) for the **AcerMC** processes xx = 05 \(\rightarrow\) 08. The files containing the maximal weights \(\mathrm{wt}_{\mathrm{max}}\) and \(\mathrm{wt}^{\alpha}_{\mathrm{max}}\) as well as the 100 events with the highest weights are stored in the directory acermc_dat/grids/wtmaxA_xxYYY.dat, following the same labelling convention. Both the trained ac-VEGAS grids and the weight files were obtained from test runs with at least \(2\cdot 10^{6}\) weighted events being generated.

Footnote 14: These can also be used for a series of other settings, see Section 6.3 for details

The number of required input files might at first look seem large, considering that many event generators do not require any input files for operation; the difference is not in so much in the complexity of the phase space generation as in the fact that many event generators require a _warming run_ instead, i.e. before the generation of unweighted events is performed a certain number of weighted events (typically of the order of \(10^{4}\)) is generated in order to obtain the relative multi-channel weights (in case multi-channel phase space generation is used) and/or the optimised VEGAS grid and/or an estimate of the maximal weight. Such an approach can have an advantage when event generation is very fast and the phase space regions with the highest weights are well known (as done for the \(2\to 2\) processes in PYTHIA); on the other hand, when the phase space topology of the process is more complex and the event generation is comparatively slow, generating a relatively small number of e.g. \(10^{4}\) weighted events _every time_ a generator is started can become CPU wasteful and/or inaccurate in terms of maximum weight estimation.

Reasonably accurate estimation of the latter is namely crucial for correct event unweighting; event generators using _warming-up_ method for maximal weight search often find still higher weights during the production run and reset the maximal weight accordingly. In this case however, statistically correct approach would be to reject all events generated beforehand and start the event generation anew, which is almost never implemented due to the CPU consumption and the possibility of hitting a weak singularity (the same argument leads to the definition of the \(\mathrm{wt}^{\alpha}_{\mathrm{max}}\), c.f. Section 4.2.3). With a small pre-sampled set the generator can however badly under-estimate the maximum weight and a large number of events can be accepted with a too-high probability. The only hope of obtaining correct results is in such cases that the weight _plateau_ will be hit sufficiently early in the event generation process. Consequently, such approach can be very dangerous when generating small numbers of events15.

In contrast to the _warming-up_ approach the **AcerMC** we decided that using separate _training_ runs with large numbers of weighted events to obtain the optimised grids and maximum weight estimates are preferable, in case user wants to produce data sets for non-defaults setting, this can easily be done by configuring the switches in the acermc.card (see Section 6.2).

How to use the package

There are two steering input files: **run.card** and **acermc.card** which share a common format for both executables. The **run.card** (see App. B.1) provides switches for modifying: generated process, number of events, parton density functions, predefined option for hadronisation/fragmentation in the _supervising generator_, random number, etc.. The **acermc.card** (see App. B.2) provides switches for modifying more specialised settings for the **AcerMC** library itself. Once the user decides on a setup for the generated process, only **run.card** is very likely to be modified for the job submission. Both input files are read by AcerMC executables through the CERNLIB FFREAD routines, some commands given in the input files (e.g. LIST entry, see Appendix B) are internal FFREAD commands which should be disregarded by the user.

The same executables can also be used for running standard PYTHIA 6.2 and HERWIG 6.3 processes. The example how to require such process is provided as well, in demo_hw.f and demo_py.f respectively. If the user requires that the **AcerMC** library is not used, the \(ttH\) production will be generated with demo_py.exe and HERWIG 6.3 implementation of the \(Zbb\) production will be generated with demo_hw.exe. In this case only the run.card file will be read, so in case the user requires different processes and/or settings of the supervising generators the user has to implement her/his steering there or create another xxx.card file, together with the corresponding code added to the demo_xx.f.

### Steering switches of the overall run

The overall run is controlled by the switches read from the run.card file (see also App. B.1). Some of these general switches are also passed to the **AcerMC** library.

* CMS : Sets the centre-of-mass energy in GeV.
* use process from PYTHIA/HERWIG  ACER=1
- use internal **AcerMC** process
* PROCESS : Sets process id
* only hard process  HAD=1
- only ISR (works for PYTHIA interface only)  HAD=2
- only ISR and FSR  HAD=3
- full treatment  HAD=4
- only FSR  HAD=5
- only FSR and hadronisation
* PDFLIB804 NGROUP Sets the value of the PDFLIB804 NGROUP parton density function choice.
* PDFLIB804 NSET Sets the value of the PDFLIB804 NSET parton density function choice.
* RSEED : Choose the random seed for (pseudo-)random generator initialisation
* NEVENT : Required number of generated events

### Steering switches of the **AcerMC** processes

The **AcerMC** processes are controlled by values set in a simple arrays specified in acermc_src/include/AcerMC.inc:

C CROSS-IALK PARAMETERS DOUBLE PRECISION ACSET INTERER IACPROC COMMOS/ACPARI/ACSET(200),ILCPROC(200) C PARTICLE PROPERTIES DOUBLE PRECISION ICCHE,ICMIS,ACCKN COMMOS/ACPARI/ACCHG(50,4),LCMS(50,4),ICCKN(4,4) C ROUTINE I/O INTEDER LACSTD,LACIO COMMOS/ACPARI3/LACSTD,LACIO

The IACPROC array activates the process IPROC=PROCESS (read from run.card file) by setting IACPROC(IPROC)=1.

The list of currently implemented processes in **AcerMC** can be found in Table 7. When running in the generation mode with ACER=0 full list of processes implemented in either PYTHIA 6.2 or HERWIG 6.3 can be activated, however the mechanism for passing information about process id to either of these generators has to be coded by user individually in demo_xx.f.

The main control switches reside in the array ACSET. The COMMON block ACPAR2 contains the particle charges, masses and decay widths as well as the CKM matrix using the PYTHIA convention. The values are filled by the interface routines to be equal to the PYTHIA/HERWIG internal values in order to preserve consistency within the generation stream. In case the user wants to change some of the particle properties this should be done through the native PYTHIA/HERWIG switches; **AcerMC** will copy them and use the new values.

The COMMON block ACPAR3 contains the two logical I/O unit numbers used by **AcerMC**. The LACSTD value determines the output unit of the **AcerMC** messages and the LACIO unit is used for reading/writing the **AcerMC** data files.

The main control switches which reside in the array ACSET (see also App. B.2):

* ACSET(1) : Sets the centre-of-mass energy in GeV.
* ACSET(2) : Scale of the hard process Choose the \(Q^{2}\) scale for the active **AcerMC** process. The implemented values differ for various processes, the currently implemented settings are specified in Section 6.6.
* \(W\to e\nu_{e}\); \(Z^{0}/\gamma^{*}\to e^{+}e^{-}\) ACSET(3)=12
- \(Z^{0}/\gamma^{*}\to\nu_{e}\nu_{e}\). ACSET(3)=13
- \(W\to\mu\nu_{\mu}\); \(Z^{0}/\gamma^{*}\to\mu^{+}\mu^{-}\) ACSET(3)=14
- \(Z^{0}/\gamma^{*}\to\nu_{\mu}\nu_{\mu}\) ACSET(3)=15
- \(W\to\tau\nu_{\tau}\); \(Z^{0}/\gamma^{*}\to\tau^{+}\tau^{-}\) ACSET(3)=16
- \(Z^{0}/\gamma^{*}\to\nu_{\tau}\nu_{\tau}\) ACSET(3)=5
- \(Z^{0}/\gamma^{*}\to b\bar{b}\) At present the ACSET(3)=5 and ACSET(3)=12,14,16 are implemented only for processes \(7\to 8\).
* only \(Z^{0}\) propagator. ACSET(4)=1
- full \(Z^{0}/\gamma^{*}\) propagator.
* ACSET(5) : \(m_{Z^{0}/\gamma^{*}}\) mass cut Cutoff value on the invariant mass \(m_{Z^{0}/\gamma^{*}}\) in GeV when ACSET(4)=1. Note that the provided data files exist only for values of ACSET(5)=2,5,10,15,30,60, 120,270,300 and 500 GeV which should satisfy most user requirements for the analyses foreseen at LHC. In case a different value is set the user has also to provide the user data files for the run.
* ACSET(6) : Sets the value of the PDFLIB804 NGROUP parton density function choice.
* ACSET(7) : Sets the value of the PDFLIB804 NSET parton density function choice.
* Use the \(\alpha_{s}(Q^{2})\) as provided by the supervising generator/ ACSET(8)=1
- Use the \(\alpha_{s}(Q^{2})\) (one loop) provided by the **AcerMC**; this option gives \(\alpha_{s}(Q^{2})\) values equal to the default PYTHIA implementation. ACSET(8)=2
- Use the \(\alpha_{s}(Q^{2})\) (three loop) provided by the **AcerMC**.
- The \(\Lambda_{\overline{MS}}^{(nf=5)}\) value is taken from the PDFLIB804 for the selected parton density function set. ACSET(9)>0
- The provided value is taken.
* Use the \(\alpha_{\rm QED}(Q^{2})\) as provided by the supervising generator, ACSET(10)=1
- Use the \(\alpha_{QED}(Q^{2})\) implemented in the **AcerMC**.
* The \(\alpha_{\rm QED}(0)\) value is set to \(\alpha_{\rm QED}(0)=0.0072993\). ACSET(11)>0
- The provided value is taken.
* both W bosons decay according to PYTHIA/HERWIG switches. ACSET(12)=1
- \(W_{1}\to e\nu_{e}\) and \(W_{2}\to q\overline{q}\). ACSET(12)=2
- \(W_{1}\to\mu\nu_{\mu}\) and \(W_{2}\to q\overline{q}\). ACSET(12)=3
- \(W_{1}\to\tau\nu_{\tau}\) and \(W_{2}\to q\overline{q}\). ACSET(12)=4
- \(W_{1}\to e\nu_{e},\mu\nu_{\mu}\) and \(W_{2}\to q\overline{q}\). ACSET(12)=5
- \(W_{1}\to e\nu_{e},\mu\nu_{\mu}\) and \(W_{2}\to q\overline{q}\). The setting ACSET(12)=5 works for PROCESS=4 only and implies leptonic decay of the \(W\)-boson with the same charge as the one of the primary \(W\) boson produced in the hard process. Folowing configurations are posible: \[q\overline{q}\to W^{+}t\overline{t}\to(W^{+}\to)L^{+}\nu_{L}\quad(W_{1}^{+} \to)l^{+}\nu_{l}\ b\quad(W_{2}^{-}\to)q^{\prime}\overline{q}^{\prime}\ \overline{b},\] or: \[q\overline{q}\to W^{-}t\overline{t}\to(W^{-}\to)L^{-}\overline{\nu}_{L}\quad(W _{1}^{+}\to)q^{\prime}\overline{q}^{\prime}\ b\quad(W_{2}^{-}\to)l^{-} \overline{\nu}_{l}\ \overline{b},\] where \(L^{\pm}\) is the lepton from the primary \(W\) decay (controlled by ACSET(3) switch) and \(l^{\pm}\) is either an \(e^{\pm}\) or \(\mu^{\pm}\) as for ACSET(12)=4. Since the charge of the semi-leptonic decaying \(W\) is correlated with the charge of the primary W boson, the \(\sigma\times BR\) is consequently a factor two smaller than the one for ACSET(12)=4.
- production run, generate unweighted events. ACSET(50)=1
- perform multi-channel optimisation and output the user file with channel weights. ACSET(50)=2
- perform ac-VEGAS grid training and output the user file with trained ac-VEGAS grid. ACSET(50)=3
- perform ac-VEGAS grid training as in ACSET(50)=2 but do this by updating a provided grid.
* ACSET(51): Required number of generated events NEVENT In case the switch ACSET(50) is set to the non-zero value (i.e. in one of the training modes) the ACSET(51) entry is used and defines the number of (weighted) events that will be generated; this information is necessary for the learning algorithms to decide on steps in the learning sequence.
* no, use native (default) **AcerMC** data files. ACSET(52)=1
- use the user's multi-channel optimisation and VEGAS grid files. ACSET(52)=2
- use the default multi-channel optimisation and user's VEGAS grid files. ACSET(52)=3
- use the default multi-channel optimisation and VEGAS grid files; read the user maximal weight file.
* no, use the provided files containing maximal weights. ACSET(53)=1
- use the provided files for max. weights and re-calculate the max. weights using the stored 100 events with the highest weight. ACSET(53)=2
- perform the search and give the new wtmax_xx_new.dat file; the switch is equivalent to generation of weighted events.
* use the \(\mathrm{wt}^{\alpha}_{\mathrm{max}}\) weight. ACSET(54)=1
- use the \(\mathrm{wt}_{\mathrm{max}}\) weight.

### How to prepare data-files for the non-default setup

The following actions are possible, to recover better efficiency of the generator modules with the non-default settings:

* _The user wants to generate events using different parton density function sets and/or different coupling values (e.g._ **AcerMC** _third order_ \(\alpha_{s}(Q^{2})\) in stead of the first order one)_: It should suffice to set the the switch ACSET(53)=1, which signals **AcerMC** to re-calculate the wt\({}_{\text{max}}\) and wt\({}_{\text{max}}^{\alpha}\) using the 100 events stored in the file acermc_dat/grids/wtmaxA_xxYYY.dat. The coupling and parton density functions values should not change significantly the process topology but affect foremost the overall scale of the event weights; thus, the stored hundred events should still remain the ones with the highest weights and the re-calculated approximate estimates of the highest weight should be accurate enough. In case the user is not confident in the obtained result, the new maximal weight estimation can be initiated by setting the switch ACSET(53)=2, which will result in generation of weighted events. The number of generated events is determined by the usual NEVENT in run.card. At the end of the run **AcerMC** will produce a file called wtmax_xx_new.dat, with xx specifying the process number. The user should then start the generation of unweighted events with the setting ACSET(52)=3 and linking(renaming) the new file to wtmax_xx_usr.dat, with xx denoting the process number (e.g. wtmax_01_usr.dat).
* _The user wants to generate events using different values of particle/boson masses or other significant changes of the parameters apart from the centre-of-mass energy and/or m\({}_{Z^{0}/\gamma}\) cutoff value for processes 5-8_. In this case the user should re-train the VEGAS grid since the process topology is assumed to undergo minor changes. This is done by setting the switch ACSET(50)=2 or ACSET(50)=3; in the first case **AcerMC** starts with an untrained grid and in the second one it starts modifying the existing grid provided for the process at the selected hard process scale. In general the second option should be preferable since the topology should still be close to the pre-trained one. **AcerMC** again produces weighted events and at the end of the run outputs a file grid_xx_new.veg. The number of generated events is determined by the usual NEVENT in run.card. As in the previous case, the user should re-name the file to grid_xx_usr.veg, re-set the switch to ACSET(50)=0 and repeat the maximal weight search procedure described above, by setting the switch ACSET(53)=2 etc.. When the maximum weight search is completed the user switch ACSET(52)=2, which will cause **AcerMC** to read the wtmax_xx_usr.dat as well as grid_xx_usr.veg files and produce unweighted events with the new setup.
* _The user wants to generate events at a different m\({}_{Z^{0}/\gamma}\) cutoff value and/or different centre-of-mass energy \(\sqrt{s}\)_: When the user changes at least one of these two parameters the event topology is significantly changed as well as the contributions from different kinematic channels. The user should thus start with a new multi-channel optimisation by setting the mode switch ACSET(50)=1 and start an **AcerMC** run. The number of generated events is determined by the usual NEVENT in run.card. At the end of the run **AcerMC** will produce a file chanwt_xx_new.dat which should be renamed/linked to chanwt_xx_usr.dat. The user should then set the switch ACSET(52)=1 and first put ACSET(50)=2 and and repeat the VEGAS grid training as described above and consequently ACSET(50)=0 and ACSET(53)=2 to perform the maximum weight search. After obtaining all three user files the ACSET(53) should again be put back to ACSET(53)=0 and a normal run should be started; the switch ACSET(52)=1 will in this case force **AcerMC** to read all three user files and produce unweighted events.

At the first look procedure for listed action scenaria might seem a bit complex but should after a few trials and errors become a straightforward routine; it is expected that the vast majority of users would have to deal with at most the first scenario.

### Details on the interface to PYTHIA 6.2

The **AcerMC** interface to Pythia 6.2 is implemented close to the new standard specified at the Les Houches workshop 2001 [3]. The full description of the standard can be found in the PYTHIA 6.2 manual ([1]). In addition to the UPINIT and UPEVNT routines the file acermc_src/interface/pythia_ac.f provides links between a list of **AcerMC** routines and the corresponding PYTHIA ones, as e.g. the (pseudo-)random number generator, \(\alpha_{s}\) and \(\alpha_{\text{QED}}\) calculations as well as a series of routines that re-write the **AcerMC** event output to the required PYTHIA format. Using this strategy, the native **AcerMC** code is completely de-coupled from the linked hadronisation library (at the moment PYTHIA/HERWIG) and new interfaces can thus easily be added. The special **AcerMC** requirement is the call to the ACFINAL subroutine at the end of the run which signals the **AcerMC** to close the various I/O files and produce the final output. An example of the implementation of the PYTHIA/**AcerMC** interface can be found in the provided demo_py.f. The PYTHIA code is unmodified apart from making a small modification in PYINIT routine:

CALL UPINIT(1).parameter initialisation..CAL UPINIT(2).process initialisation.

since the user-supplied processes in this new interface are not allowed to (re-)estimate maximal weights (as e.g. the native PYTHIA processes do). In the original code the call to UPINIT is set before the PYTHIA parameters and functions (e.g. PYALPS for \(\alpha_{s}(Q^{2})\) calculation) are initialised with the user settings16.

Footnote 16: This was however possible in the old PYTHIA interface

The user can add the most recent PYTHIA library without other modifications but for the two lines of code in PYINIT routine as described above (the dummy routines UPINIT, UPEVNT, STRUCTM, STRUCTP and PDFSET however have to be removed from the code for an external process to work and to activate the PDFLIB interface).

By setting Acer=1 user decides to generate hard process from **AcerMC** library. Modeling of ISR/FSR shower, hadronisation and decays are generated by PYTHIA generator. All steering parameters, relevant for these steps of full event generation remain the same as in standard PYTHIA execution.

By setting Acer=0 user decides to generate standard PYTHIA process. The simple example how to generate \(ttH\) production process within **AcerMC** framework is provided in demo_py.f.

### Details on the interface to HERWIG 6.3

Interfacing the **AcerMC** to HERWIG 6.3 has proved to be more of a problem 17, since the interfaced version does not comply with the Les Houches standard [3]. The interface routines are nevertheless written in the way to mimic the Les Houches description; in the HERWIG 6.3 interface the UPINIT routine however has to be called in two steps in order to enable the user to add the changes of the HERWIG 6.3 internal settings:

Footnote 17: This interface is temporary and we plan to move to HERWIG 6.4 version in the next future

CALL UPINIT(1).user values.. CALL UPINIT(2)

The UPEVNT subroutine in the HERWIG case replaces the native HWEPRO subroutine as an interface to **AcerMC** processes; in addition, it enables a user to activate more than one process in the same run, which is absent from the native HWEPRO implementation. As in the PYTHIA implementation all the interface subroutines needed for communication between HERWIG and **AcerMC** are stored in acermc_src/interface/herwig_ac.f. Some minor modifications of the original HERWIG 6.3 code were albeit necessary:

* IMPLICIT NONE was commented out in the herwig6301.inc file; this was needed since the **AcerMC** code is written with the implicit IMPLICIT DOUBLE PRECISION(A-H,0-Z).
* The HERWIG interface to PDFLIB was changed in order to link it to the latest PFFLIB804 implementation which has a different PDFSET syntax.

In principle the implemented changes should be very easy and transparent for the transfer into new HERWIG releases; it is also anticipated that a future HERWIG version will already have the interface to PDFLIB updated accordingly, and interface to Les Houches standard implemented. An example of the use of **AcerMC**/HERWIG interface is provided in the file demo_hw.f.

By setting ACER=1 the user decides to generate a hard process from **AcerMC** library. Modeling of ISR/FSR shower, hadronisation and decays are generated by HERWIG generator. All steering parameters, relevant for these steps of full event generation remain valid as for the standard HERWIG execution.

By setting ACER=0 the user decides to generate standard HERWIG processes. The simple example how to generate \(Zb\bar{b}\) production process within the **AcerMC**

[MISSING_PAGE_FAIL:53]

pythia_lib.
* Go to the directory./herwig_lib/src_herwig; type make install. It will compile the sources and install the created library libherwig.a to directory herwig_lib.
* Go to the directory./helas_lib/src_helas; type make install. It will compile the sources and install the created library libhelas.a to directory helas_lib.
* Go to the directory./acermc_src; type make install. It will compile sources and install the necessary object files and the created library libacermc.a to the directory./acermc_lib.
* In the main directory type make demo_py or make demo_hw. It will compile demo_py.f or demo_hw.f and produce the executables demo_py.exe or demo_hw.exe depending on the selected option.
* To execute the programs type run demo_py or run demo_hw. The scripts will change directory to prod and create respective links to data directories there. The execution will also be performed there. All input files should be accessible/routed from directory prod, the output files will also be produced in that directory.

Outlook and conclusions

In this paper we presented the **AcerMC** Monte Carlo Event Generator, based on the library of the matrix-element-based generators and interfaces to the universal event generators PYTHIA 6.2 and HERWIG 6.3. The interfaces are based on the standard proposed in [3].

The presented library fulfills the following goals:

* It gives a possibility to generate the few Standard Model background processes which were recognised as very dangerous for the searches for the _New Physics_ at LHC, and generation of which was either unavailable or not straightforward so far.
* Although the hard process event is generated with matrix-element-based generator, the provided interface allows to complete event generation with initial and final state radiation, multiple interaction, hadronisation, fragmentation and decays, using implementation of either PYTHIA 6.2 or HERWIG 6.3.
* These interfaces can be also used for studying systematic differences between PYTHIA 6.2 or HERWIG 6.3 predictions for the underlying QCD processes.

The complete list of the native **AcerMC** processes implemented so far is: \(gg,q\bar{q}\to t\bar{t}b\bar{b}\), \(q\bar{q}\to W(\to\ell\nu)b\bar{b}\), \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell)b\bar{b}\), \(q\bar{q}\to W(\to\ell\nu)t\bar{t}\), \(gg,q\bar{q}\to Z/\gamma^{*}(\to\ell\ell,\nu\nu,b\bar{b})t\bar{t}\) and the complete EW \(gg\to(Z/W/\gamma^{*}\to)t\bar{t}b\bar{b}\). We plan to extend this not too exhaustive, but very much demanded list of processes, in the near future.

Several improvements of the existing Monte Carlo algorithms/programs have been developed in the process of this work. Let us make short list of the most interesting ones: (1)The colour flow information has been obtained after some modification of MADGRAPH package; (2) The power of the multi-channel optimisation was enhanced by using the modified ac-VEGAS package. We believe that the modification in the VEGAS code represents a very powerful extension of this package; (3) The additions and extensions to the available (multi-channel) phase space algorithms (e.g. Breit-Wigner function with s-dependent width) lead to substantial improvement of the unweighting efficiency; Figs. 3, 5 and 6 illustrate the improvements achieved in the generation efficiency.

Having all these different production processes implemented in the consistent framework, which can be also directly used for generating standard processes available in either PYTHIA 6.2 or HERWIG 6.3 Monte Carlo, represents very convenient environment for several phenomenological studies dedicated to the LHC physics. Such frame was not available to our knowledge so far. We hope that it can serve as an interesting example or even a framework. This way some tools for discussing the ambiguities due to QCD effects are collected,however the necessary discussion for the appropriate uncertainties is still not exhausted. Nevertheless some discussions using this tool can be already found in [7], [8], [9], [12].

## Acknowledgements

We would like to thank Daniel Froidevaux, Torbjorn Sjostrand and Alessandro Ballestrero for several very valuable discussions. We would like also to thank all our colleagues from ATLAS Collaboration who were the first and very enthusiastic users of the preliminary versions of this package. We both very warmly acknowledge the support from the CERN EP division.

## References

* [1] T. Sjostrand et al., _High energy physics generation with PYTHIA 6.2_, eprint hep-ph/0108264, LU-TP 01-21, August 2001.
* [2] G. Marchesini et al., Comp. Phys. Commun. **67** (1992) 465, G. Corcella et al., JHEP **0101** (2001) 010.
* [3] E. Boos at al., _Generic user process interface for event generators_, hep-ph/0109068.
* [4] H. Murayama, I. Watanabe and K. Hagiwara, _HELAS: helicity amplitude subroutines for Feynman diagrams evaluation_, preprint KEK-91-11 (1992).
* [5] G.P. Lepage, J. Comput. Phys. **27** (1978) 192.
* [6] T. Stelzer and W. F. Long, Comput. Phys. Commun. **81** (1994) 357.
* [7] B. Kersevan and E. Richter-Was, ATLAS Internal Note, ATL-PHYS-2001-020 (2001).
* [8] B. Kersevan and E. Richter-Was, ATLAS Internal Note, ATL-PHYS-2001-021 (2001).
* [9] B. Kersevan and E. Richter-Was, ATLAS Internal Note, ATL-PHYS-2001-022 (2001).
* [10] ATLAS Collaboration, _ATLAS Detector and Physics Performance TDR_, CERN-LHCC/99-15 (1999).
* [11] CMS Collaboration, Technical Proposal, report CERN/LHCC/94-38 (1994).
* [12] B. Kersevan and E. Richter-Was, _What is the \(Wb\bar{b}\) background at LHC?..._, ATLAS Internal Note, ATL-COM-PHYS-2001-032 (2001).

* [13] E. Richter-Was and M. Sapinski, ATLAS Internal Note, ATL-PHYS-98-132 (1998), Acta Phys. Polon. **B30** (1999) 1001.
* [14] M. L. Mangano, Nucl. Phys. **B405** (1993) 536.
* [15] G. Marchesini et al., Comp. Phys. Commun. **67** (1992) 465.
* [16] M. L. Mangano, M. Moretti and R. Pittau,_WBBGEN: program for the generation of \(Wb\bar{b}\) + multijet final states in hadronic collisions_, _URL:mlm.home.cern.ch/mlm/wbb/wbb.html._
* [17] J.Campbell and R. K. Ellis, Phys. Rev. **D62** (2000) 114012.
* [18] F. Mazzucato, _Studies on the Standard Model self-couplings_, ATLAS Internal Note in preparation.
* [19] Proceedings of the Large Hadron Collider Workshop, Aachen, 1990, edited by G. Jarlskog and D. Rein, CERN 90-10/ECFA 90-133.
* [20] B. van Eijk and R. Kleiss, in [19], page 184.
* [21] B. van Eijk et al., EUROJET Monte Carlo, Nucl. Phys. **B292** (1987) 1.
* [22] M. Della Negra et al., in [19], page 509.
* [23] T. Sjostrand, Comp. Phys Comm. **82** (1994) 74.
* [24] T. Sjostrand et al.,_High energy physics generation with PYTHIA 6.1_, eprint hep-ph/0010017, LU-TP 00-30, October 2 000.
* [25] J. Gunion, Phys. Rev. Lett. **72** (1994) 199.
* [26] E. Barberio and Z. Was, Comp. Phys. Commun. **79** (1994) 291.
* [27] S. Jadach, J. H. Kuhn, Z. Was, Comput. Phys. Commun. **64** (1990) 275; M. Jezabek, Z. Was, S. Jadach, J. H. Kuhn, Comput. Phys. Commun. **70** (1992) 69; R. Decker, S. Jadach, J. H. Kuhn, Z. Was, Comput. Phys. Commun. **76** (1993) 361.
* [28] T. Pierzchala et al., Acta Phys. Polon. **B32** (2001) 1277.
* [29] H. L. Lai et al, Eur. Phys. J. **C12** (2000) 375-392. C Ref: "GLOBAL QCD ANALYSIS OF PARTON STRUCTURE OF THE NUCLEON: C CTEQ5 PPARTON DISTRIBUTIONS" C hep-ph/9903282
* a package for evaluation of Feynman diagrams and integration over multi-particle phase space_, hep-ph/9908288 (1999).
* [31] W. Beenakker et al., _Higgs radiation off top quarks at the Tevatron and at the LHC_ preprint DESY-01-077, hep-ph/0107081.
* [32] E. Richter-Was, D. Froidevaux and L. Poggioli, ATLAS Internal Note ATL-PHYS-98-131 (1998).

* [33] D. Froidevaux and E. Richter-Was, ATLAS Internal Note, ATL-PHYS-94-043 (1994), Z. Phys. **C67** (1995) 213.
* [34] E. Richter-Was, ATLAS Internal Note, ATL-PHYS-2000-024 (2000), Acta Phys. Polon. **31** (2000) 1931.
* [35] J. Hilgart, R. Kleiss, F. Le Dibider, Comp. Phys. Comm. **75** (1993) 191.
* [36] F.A. Berends, R. Kleiss, Comput. Phys. Commun. **85** (1996) 11.
* [37] F. A. Berends, C. G. Papadopoulos and R. Pittau, _NEXT CALIBUR: a four fermion generator for electron-positron collision_, hep-ph/0011031.
* [38] R. Kleiss and R. Pittau, Comput. Phys. Commun. **83** (1994) 141.
* [39] H. Plothow-Besch, Comput.Phys.Commun. **75** (1993) 396.
* [40] S. Jadach, E. Richter-Was, B.F.L. Ward and Z Was, Comput. Phys. Commun. **70** (1992) 305.
* [41] T. Ohl, _Electroweak Gauge Bosons at Future Electron-Positron Colliders_, preprint hep-ph/9911437
* [42] S. Jadach, Comput. Phys. Commun. **130** (2000) 244.
* [43] H.-U. Bengtsson, Comput. Phys. Commun. **31** (1984) 323.
* [44] M.L. Mangano, Nucl. Phys. **B309** (1988) 461.
* [45] F. Caravaglios, M.L. Mangano, M. Moretti, R. Pittau, Nucl. Phys. **B539** (1999) no.1-2, 215.
* [46] K. Odagiri, JHEP **9810:006**, (1998).
* [47] J.H. Field, preprint UGVA-DPNC (1997) 2-170.
* [48] H. Burkhardt and B. Pietrzyk, preprint LAPP-EXP 2001-03 (2001).
* [49] W. J. Marciano, Phys. Rev. **D29** (1984), 580.

[MISSING_PAGE_EMPTY:59]

The Feynman diagrams contributing to the \(q\bar{q}\to W(\to\ell\nu)b\bar{b}\) and \(q\bar{q}\to W(\to\ell\nu)t\bar{t}\) matrix element are just two t-channel diagrams with fermion exchange and double conversion into an off-shell W boson and a virtual gluon; the W boson subsequently decays leptonically into \(\ell\nu\) and the gluon splits into a \(b\bar{b}\) pair or \(t\bar{t}\) pair respectively. (c.f. Figure 2).

Figure 2: The Feynman diagrams for the process \(q\bar{q}\to Wb\bar{b}\to e^{+}\nu_{e}\)\(b\bar{b}\). The same set is used for \(q\bar{q}\to Wb\bar{b}\to e^{+}\nu_{e}\)\(t\bar{t}\) process, with b-quarks replaced by top-quarks.

[MISSING_PAGE_EMPTY:61]

[MISSING_PAGE_EMPTY:62]

Figure A.4: _The Feynman diagrams for the processes \(gg\to(Z/W/\gamma^{*}\to)b\overline{b}t\overline{t}\)._

Example input files

### File run.card

C---------------------------------------------------------------- C  STEERING FILE FOR ACERMC (1.0SETA) - BASIC SETINGS C---------------------------------------------------------------- C---------------------------------------------------------------- TURN ON FFKEY STEERING FILE (DEBUG) LIST C=== CMS/ACSET(1) C Specify the centre-of-mass energy in GeV

CMS 14000.0 C===

C=== ACER C Use AcerMC code C ACER+1 - yes C ACER+0 - no

1CEN 1 C===

C=== PROCESS/IICSET 1RR1Y C Specify the process to generate. The available icerMC processes are: C 1 g + g -> t t^ b b^ (MG) C 2) q + q -> t t^ b b^ (MG) C 3) q + q -> (N->) l nu_1 b b^ (MG) C 4) q + q -> (N->) l nu_1 t t^ (MG) C 5) g + g -> (Z0->) l 1 * b^ b^ (MG) C 6) q + q -> (Z0->) l 1 * b^ b^ (MG) C 7) g + g -> (Z0->) f f^ t^ t (MG) C 8) q + q -> (Z0->) f^ t^ t^ (MG) C 9) g + g -> (Z0/W/gamma->) t^ b b^ (MG) C C In case ACER=0 the native Pythia/Herwig conventions should be used

PROCESS 9 C===

C=== HJD C Control of hadronization/fragmentation/ISN/FSR switches: C HJD=0 - switch off radiation in initial and final state, multiminteraction and C -hadronization C HJD=1 - switch off radiation in final state and hadronization C HJD=2 - switch off hadronization C HJD=3 - full treatment C HJD=4 - switch off radiation in initial state, multiminteraction and hadronization C HJD=5 - switch off radiation in initial state and multiinteraction

HJD 3 C===

C=== PDF-GROUP/ACSET(6) C Choose a PDF group according to PDFLIB804 naming scheme

PDFGRUUP 4 C===

C=== PDF-SET/ACSET(7)

[MISSING_PAGE_EMPTY:65]

C Cutoff value on the invariant mass n_Z/gamma* in GeV when ZGMMH=1. C Note that the provided data files exist only for values of C ZGCUT=2,5,10,15,30,60,120,270,300,500 GeV which should satisfy most C users. In case a different value is set the user has also to provide C the user data files for the run.

1 ACSEF15 10.0 C===

C THE ACFMC ADVANCED SWITCHES -------------------------------------------------

C=== ALPHA_S/ACSET(8) C Use the alpha_s provided by the linked generator (Pythia/Herwig) or the C one provided by lcerMC C 4LPHHS=0 - use the linked generator's alpha_s C 4LPHHS=1 - use the lcerMC's alpha_s (one loop calculation) C 4LPHHS=2 - use the lcerMC's alpha_s (three loop calculation) 4CSEF 0 C===

C===

C=== LMB0L_S/ACSET(9) C Specify the value of lambda^(nf=5)_HSbar for lcerMC alpha_s calculation C LMB0L5=-1 - the value is taken from PDFLIB804 for the corresponding C parton density function set C LMB0LBS30 - the provided value is taken ICSEF9 -1.

C===

C=== ALPHA_EM/ACSET(10) C Use the alpha_0ED provided by the linked generator (Pythia/Herwig) or the C one provided by lcerMC C 4LPHEM=0 - use the linked generator's alpha_0ED C 4LPHEM=1 - use the lcerMC's alpha_0ED 4CSEF10 0 C===

C===

C===

C===

 ALPHA_EM(0)/ACSET(11) C Specify the value of alpha_QED(0) for lcerMC alpha_QED calculation C 4LPHEM=0-1 - the default lcerMC value is used C 4LPHEM=0 - the provided value is taken

1 ACSEF11 -1. C===

C===

TOP S-L/ACSET(12) C Specify the decay mode of WW pair produced by top decays in lcerMC C processes 1,2,4,7,8 and 9: C TOP0DE=0 - both W bosons decay according to Pythia/Herwig switches C TOP0DE=1 - one W decays into electron + mu and the other one hadronically C TOP0DE=2 - one W decays into muon + mu and the other one hadronically C TOP0DE=3 - one W decays into tau + mu and the other one hadronically C TOP0DE=4 - one W decays into el or mu + mu and the other one hadronically C TOP0DE=5 - one W decays into el or mu + mu and the other one hadronically, the C W decaying leptonically has the same charge as the primary W; the decay C mode makes sense only for lcerMC processes 4! C When TOP0DEC0 the output cross-section is 1LREADDY MULTIPLIED by the corresponding C branching ratio! (Courtesy of lcerMC authors)

1CSEF12 0 C===

C THE ACFMC TRAINING SETUP AND UNWEIGHTING TREATMENT -------------------------------------------------

C=== MODE/ACSET(50) C Specify the lcerMC training mode: C MODE=0 - normal run, generate unweighted events C MODE=1 - perform multi-channel optimisation. C MODE=2 - perform VEA1S grid training.

C MODE=3 - perform VEA1S grid training as MODE=2 but does this by updating a provided grid

lCSET50 0 C===

C=== USEA/lCSET(52)

C Use the data files provided by user

C USER=0 - no, use internal files

C USER=1 - use the user's multi-channel optimisation and VEGAS grid files

C USER=2 - use the default multi-channel optimisation and user's VEGAS grid files

C USER=3 - use the default multi-channel optimisation and VEGAS grid files, read the user

C maximal weight file.

lCSET52 0 C===

C=== MLEITID/lCSET(53)

C Search for the maximum weight needed for event unweighting

C MMIFIID=0 - no, use the provided file for max. weights

C MMIFIID=1 - use the provided file for max. weights, re-calculate the max. weights using

C the stored 100 highest events

C MMIFIID=2 - perform the search and give the wtmax file, equivalent to generation of

lCSET53 1 C===

C=== EPSILOH/lCSET(54)

C Use the epsilon minimal weight or the overall maximal weight found in training (see the

C manual for the difference)

C EPSILOD=0 - use the epsilon max. weight

C EPSILOD=1 - use the overall maximal weight

lCSET54 0 C===

C ---------------------------------------------------------------------

END

[MISSING_PAGE_EMPTY:68]

[MISSING_PAGE_EMPTY:69]

[MISSING_PAGE_EMPTY:70]

[MISSING_PAGE_EMPTY:71]

### File herwig.out

HERWIG 6.301 9 July 2001

Please reference: G. Marchesini, B.R. Webber. G.Abbiendi, I.G.Knowles, M.H.Seymour & L.Stanco

Computer Physics Communications 67 (1992) 465

and

G.Corcella, I.G.Knowles, G.Marchesini, S.Moretti, K.Odagiri, P.Richardson, M.H.Seymour & B.R.Webber,

JHEP 0101 (2001) 010

INPUT CONDITIONS FOR THIS RUN

BEMM 1 (P ) MOM. = 7000.00

BEMM 2 (P ) MOM. = 7000.00

PROCESS CODE (IPROC) = 90660

NUMBER OF FLAVOURS = 6

STRUCTURE FUNCTION SET = 8

A2IM SPIIS CORRELATIONS = 7

A2IM SOFT CORRELATIONS = 7

OCD LINADAQ (GEV) = 0.1460

DOWN QUAK MASS = 0.3200

UP QUAK MASS = 0.3200

STABLEQUE QUAK MASS = 0.5000

CHAREDQ QUAK MASS = 1.1560

BOTOTON QUAK MASS = 4.8000

TOP QUAK MASS = 175.0000

QUOK EFFECT MIS = 0.7500

ETTRA SHOWER CUTOFF (G) = 0.4800

ETTRA SHOWER CUTOFF (G) = 0.1000

PHOTON SHOWER CUTOFF = 0.4000

CUSTER MASS PARAMETER = 3.3500

SPICAL LISE EVOLN CUTOFF = 2.5000

INTIRISIC -TLA (MS) = 0.0000

MIN MTM FAC FOR ISR =1.0000E-04

1-MAI MTM FAC FOR ISR =1.0000E-06

NO EVENTS WILL BE WRITTEN TO DISK

B.d: Delt-M/am =0.7000 Delt-Gam/2+am =0.0000

B.s: Delt-M/am = 10.00 Delt-Gam/2+am =0.2000

PDFLIB USED FOR BEAM 1: SET455 OF lcer:NC

PDFLIB USED FOR BEAM 2: SET455 OF lcer:NC

Checking consistency of particle properties

Checking consistency of decay tables

INPUT EVET WEIGHT = 6.9480E-03

INPUT MAI WEIGHT = 6.9480E-03

SUBROUTIBE TIMEL CALLED BUT NOT LINAED.

DUHMY TIMEL WILL BE USED. DELETE DUHMY

AND LINA CERNLIB FOR CPU TIME REMINING.

EVENT 1: 7000.00 GEV/C P ON 7000.00 GEV/C P PROCESS: 90669

[MISSING_PAGE_FAIL:73]