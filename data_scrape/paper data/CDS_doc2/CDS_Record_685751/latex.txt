ATLAS DAQ note 94-34

8 December 1994

**The level-1 / level-2 interface: RoI Unit**

Y. Ermoline

ermolin@cernvm.cern.ch

The aim of this note is to discuss tasks of a RoI Unit as a part of a level-1/level-2 interface, interactions between the RoI Unit and other parts of the level-1 and level-2 trigger systems and the possible implementation and characteristics of the RoI Unit. It is based on some initial work on the RoI Unit that has been already done [1-3].

## 1 Level-1 / level-2 interface

The ATLAS level-1 trigger system [4] consists of subtrigger processors (calorimeter and muon), a Central Trigger Processor (CTP) that combines the subtrigger results and makes the overall yes/no decision and a trigger, timing and control distribution system which distributes the trigger decision. In addition the level-1 trigger system provides necessary information about accepted events for a level-2 trigger system.

### Event information

The level-1 trigger system may provide different kinds of an information which may be interesting for the level-2 trigger system:

* related to Regions of Interest (RoI) identified by the level-1 trigger system,
* related to the whole event,
* related to a level-1 trigger system decision made and a decision criteria,
* some additional information which may be interested for the level-2 trigger system.

The RoI related information will be used for a RoI_Data extraction and collection from a level-2 buffers and a RoI_Feature extraction in Local Processors. The other information may be used by Global Processors in level-2 trigger system.

One part of this information is 'dynamic' - e.g. the RoI related information. It is originated from the input level-1 trigger system data and changed on an event by event basis. This information have to be provided for the level-2 trigger system for every accepted event.

Another part may be assumed as'static' - e.g. a level-1 trigger system decision criteria which may be changed quite seldom (on a run by run basis). This information (mainly level-1 trigger system parameters) is set by a Detector Control System. It may be provided for the level-2 trigger system but do not need to be sent with every accepted event.

There are have to be separate paths to provide 'dynamic' and'static' parts of the level-1 trigger system information to the level 2. For the 'dynamic' part fast link may be used and the'static' part may be sent via the Detector Control System interface (to be defined) to an appropriate place inside the level-2 trigger system.

### Interface partitioning

An interface between the level-1/level-2 trigger systems have to collect from the level-1 trigger system all necessary 'dynamic' information and to deliver this information to level-2 trigger system resources allocated for the event. Though this interface (called sometimes RoI Builder) may have three functional parts: a Collection Unit (called later the RoI Unit), an Allocation Unit and a Distribution Unit.

These functional parts may be concentrated in one physical device (and be part of the level-1 or level-2 trigger systems), or they may be separated into several devices. In note [3] we defined the Allocation Unit (joined with the distribution unit) as a part of a level-2 trigger system Supervisor and the RoI Unit as a part of the level-1 trigger system.

### RoI Unit tasks

The RoI Unit has to provide all necessary 'dynamic' event information for the Allocation Unit inside the level-2 trigger system for each event accepted by the level-1 trigger system. The main tasks for the RoI Unit, as they are seen now, are:

* collecting an event information (RoIs related and whole event related data),
* generating a RoI_Message in a defined format,
* sending the RoI_Message to the Allocation Unit.

Follow above list the RoI Unit has to have interfaces to the parts of the level-1 trigger system having a necessary information. This 'raw' information have than to be converted to an appropriate form. The RoI_Message will be generated in a format witch suits the Allocation Unit demands, embedded in a frame defined by a transmission protocol used and sent to the Allocation Unit.

## 2 Input data for the RoI Unit

Data are originated from different parts of the level-1 trigger system and appeared in different time during a level-1 processing latency. They have to be stored in pipelines until forming a final level-1 trigger system decision (T1_Accept signal generated by the Central Trigger Processor). Lengths and widths of the pipelines will be different for the different RoI Unit input data. They will be estimated later for each particular case (relatively to the final decision in CTP).

### RoI_Position map

A granularity for the generation of a RoI_Position is \(\Delta\eta\) x \(\Delta\phi\) = 0.1 x 0.1 as this is a finest granularity available in the level-1 trigger system (the calorimeter electron/photon trigger).

For the coverage \(|\eta|\)<3.0 and 0<\(\phi\)<2\(\pi\) this gives 6+6 bits RoI map in \(\eta\)-\(\phi\). Do we need more precision in RoI_Position definition (7+7 bits?) - see below.

### Calorimeter subtrigger data

The calorimeter subtrigger [5] may provide for the level-2 trigger system a RoI information about electrons/photons and jets candidates both contributing and not to the first-level decision. In addition the value of a calculated missing-\(\mathrm{E_{T}}\) plus \(\mathrm{E_{x}}\) and \(\mathrm{E_{y}}\) components are available.

#### Electron/photon Trigger Logic

The electron/photon trigger logic is based on a cluster ASIC with the trigger cell granularity of \(\Delta\eta\) x \(\Delta\phi\) = 0.1 x 0.1 and a total number of trigger'reference' cells approximately 4000. Each ASIC processes 4 x 4 trigger'reference' cells. A total of 256 such ASICs will be required (4 ASICs on a cluster processor module, 16 modules in a cluster processor crate - 4 crate in total).

The electron/photon trigger will generate RoI_Position using the full granularity of the trigger cell input data (\(\Delta\eta\) x \(\Delta\phi\) = 0.1 x 0.1). Each cluster ASIC will provide sixteen-bit RoI output, which is the 4 x 4 'RoI pixel array' for one cluster threshold value. These 16-bit words have to be stored in pipeline (11 steps?) inside the cluster ASICs until T1_Accept signal receiving. Then four 16-bit words from the cluster processor module will be provided for the subsequent transfer to the RoI Unit.

In a case the level-2 trigger system well be interested in the threshold value used during electron/photon 'RoI pixel array' generation it may be provided via a Detector Control System interface to an appropriate place.

#### Jet Trigger Logic

The considered jet algorithm uses jet trigger cells granularity of \(\Delta\eta\) x \(\Delta\phi\) = 0.4 x 0.4 and a total number of jet'reference' cells approximately 256. An each jet ASIC (32 ASICs in total) processes 4 x 2 jet'reference' cells. With four jet ASICs per jet processor module a total of eight modules in a single crate will be required in the system.

The jet trigger will generate RoI_Position with granularity of \(\Delta\eta\) x \(\Delta\phi\) = 0.4 x 0.4. A veto ASICs inside a jet cluster counting module (16 ASICs in total) will provide 4 x 4 'jet RoI pixel array' for one jet threshold value. These 16-bit words have to be stored in pipelines (8 steps?) inside the veto ASICs until T1_Accept signal receiving. Then 16 16-bit words from the jet cluster counting module will be provided for the subsequent transfer to the RoI Unit.

The threshold value used during jet RoI pixel array' generation may be provided to the level-2 trigger system via a Detector Control System interface.

#### Missing-\(\mathrm{E_{T}}\) Logic

The missing-\(\mathrm{E_{T}}\) calculation starts on the cluster processor module, where \(\mathrm{E_{x}}\) and \(\mathrm{E_{y}}\) components (two 16-bit words) of the total energy in the fully processed 8 x 8 trigger-cell area of the calorimeter is calculated. Two result modules in each cluster processor crate (one for \(\mathrm{E_{x}}\) and one for \(\mathrm{E_{y}}\)) carry out further summing. These sums (four 16-bit words for \(\mathrm{E_{x}}\) and four 16-bit words for \(\mathrm{E_{y}}\)) are transmitted to the missing-\(\mathrm{E_{T}}\) module where full \(\mathrm{E_{x}}\) and \(\mathrm{E_{y}}\) values as well as \(\mathrm{E_{T}}\) = \(\sqrt{\mathrm{E_{x}}}\) 2 + \(\mathrm{E_{y}}\) 2 are calculated.

These three 16-bit words have to be stored in pipelines (5 steps?) inside the missing-\(\mathrm{E_{T}}\) module until T1_Accept and then provided for the subsequent transfer to the RoI Unit.

An information from the forward calorimeter may be used during the missing-\(\rm{E_{T}}\) calculation [6] but until now there are no well defined design yet.

### Muon subtrigger data

The muon trigger system [7] is divided into sectors in \(\phi\) (24 in the barrel, \(\Delta\phi\) = 0.25; 32 in the endcaps, \(\Delta\phi\) \(\approx\) 0.2) and four regions in \(\eta\) (two half barrels, \(|\eta|\)<1.1, two endcaps, 1.1<\(|\eta|\)<3.0). The trigger is done with a fast coincidence between z-strips on different planes in (r-\(\phi\)) projection and between \(\phi\)-strips on different planes in (r-\(\phi\)) projection by using programmable coincidence matrix ASICs. In the final system, the ASICs will contain 32x48 coincidence matrices, corresponding to 32'reference' strips and allowing a road width up to 16 strips. The ASIC will provide three programmable road definitions, corresponding to three different \(\rm{p_{T}}\) thresholds. The same ASICs may be re configured internally to provide both low-\(\rm{p_{T}}\) and high-\(\rm{p_{T}}\) triggers.

In the full barrel sector (-1.1<\(\eta\)<1.1) there will be about 20 ASICs for low-\(\rm{p_{T}}\) and about 20 ASICs for high-\(\rm{p_{T}}\) triggers in (r-z) projection. Thus each ASIC defines a track in a region of the detector of \(\approx\) 0.1 x 0.25 in \(\Delta\eta\) x \(\Delta\phi\). The information from the ASICs in each sector will be collected and summarising (for up to two muon candidates per sector) by a local Sector Muon Trigger, located at the centre of the detector. The following information is sent from the sector to a Central Muon Trigger via optical links (26-bit word):

* is it necessary?
* is it necessary?
* ASIC number ( 20 ASICs -> 5 bits ),
- highest \(\rm{p_{T}}\) threshold passed ( low/high trigger -> 1 bit, three roads -> 2 bits )
* Track#2 -.....

A design for the endcaps is not defined yet but will be similar to the one of barrel sector.

The Central Muon Trigger generates a global muon trigger information and passes it to the Central Trigger Processor inside the level-1 trigger system. As until now there are no well defined designs for the Sector Muon Trigger and the Central Muon Trigger. We assume that the Central Muon Trigger will also generate RoI information which may include (14-15 bits for each RoI):

* ASIC number (5 bits) + sector number (5 bits). This information may be converted into \(\eta\)-\(\phi\) in the chosen RoI map (6+6 bits) -? how to match 0.1 x 0.25 granularity of muon trigger with 0.1 x 0.1 granularity
- shall we use granularity of 0.05 x 0.05 (7+7 bits) or 0.1 x 0.05 (6+7 bits).
* do we need to transmit this value together with RoI_Position in a case only one value is used as RoI threshold.

This information has to be stored in (5?) steps pipelines until T1_Accept and then provided for the subsequent transfer to the RoI Unit.

### Central Trigger Processor data

From the CTP [8] the following information on event trigger decision may be provided for the level-2 trigger system:

* an input information used to form level-1 trigger system decision,
* an output information from the decision logic,
* a decision criteria used.

The input information for the CTP is provided by the calorimeter and muon subtrigger processors in a form of Subtrigger Data Patterns - SDP (for the moment are assumed to be either 4 bits or multiples of 4 bits wide). As until now the exact number of SDP inputs is not fully defined yet. At present it is planed to group 32 inputs into a SDP-slice (possibly implemented in one physical device, e.g. board) scalable up to 128 SDP inputs. After a synchronisation SDPs are strobed into an Alignment register and presented to a decision logic.

The decision logic forms a set of possible trigger candidates (TC) which are grouped in a 32 possible TC slice scalable up to 96 candidates. Some TC may be disabled by individual veto signals and result is stored into an Intermediate trigger register. A high occurrence of some TC may be reduced by prescalers. Finally remaining trigger candidates are stored into a Trigger register.

A contention of the Alignment register (1+4 32-bit words, 32+128 bits) inside the SDP module and the Trigger register (1+3 32-bit words, 32-96 bits) inside the Decision module the has to be stored in (correspondingly) three and one steps pipelines until T1_Accept and then provided for the subsequent transfer to the RoI Unit. (Should the direct decision logic outputs be provided to the RoI Unit as well?). This information then will be included in the RoI_Message for the level-2 trigger system.

The decision criteria used for the performing overall yes/no decision is assumed to be'static'. They may include:

* a description of the decision logic for trigger candidates selection (?),
* veto pattern for trigger candidates (1+12 32-bit words, 32+384 bits),
* settings for trigger candidates prescalers (32+96 12-bit words, 384+1152 bits), etc.

We assume that they will not be sent to the level-2 trigger system via the RoI Unit and may be provided via a Detector Control System interface (to the Global Processors or the Allocation Unit or another place).

### Event identification information

We assume that input data will be labelled by the same time tag (Event_ID) as the detector front-end data upon receiving the T1_Accept signal. The T1_Accept signal is generated by the Central Trigger Processor and broadcasted to the detector front-end through an optical fibre distribution network terminated by timing receivers.

The exact origin for the Event_ID is not defined yet but at least two possibilities are foreseen:

* The Central Trigger Processor. In this case there will be just one point in whole system where this value (Event_ID) will be generated. It will need several bunch crossing (depending from transmission rate used) to deliver this value to destinations as the data are transmitted serially. This may be acceptable as two bunch crossing dead-time between T1_Accept signals is already accepted for ATLAS.
* The timing receivers. The Event_ID will be generated in a number of points inside the system what may cause some errors. The delivery of the Event_ID will be fast and will not introduce any additional latency.

A different sources for the Event_ID generation may be chosen - a bunch crossing counter, a T1_Accept counter or even a pseudo random generator.

* The bunch crossing counter works with 40 MHz input frequency. An average mean time between T1_Accept signals is 10 \(\upmu\)s. It means that 8 least significant bits of this counter will actually not be used.
* The T1_Accept counter works with a maximum level-1 trigger system rate of 100 kHz and has to have enough length to generate the Event_ID.
* The random generator has to have a sufficient generation period.

The length of the Event_ID to be used has satisfy a condition of a unique identification of event data during all their life in the level-2 trigger system. The maximum input rate to the level-2 trigger system is limited to \(\sim\)100 kHz. The output rate is 10\({}^{2}\)+10\({}^{3}\) Hz. About 10\({}^{3}\) events may coexist in the system an the same time. The 10+11 bit Event_ID may be sufficient to satisfy above condition.

For a time being we assume that the Event_ID is generated by the Central Trigger Processor (inside the Decision module) and the 10+11 bits T1_Accept counter is used as the source.

### Input data summary

The following table summarises the above information about input data to the RoI Unit. An origin is a place (module) inside the level-1 trigger system where data are generated. The whole number of such modules is counted in the second column.

\begin{tabular}{||c c c c c c||} \hline \hline Origin & Number & Words & Bits & Steps & Total \\ Cluster processor modules & 64 & 4 & 16 & 11 & 256 \\ Jet cluster counting module & 1 & 16 & 16 & 8 & 16 \\ Missing-ET module & 1 & 3 & 16 & 5 & 3 \\ Central Muon Trigger & 1 & 2+3 & 14+16 & 5 & 2+3 \\ SDP module & 1+4 & 1 & 32 & 3 & 2+8 \\ Decision module & 1 & 1 & 32+96 & 1 & 2+6 \\ Event_ID (Decision module) & 1 & 1 & 10+11 & 0 & 1 \\ \hline \end{tabular}

A number of words, generated inside each module(s), a number of bits per word and a number of pipeline steps to hold the data until the T1_Accept signal generation are counted in the subsequent columns. In the last column a total number of 16-bit words for that origin is shown.

## 3 Input data collecting and processing

The input data for the RoI Unit have to be collected after the T1_Accept signal generation. This task may be performed by using crate readout controller modules (ROCs), provided in the level-1 trigger system according to its physical partitioning.

When the ROCs receive T1_Accept signal they read all relevant information from modules in the crate via common backplane interface. This information will include level-1 trigger system data to be transferred to the level-2 buffer, data for the RoI Unit and necessary monitoring data. A processor inside the ROCs will generate records for the RoI Unit. These records will be transfer to the RoI Unit when requested (sequentially or in parallel from all ROCs).

Alternatively the input data for the RoI Unit may be provided directly from the data sources via separate readout path(s). It may be physically implemented in the same crates and ROCsbut bypassed the common readout chain. In this case the data may be provided to the RoI Unit faster.

As at present there are no any decision about crates, backplanes interfaces and ROCs implementation. We may try to defined a points where now it is possible to make some assumption follow a possible readout hierarchy.

### Interface to the input data

The input data are stored in the pipelines until forming a final level-1 trigger system decision (T1_Accept). Accepted data are transferred then to the derandomising FIFOs and sent to the RoI Unit. Thus for each individual bit a following chain have to be implemented:

These circuits may be implemented inside the cluster and veto ASICs (see above). For other input data sources they have to be done separately and may be implemented in an ASIC or FPGA form. This FPGA may be used also instead of internal implementation of such a circuit inside the cluster and veto ASICs. We may mentioned that a similar circuits used for the readout of subdetector front-ends and common approach and design may be used.

As it is seen from the above table individual bits may be grouped, for example, in 16-bit words. The number of steps in the pipelines may vary for different groups (from 0 to 9 steps) which implies the need of variable length pipeline for such an implementation. The depth of a derandomising FIFO may be chosen the same as for the detector front-ends readout systems (for the time being this depth is assumed to be 4 steps). A readout interface have to be defined according to a chosen readout procedure. Internally the FPGA may has a following structure:

\begin{tabular}{c c c}  & Input\_Data & T1\_Accept \\ \end{tabular}

Input data (N bits, e.g. 16+32) are stored in a variable length pipeline (VLP, a circuit similar to be used in the Central Trigger Processor). The depth of the VLP (M bits, e.g. 10+16 bits) may be selected by writing into a Length Register (4 bits). Upon receiving the T1_Accept signal data from the pipeline are stored in 4 step depth derandomising FIFO. A readout procedure may be performed in different ways, for example:

* the readout interface is selected by an external or internal address logic and sends only Data responding to a request
- synchronously or using handshake. As the maximum number of FPGAs may be ~64 per crate (the cluster processor crate) six address lines will be necessary. Some additional logic may be implemented for a sparse data readout.
* the readout interface is selected by an input request signal. If the FIFO contains non-zero data they are sent together with FPGA address (6 bits, written in an Address Register) to the requester. Then the interface is switched to a Pass Mode (the input request is passed to the next FPGA). If the FIFO contains zero data the is also switched to the Pass Mode. The last FPGA sends termination signal to the requester.

A VHDL description of the FPGA may be developed for more precise definition of its features and selecting the readout procedure. The whole number of such 16 bits Input_Data FPGAs will be ~290.

### Readout procedure and an interface to the RoI Unit

We may envisage two levels of the readout hierarchy - a crate level readout and an inter-crate data transfer to the RoI Unit. A total number of possible data sources is ~290 (16-bit words), but the real number of words to be transferred to the RoI Unit for each event may be less.

It is assumed [9] that a typical level-1 trigger produces in average 2 electron/photon RoIs plus 3 jet RoIs plus 1 muon RoI. That means that from the cluster processors modules only 2 words will contain non-zero data plus 3 words from the jet cluster counting module and 1 word from the Central Muon Trigger crate. In addition there are 3 words from the missing-E\({}_{\mbox{T}}\) module and 5+15 words from the Central Trigger Processor crate. This gives ~14 16-bit words per event in average. These words must be tagged with FPGA address, which gives several words to be read in addition (~20 in total, depending on implementation).

The data from the FPGAs are read inside crates by one of the described above methods. The longest readout time may be required in the Central Trigger Processor crate (5+15 16-bit words plus 1-2 FPGA addresses, depending on implementation). With 100 ns/word it gives 0.7+1.7 \(\mu\)s maximum crate readout time.

A data transfer from the crates to the RoI Unit may be performed sequentially crate by crate initiated by RoI Unit. For ~20 words per event and 100 ns/word readout time would be ~2.0 \(\mu\)s. In a case the data are pushed by crate's ROCs to the input buffers in the RoI Unit the readout time is a maximum readout time per crate.

The actual implementation of the readout path needs more detailed technical design for the level-1 trigger system. Several points may be addressed during a decision procedure:

* is it physically separated from the general readout path to the ROC or not.
* addressable or ring readout.
* Sequential or parallel data transfer from the crates to the RoI Unit.
* Format of the data to be sent to the RoI Unit from the crate.
* Monitoring points on the data path to the RoI Unit and a physical place for the RoI Unit inside the level-1 trigger system.

We may mention that an organisation of the readout may also affect a generation of the RoI_Message as it is further discussed.

## 4 RoI_Message(s)

The RoI Unit receives the event information from the all relevant parts of the level-1 trigger system and generates the RoI_Message. This message has to include all necessary'dynamic' event information which the level-2 trigger system may need for its operation. The event information may be embedded in a frame, defined by a transmission protocol used.

### RoI_Message(s) contention and format

As it has been mentioned in 1.1, the contention of the RoI_Message may include an information related to the whole event (Event_ID, Number_of_RoIs, missing-E\({}_{\text{T}}\)), related to the level-1 trigger system decision (CTP patterns) and related to the RoIs (RoI_Types, RoI_ Positions, etc.). We may mentioned some criteria which may be important for defining the RoI_Message format:

* a possibility of generation the RoI_Message 'on flight' during readout without intermediate storing and adding too much additional processing time,
* a consequential use of the RoI_Message by the Allocation Unit in a way, permitted fast resources allocation and the Allocation_Message distribution.

A possible format for the common RoI_Message may look like the following (assuming the typical level-1 trigger - 2 electron/photon RoIs plus 3 jet RoIs plus 1 muon RoI, and the full configuration of the CTP - 128 SDP inputs and 96 TC outputs):

* defined by a transmission protocol.
* Event_ID ( 11 bits ),
- Number_of_RoI ( 4 bits ),
- maximum 15 RoIs
- CTP input pattern ( 128 bits ),
- CTP output pattern ( 96 bits ),
- 272 bits in total
- E\({}_{\text{x}}\), E\({}_{\text{y}}\) and missing-E\({}_{\text{T}}\) (48 bits ), \(\mid\)
* two such blocks):
- RoI_Number ( 4 bits ),
- #1 and #2
- RoI_Type ( 2 bits ),
- RoI_Types #1
- RoI_Position ( \(\eta\)-\(\phi\), 6+6 bits ),
* three such blocks):
- RoI_Number ( 4 bits ),
- #3, #4 and #5
- RoI_Type ( 2 bits ),
- RoI_Types #2
- RoI_Position ( \(\eta\)-\(\phi\), 6+6 bits ),
* RoI_Number ( 4 bits ),
- RoI_Type ( 2 bits ),
- RoI_Types #3
- RoI_Threshold ( 12+3 bits )
- PT threshold used for RoI generation
* defined by a transmission protocol.

The volume of this common RoI_Message is \(\sim\)430 bits. The RoI_Message transmission time in this case (assuming 100 Mbits/s transmission rate) is 4.3 \(\upmu\)s - more than the readout time.

About half of the common RoI_Message in this case is occupied by the information, related to the level-1 trigger system decision (CTP patterns) plus missing-E\({}_{\text{T}}\) (\(\sim\)270 bits in total). At present this information assumed to be used only by the Global Processors.

It seems possible (and may be even natural) to split the common RoI_Message at least into two separate messages, generate them separately and send them in parallel via separate links. One of them (one may call it an Event_Message) will carry CTP patterns and E\({}_{\text{x}}\), E\({}_{\text{y}}\) andmissing-E\({}_{\text{T}}\). The other - the RoI_Message - will carry RoI_Pointers. The Event_ID will be included in both messages as well as Message_Header and Message_Terminator. The volume of them may be estimated as ~310 bits for the Event_Message and ~160 bits for the RoI_Message.

In no doubt a different format for the messages may be used, more compact, without unnecessary data and better matched to the allocation task. As an example, below is a possible RoI_Message format fitted in 16-bit words (with RoI_Pointers only, assuming the typical level-1 trigger - 2 electron/photon RoIs plus 3 jet RoIs plus 1 muon RoI):

* Message_Header (16 bits)
* Event_ID (11 bits) + Number_of_RoI (4 bits)
* Electron/photon RoI #1
* Electron/photon RoI #2
* Jet RoI #1
* Jet RoI #2
* Jet RoI #3
* Muon RoI
* Message_Terminator (16 bits)

The RoI_Number for each RoI is defined by the position in the RoI_Message. The volume of this RoI_Message is nine 16-bit words (144 bits).

### RoI_Message(s) generation and transmission

There are two possible ways of the RoI_Message(s) generating - hardware and software implementation. Hardware implementation of this task (e.g. a circuit based on FPGAs) may work faster but with a less of flexibility (this is, however, not obvious as one may reprogram FPGA configuration to match new demands). A programmable processors may provide a more flexible option (test using a DSP has been done [2]) assuming some increase in performance.

Some event data collected during readout may be included in the output RoI_Message(s) without any conversion (the Event_ID, the CTP data, the missing-E\({}_{\text{T}}\) data). Data from the cluster ASICs (the electron/photon trigger) and from the veto ASICs (jet trigger) - bit patterns and FPGA addresses - have to be converted into the RoI_Types and the RoI_Positions. An information from the Central Muon Trigger may need some conversion as well. During the readout the Number_of_RoI may be calculated and included in the outgoing RoI_Message (it seems better to have the Number_of_RoI in RoI_Message before RoI_Pointers for possible further check, but this may involve an intermediate buffering).

In a case of generating two (or more) separate messages (e.g. the Event_Message and the RoI_Message) the readout may be performed in parallel for two parts of the level-1 trigger system, according to the data to be included in the messages. The outgoing message is formed in intermediate buffer first and when readout is finished the message is sent to the Allocation Unit in the Supervisor.

The definition of the RoI_Message(s) transmission path may involve some clarification of the following points (this list in not necessarily complete):

* how remote will be the RoI Unit from the Supervisor, may be a parallel data transfer used or data have to be transmitted serially,
* push or pull, with or without handshake, where to put buffers, etc.,
* how to pack messages into transmitted frames without adding many extra bits,
* a possible uniformity of the data transmission path with the similar one for the subdetector front-ends systems.

## 5 Conclusions

As a conclusion we may highlighted some points from the written above:

* The input data for the RoI Unit originate from about 300 sources in more than 70 modules housed in 8 crates. Zero suppression and parallel readout should be used to speed up the collecting procedure.
* An custom interface FPGA(s) may be developed for the readout purposes, a common approach may be found regarding to a subdetector front-ends readout.
* The level-1 trigger system information may be collected and sent to the level-2 trigger system Supervisor as separate messages (e.g. the RoI_Message and the Event_Message) and then used differently by the Supervisor.

We assume that further more detailed investigations in other parts of the level-2 trigger system Supervisor as well as the whole level-2 trigger system will give necessary feedback for more precise definition of the RoI Unit itself.

## 6 Acknowledgements

I would like to thank A.T.Watson, H.Wendler, S.Gross and J.Strong for useful discussions and comments which have been included in this note.

## References

* [1] N.Ellis: Ideas for Local/Global Level-2 Trigger System, RD-27 note 7, 4 March 1993.
* [2] P.Hanke, M.Keller: RoI-Building: Results from a First Demonstrator, RD-27 note 25, March 1994.
* [3] Y.Ermolin: The level-2 trigger system supervision, ATLAS DAQ note 94-35, 8 December 1994.
* [4] First-level Trigger System for LHC Experiments, CERN/DRDC 93-32, RD-27 Status Report, 11 August 1993.
* [5] I.P.Brawn et al.: The Level-1 Calorimeter Trigger System for ATLAS, ATLAS DAQ note 94-30, 8 December 1994.
* [6] N.Ellis: Forward Calorimetry and the Level-1 Trigger RD-27 note 20, 14 December 1993.
* [7] R.Cardarelli et al.: Level-1 muon trigger, ATLAS DAQ note 94-39, 9 December 1994.
* [8] C.Jacobs et al.: First Level Central Trigger Processor for LHC Experiments, ATLAS DAQ note 94-33, 8 December 1994.
* [9] R.Bock and P.LeDu: Readout data specification for modelling a level-2 trigger using regions of interest, ATLAS DAQ note 94-25, 5 December 1994.