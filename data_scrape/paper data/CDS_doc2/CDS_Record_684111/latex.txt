[MISSING_PAGE_EMPTY:1]

###### Contents

* 1 Introduction
* 2 Mechanics and Optics
* 3 Electronics
* 4 Protocol
	* 4.1 Introduction
	* 4.2 CIS
	* 4.3 Fast Pulse
	* 4.4 Slow Integrator
	* 4.5 Data Analysis and Decision
	* 4.6 Sequence of operations
* 5 Software
* 6 First Test
* 7 Conclusions
* A The DAQ software

Introduction

The PMT-block [1] is the device used in the ATLAS Tile Calorimeter to convert light into electric signals. It is composed of a photomultiplier tube (Fig. 1), a light mixer (the interface between the PMT and the fiber bundle), a high voltage divider, and a 3-in-1 card which is the interface with the electronics read-out.

The PMT is assembled inside a soft iron and a mu-metal cylinders which provide adequate magnetic shielding. Fig. 2 shows the PMT-block assembled and the individual pieces.

The PMT-blocks will be housed in _super-drawers_ which provide the mechanical support to PMTs and electronic boards, supply high voltages to the PMT dividers and low voltages to the 3-in-1 cards, convey control and calibration signals to 3-in-1 cards. Super-drawers also house the electronics to process signals from the 3-in-1 shaper and integrator.

Figure 1: A picture of the Hamamatsu R7877 and its divider.

Figure 2: The PMT-block. a) at left the individual pieces are shown and b) at right the PMT-block is fully assembled.

All the components assembled in a PMT-block will undergo a Quality Control procedure; however it is necessary to check the functionality of the PMT-block as a whole, before it is inserted in a super-drawer. This test bench is intended to check each specific functionality of a PMT-block, while no attempt is made to characterize the individual components as specific test benches are dedicated to this task. The result of this test bench will be either _Full Functionality_ or identification of the parts which are not working properly with a brief description of the problem.

The PMT-block test bench has been developed to be:

* \(\textsf{affordable}-\textsf{Commercial}\) electronics can be very expensive and should be avoided, when possible. On the other side a lot of the electronics used for the test-beams is no longer needed and can be recycled;
* \(\textsf{easy to use}-\textsf{The}\) system should be operated also by non expert operators, therefore the system must be very intuitive and easy to operate;
* \(\textsf{stable}-\textsf{Several}\) months of work will be needed to characterize all the TileCal PMT-blocks. Moreover, it is planned to have the test bench working during all the experiment life time to detect possible PMT-block failures. This implies that the test bench must operate in stable conditions for about 15 years;
* \(\textsf{portable}-\textsf{After}\) the initial development, the test bench will be moved and integrated in the framework of the final site where the actual test will take place. The final platform used for the DAQ system can be different from the one used at the development stage (see Tab. 1). We decided to write the DAQ in ANSI-C code to minimize the efforts in moving the system to another platform and to reduce the costs that another institution would bear if a commercial DAQ system (e.g. LabView) was used;
* \(\textsf{versatile}-\textsf{The}\) PMT-block test bench does not have a final protocol yet, so the system has to be easily modifiable and versatile enough to accomplish any change in the protocol itself. This characteristic turned out to be very useful since the same system is going to be used in Pisa as the DAQ system for PMT characterization.

Keeping this in mind, we split the problem into three different parts:

1. the hardware used in this test bench;
2. the protocol used for the characterization of the PMT-block test performed in 1999;3. the DAQ software, which is rather independent from this specific test bench.

In this note we describe in detail each item and we report on the first test done in summer 1999 using a prototype of the system.

The PMT-block test bench has now been moved to Athens University where the test of all the blocks used in TileCal will be carried out.

## 2 Mechanics and Optics

Fig. 3 shows a simplified scheme of the test bench. Up to eight PMT-blocks can be housed in special cradles inside a light tight box (Fig. 4 and Fig. 5). Blocks are connected to the High Voltage distribution, to signal and to control cables which are routed through the _mother board_ as in the experiment. The connection between PMT-blocks and the mother board is provided by a special patch panel (Fig. 5).

The PMT's are lighted by two LEDs, one operated in DC and the second in pulsed mode. The LEDs are housed in a black plastic cylinder and face a

Figure 3: Diagram of the Test Bench.

liquid fiber (Fig. 6) which is connected, inside the light box, to a fiber bundle in order to distribute the light to each PMT (Fig. 6). The amount of light that each PMT receives has been roughly equalized among the eight PMTs using optical filters.

## 3 Electronics

The test bench comprises control and readout electronics located in a NIM and a VME crate. The sequence of operations is controlled by a Cetia CVME604 CPU located in the VME crate. Fig. 3 shows a simplified scheme of the test bench:

* A VME I/O register (CAEN V262) is used to switch ON and OFF the PMTs high voltages and to trigger the LED (pulse mode). To avoid the use of a programmable HV system we decided to use the same high voltage (800 V) for all the channels;

Figure 4: Overall view of the test bench. The black box, closed, at the right. At the left the electronics for the DA Q.

* The pulsed LED driver is a NIM home-made circuit, which produces a fast (20-30 ns) signal whose amplitude (0, +60 V) is modulated by a DC level. Two home made VME Digital to Analog converters are used to control the pulsed LED light and to switch ON the DC operated LED to the desired light intensity;
* developed by the Chicago group
- is used to set the mode of operation of the 3-in-1 cards and to provide the charge injection for linearity checks;
* The fast output signals are bipolar and need to be converted to single ended signals before they can be sent to the ADC. This is provided by _blue boxes_ (home-made circuit by Stockohlm used in test beam data tacking) whose output feeds eight FERMI ADC (CAEN V571). The STOP signal to the FERMIs is generated by the VME I/O unit;
* The signals from the _integrator_ is routed to ADC (CAEN V265) with a 1 \(\mu\)s gate signal generated by the VME I/O unit.

The whole DAQ system developed in Pisa is presented in Fig. 7, a complete list of the electronics and hardware used in the test bench is presented in Tab. 1.

Figure 5: The picture on the left shows the PMT-blocks mounted inside the black box. The picture on the right shows a detail of the connection of PMT-blocks to two intermediate boards used for distributing signals, HV and controls.

## 4 Protocol

### Introduction

The PMT-block is an assembly of three main parts: a light mixer, a PMT with its divider and a 3-in-1 card.

The 3-in-1 cards form the front end of the electronics chain. They provide 3 basic functions: a fast pulse shaping of the PMT output, a slow integrator circuit for measuring the current from the Cesium calibration and the minimum bias events, and a charge injection calibration system. These three functions are controlled by an on-board logic driven by a remote controller. The aim of this test bench is to check that all these functions are properly working.

We divide the test in three parts accordingly to the PMT-block working mode: charge injection (CIS), data taking operation (fast pulse) and calibration data taking (slow integrator). For all these parts a test procedure has

Figure 6: The picture on the bottom shows a detail of the coupling of the liquid fiber to the fiber bundle. The fiber bundle is made of 32 clear fibers which are distributed to each PMT. The picture on the top shows a detail of the light source system. Two LEDs, one operated in DC and the other in pulsed mode are mounted inside a black cylinder and coupled to a liquid fiber to take the light into the black box.

been implemented.

### Cis

During the Charge Injection System test the high voltage and light system are OFF and the 3-in-1 card is set in the charge injection configuration. Different charges have been injected and the outputs from the low, high gain and trigger channels are recorded. At the end of the test linearity plots (ADC vs. injected charge) are fit with a straight line. The gain of each channel (the slope of straight line) is computed and stored on disk.

### Fast Pulse

During this part of the test the high voltage is ON and light system is operated in pulsed mode. In this case we mimic the real experimental situation by flushing the PMTs with a fast blue LED. Three different light levels are used to simulate: a) the signals released in the calorimeter by a minimum ionizing

Figure 7: Overall view of the DAQ system.

particle, b) a signal falling in the overlap region of the two gain channels, and c) a 1 TeV jet. Around 5000 events for each PMT-block are recorded. The program performs the pulse recognition and pedestal subtraction on-line during the train of pulses recorded by the V571 flash ADC. Two histograms for each PMT are filled: one for the low gain and the other for the high gain. The average value of each histogram and its r.m.s. are written on disk.

### Slow Integrator

During the Slow Integrator test the high voltage is ON and the light system is operated in DC mode. Three different levels of DC light are used to simulate: a) pile-up events, b) signal from Cs source and c) a level of light in between. The output current for each level is measured and stored on disk.

\begin{table}
\begin{tabular}{|l|l|l|l|} \hline
**Component** & **Model** & **Qt** & **Available fro m** \\ \hline \hline Liquid guide & & 1 & Pisa \\ Black box & & 1 & Pisa \\ Light case & & 1 & Pisa \\ HV patch panel & & 1 & Pisa \\ Signal patch panel & & 1 & Pisa \\ Crate V ME & & 1 & \\ Crate NIM & & 1 & \\ CPU & Cetia CVME 604 & 1 & \\ I/O register & CAEN V 262 & 1 & \\ ADC q-int. & CAEN V 265 & 1 & \\ diff./se adapters & & 3 & CERN \\ Fermi ADC & CAEN V 571 & 8 & CERN \\ clock fan out & & 1 & Chicago \\
3in1 ctrl & & 1 & Chicago \\ DAC & & 2 & Pisa \\ LED driver & & 1 & Pisa \\ NIM/TTL adapter & & 1 & Pisa \\ Fan IN Fan OUT & & 1 & Pisa \\ HV system 4 ch & CAEN N4 72 & 1 & \\ LV power supply & & 3 & \\ Cables & & 100 & Pisa \\
1/4 mother board & & 1 & Chicago \\ \hline \end{tabular}
\end{table}
Table 1: List of the hardware components of the test bench.

### Data Analysis and Decision

The data analysis is performed on-line at the same time as the data taking and, at the end of the test, the PMT-block relevant information is available in an ASCII file.

The aim of this test is to check the functionality of the PMT-blocks without performing their full characterization. The measured values are checked to be inside a confidence range and the decision to accept/reject each block is taken. This operation is performed on-line by the DAQ system and a screen message indicates to the operator which PMT-blocks are to be rejected. The confidence ranges used are summarized in Tab. 2.

At the end of each measurement the ASCII file is converted to an EXCEL one to perform the statistics and the database functions.

### Sequence of operations

The sequence of operations for the test of a PMT-block batch is the following:

1. Put 8 PMT-block into the black box (manual);
2. Connect the PMT-block cables to the patch panel (manual);
3. Collect the PMT-block information and initialize the database. This part has been performed manually, however it will be automatic when each block will be labeled with a bar-code;
4. Perform the CIS test and store the results on disk (automatic);
5. Perform the fast pulse test and store the results on disk (automatic);
6. Perform the slow integrator test and store the results on disk (automatic);

\begin{table}
\begin{tabular}{|l|c|c|c|} \hline  & Low Gain & Hi Gain & Trigger Sum1 \\ \hline \hline CIS (gain) & 0.8–1.2 & 52–78 & – \\ Fast Pulse (average) & \(>\) 250 & \(>\) 150 & – \\ \hline Slow int. & \multicolumn{3}{c|}{\(>\) 10 + increasing path} \\ \hline \end{tabular}
\end{table}
Table 2: Confidence ranges used for the PMT-block acceptance.

7. Check the results and decide to accept/reject the PMT-block (automatic);
8. Remove the PMT-blocks and put aside those to be rejected (manual).

A complete test of a batch of 8 PMT-blocks take about 10 minutes from step 1 to 8.

## 5 Software

The guidelines followed in the development of this test bench have been stated in the introduction. The software has to fulfill all these requirements i.e. it has to be affordable, easy to use, stable, portable and versatile.

To fulfill all these requirements we developed the software with a layer philosophy. The operations to be performed on the VME data bus are two: write and read data from the bus. A given board is interfaced by a small library which supplies the basic set of routines to operate the board itself.

The layer structure of our software is the following:

* This is the part of the code that interfaces to the menu, data and file handling and deals with error management. It takes care of the VME bus initialization and read/write functions. This is the only platform dependent part of the code and must be written accordingly to the hardware used to interface the VME bus;
* Each VME board has its own library of functions that are responsible for initialization, control and data acquisition. If a new board is added a new library has to be written. The debugging is easy as only the basic functions have to be checked while more complex functions can be obtained by suitable scripts. At this level the software is platform independent and can be moved from one system to another without changing the code if the system supplies an ANSI-C compliant compiler;
* This is the part dealing with the implementation of a specific test. The user takes advantage of the hardware functions without worrying how operations are performed and has only to concentrate on the measurements. This part is, of course, platform independent.

The software has been developed on a Cetia PowerPC board (CVME 604) with LynxOS 2.4 operating system. An ANSI-C compiler is supplied.

Every hardware board is activated by a set of commands available from a sub menu in the DAQ program. These routines are used for simple operations like to set the number of boards present in the crate, set the VME address to access them and the basic read/write functions.

The DAQ system is essentially a command line driven program, with simple operations available from menus and sub menus that perform specific actions. Multiple commands can be written on the same line and the program takes care of splitting them in individual items. These commands can be grouped in macros that the program is able to execute. Macros can be called and nested and complicated sequences of commands are easily obtained thus providing a very high level of flexibility. Any kind of test bench can be implemented without too much trouble provided the right macros are written.

To handle the data coming from the VME boards we have included in the system a histogram handling package a la HBOOK [2] and a data handling package a la SIGMA [3] to perform simple mathematical operations and a file handling package. A preliminary on-line data analysis can be performed and data can be written on disk for an accurate data analysis to be done off-line.

The software has been checked on several platforms. Table 3 summarizes the code status. In the Appendix we show an example of the scripts used in the test.

\begin{table}
\begin{tabular}{|l|l|c|c|} \hline
**Platform** & **Op. Sys.** & **Compiled** & **Running** \\ \hline \hline PowerPC & LynxOS & x & x \\ PowerPC & MacOS & x & \\ Motorola 68xxx & OS/9 & x & x \\ Motorola 68xxx & MacOS & x & x \\ Risc & AIX & x & \\ Alpha & OpenVMS & x & \\ Intel & Linux & x & \\ \hline \end{tabular}
\end{table}
Table 3: Platforms and operating systems on which the software has been tested, compiled and running. Not on every platform/OS the software can be used simply because it not possible to access the VME bus, however the same code can be debugged by using appropriate simulation routines.

First Test

In summer 1999 we received in Pisa 80 PMT-blocks to be tested for complete functionality. At that time the test bench was not yet complete and only four PMT-blocks could be tested at the same time. Part of the electronics was still missing, in particular some of the _Blue Boxes_ and half of the FERMIs. It was nevertheless an unique occasion to test the whole procedure, check the time needed to test each PMT-block, test the reliability of the software and its flexibility to cope with unexpected needs, and finally setup a skeleton of the database.

The experience was very interesting. Of course many details of the test were not foreseen and we changed (as usual at the very last moment) several times the protocol of the test both to improve the interface with the operator and to change some of the test procedure.

The basic libraries of the DAQ (that part specific to each VME modules) were fully debugged in advance and were not modified at this stage. We had just to change many times the scripts. However, since they needed not to be compiled, the setup of the macros was extremely fast and friendly.

Fig. 8 shows the EXCEL sheet summarizing the measurements. Each row contains the characterization of a PMT block. The first two columns are the slope and the intercept of a linear fit to the CIS test in low gain. The data in the second column should be around 1. The intercept is less important for the functionality of the 3-in-1 card. One should worry only if, as for _lab051_, it is too large. The same is true for the high gain test. Here the slope should be around 65. Fig. 9 shows the distributions of the slopes for low and high gain.

The _Pulse Low_ and _Pulse High_ columns show the mean and the r.m.s. of the distributions. Here the HV is on and the PMT is excited by a flash of light. Since no optimization was made to equalize the PMT gain and the amount of light in each channel, we should expect that the PMT-blocks response would depend on their position on the bench. In some cases the PMT is saturated and this can be identified by the large mean and small r.m.s.. Fig. 10 shows the distribution of the means.

Finally the integrator output is measured for several levels of light (last three columns). Fig. 11 shows their distributions.

Figure 8: EXCEL summary of the measurement. Each line is a PMT-\(block\).

Figure 9: Distribution of the low and high gain for the CIS test.

Figure 10: Distribution of the PMT-block outputs in pulsed mode for the low and high intensity pulses.

## 7 Conclusions

A test bench for the PMT-blocks to be used in TileCal has been developed in Pis a. With this test the functionality of all the PMT-blocks will be checked before the final insertion inside the super-drawers. Eventual assembly/electronics problems can be spotted in a fast way. Eighty PMT-blocks have been tested in summer 1999 and a first protocol has been defined.

The whole DAQ is made of basic routines, specific of each electronic instrument housed in the VME crate and a structure which permits high level calls from non compiled code. The whole system is nicely designed in such a way that scripts can call each other or be called manually by the operator. Facility exists for linear fits to histograms, histogram manipulation, mathematical operations, as in _SIGMA_ in _PAW_.

This software has been successfully tested in the setup of the PMT-block test bench and it will implement the DAQ in the more demanding tests and characterization of photomultipliers which will start in September 2000.

Figure 11: Distribution of charge from the integrator for the three different levels of light.

[MISSING_PAGE_EMPTY:19]

[MISSING_PAGE_EMPTY:20]

[MISSING_PAGE_EMPTY:21]

[MISSING_PAGE_FAIL:22]

* This command performs a read to the Fermi V571 samples
* and returns the difference between the maximum sampling value
* and the mean of the first 5 samplings
*
* This is a replacement of the READ command to speed up the test
*
*/

if(strcmp(verb."FASTREAD")==0) /* User command is FASTREAD */ {
* Get the qualifiers associated with the FASTREAD command
* Debug : 1 Debug is om / 0 Debug is off
* Channel: number of channel to be read (1.2.3)
*/

 if((status = get_qualifier("PMT_Fermi_Mem","FASTREAD","CHANNEL",&nch))==0){} if((status = get_qualifier("PMT_Fermi_Mem","FASTREAD","DEBUG",&deb))==0){} /*
* arr[256] is used tostore the Fermi samplings information. It is first
* set to zero and then filled up by a call to Fermi_wait_for_trigger
*/

 urero(arr.256); err=Fermi_wait_for_trigger( nch, arr); /*
* Detect eventual errors

* Debug if it is requested  */  if(deb>0) printf("Fermi %ld Channel=%ld\n", this_fermi, nch); /*
* average is the average of the first 5 samplings used as a pedestal  */  average=(float)arr[0]*arr[1]*arr[2]*arr[3]*arr[4];  average /= 5.; /
* Look for the maximum voltage in the 256 Fermi samplings  */  var= 0.;  for(i=0.i<sample;i++)  {  if(deb>0)printf("%d %d %u",i.*(arr*i));  if((float)arr[i]>vmax)vmax=(float)*(arr*i);  } /*
* Push into the BBmem stack the relevant information. i.e. the
* difference between the maximum and the average of the first 5 samplings  */  pushStack(vmax-average);  }

## References

* [1] ATLAS Collaboration, TILE Calorimeter Technical Design Report, CERN/LHCC/96-42, 15 December 1996
* [2] R. Brun, HBOOK users guide, Program Library Y250. CERN, 1992.
* [3] R. Brun, O. Couet, C. Vandoni and P. Zanarini, PAW users guide, Program Library Q121. CERN, 1991.