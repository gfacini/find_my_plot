## ATLAS Trigger & DAQ

### The raw event format in the ATLAS Trigger & DAQ

Document version/issue:

Document date:

Document status:

Document Reference:

### Abstract

_This note presents the ATLAS raw event format. It covers the format of data from the Read - Out Drivers to the output of the Event Filter. It does not cover the detector specific event data._

### Editors:

Wainer Vandelli - CERN

[MISSING_PAGE_EMPTY:2]

2011-Oct. '02 Added Appendix A on ROL implementation issues;

 Clean-up of section 2.1 (main requirements);

 Implementation of Source ID element re-defined, i.e. Module ID now byte wide, see section 5.2;

 Global event ID removed from ROS specific header, section 5.10.3;

 Introductory text in section 5 re-written;

 Description of "Format version number" element re-written, section 5.6;

 Corrected description of Bunch Crossing ID, Tables 8, 9 & 10;

 Table 3 defining values for Sub-detector IDs updated to match known TTC partitions;

 Error in description of extended level 1 ID corrected, sections 4 & 5.10.1;

 Clarified meaning of Detector Event Type element, section 4;

 Remove Level 1 Trigger Info. from Full Event Specific header, section 5.10.1;

 Initial values and meanings for generic status field (adopted from Level1 - DataFlow interface document), section 5.8;

 Remove LVL2-Data and LVL2-Result, table 2;

 Added RoI Builder Module Type, table 4;

 Deleted sections 5.10.6 and 5.10.7;

 Expanded scope to include output of Event Filter, section 1.3;

 Added section on Event Filter Output, section 5.11.

 2 4 1 Feb. '04  Date and time element in Full Event Specific element (Section 5.10.1) redefined to be the number of seconds elapsed since 00h00.00 on 1st Jan. 1970, i.e. in line with Posix;

 Run number added to Generic fragment and ROD fragment (section 3,4 and 5). Remove run number from Full Event Specific element (section 5.9.1) and ROS Specific Header (section 5.9.3);

 A default sub-detector type added to Table 3. to be used for equipment which is not specific to any single detector. Module type 'Level 2 Processor' changed to 'HLT Processor';

 Added 'Event Filter Info' in section 5.9.1 and Table 6;

 Changed 'Level 1 ID' to 'Extended Level 1 ID' where appropriate;

 Updated some of the references;

 Cleaned up some typing errors.

 23 Feb. '04  Added Appendix B which details additional values of the Sub-detector IDs to be used in the 2004 Combined test beam;

 Changed the order of Extended Level 1 ID and Bunch Crossing ID in table 9 so as to be the same as in tables 10 and 11.

[MISSING_PAGE_EMPTY:4]

\begin{tabular}{|c|c|l|l|} \hline
4 & 0 & 23 Jan. '08 & Format simplification removing Sub Detector and ROS headers; \\  & & Introduced ROB trailer (check-sum) in consultancy with the ROS working group; \\  & & Clarified the meaning of specific status words in both ROB and Full Event fragments; \\  & & Removed the Detector Mask field in the Full Event Header; \\  & & Updated References; \\  & & Disentangled major versions between ROD fragments and the remaining fragment types; \\  & & Changed major version number to 4.0; \\  & & Removed Appendix on to-dos. \\  & & Included Appendix on the ROB trailer; \\ \hline  & & 24 Jan. '08 & Included comments from Hans Peter \\ \hline  & & 25 Jan. '08 & Included reference on ROB check-sum algorithm \\  & & Explain Full Event \\ \hline  & & 29 Jan. '08 & Better text to some event fragments, emphasized wording \\  & & Page numbers were missing \\  & & ROBIN status: wording changed; removed exclamation marks; bit 24 is always zero \\  & & Removed Appendix on Framing \\  & & Introduced check-sums as part of the standard fragment; Updated Appendix on check-sums to include information on Adler-32 \\  & & Changed Pixel Detector Source Identifiers \\ \hline  & & 04 Feb. '08 & Incorporated number of modifications proposed by FJW \\  & & Reserved field in Source Identifiers becomes "optional" \\  & & Clarification on the interpretation of Status Elements \\ \hline  & & 12 Feb. '08 & Clarifications proposed by MJ \\  & & Introduction of the "Simulation" flag in the Run Type table \\  & & Introduction of the Forward detectors at the Subdetector Identifier table \\  & & Clarify that, if a ROS builds a Full Event object, some fields may not be properly initialized \\ \hline  & & 02 Sep. '08 & Fix in forward detector Subdetector Identifier table by HPB \\ \hline  & & 14 Oct. '08 & Specify HLT protocol for decoding the status words in HLT results \\ \hline
4 & 0c & 09 Feb. '09 & We now refer to the ROBIN status words at their Wiki page instead of redefining them here \\  & & & Added "Laser Crate" (0x50) subdetector identifier \\ \hline
4 & 0d & 18 Jun. '10 & Stream Tag definition extended to include the Partial Event Building information \\  & & & Added "PARTIAL\_EVENT" bit to the FullEvent specific part of the status word \\  & & & Added a table with the allowed stream types \\  & & & Added reserved bits to the generic status word \\ \hline
4 & 0e & 19 May '11 & Added sub-detector IDs for LAr and Tile MET \\ \hline
4 & 0e & 10 Aug '11 & Added sub-detector ID for FTK \\ \hline \end{tabular}

## 1 Introduction

### Purpose of the document

This document describes the raw event format and its implementation in the ATLAS Trigger and DAQ.

### Overview

In Section 2 the requirements, function, purpose and a high-level description of the event format is given. In Section 3 a detailed description is given. Section 4 presents a description of the format of a fragment sent by a ROD over a ROL. In Section 5 the implementation of the event format is described. Section 6 covers details on the check-sum trailer (algorithms and reference).

### Boundaries

This document relates to the format of data into and out of the: RODs, Read-Out Sub-system (ROS), Data Collection Sub-system and the Higher Level Trigger (HLT). The

\begin{table}
\begin{tabular}{|c|c|l|} \hline
5 & 0 & 08 Nov’ 13 & Added sub-detector IDs for MicroMega \\ \hline
5 & 0a & 10 Apr’ 14 & Added sub-detector IDs for IBL and DBM \\ \hline
5 & 0.2 & 07 Feb’ 16 & Added sub-detector ID for AFP \\  & & & Versioning scheme changed to match the new EDMS constraints \\ \hline \end{tabular}
\end{table}
Table 1: Document change recordframing information, necessary to ensure the correct transmission of data between applications, e.g. ROD-to-ROB, is technology specific and therefore not part of the event format.

### 1.4 Definitions, acronyms and abbreviations

See reference [1].

## 2 General Description

### 2.1 Requirements

This sub-section lists a set of requirements on the various components of the event format. The categories of requirements follow the guidelines given in [2]. Requirements containing the word shall are mandatory. Those containing the word should are strongly recommended, justification is needed if they are not followed.

The event format shall fulfil the following requirements:

1. The event format _shall_ allow the size of an event to increase or decrease depending on the specific data taking configuration;
2. There _shall_ be no minimum or maximum event data size implied by the format;
3. The event format _should_ provide information redundancy to allow self consistency checks of the event to be made;
4. The event formatting information _shall_ not exceed 20% of the typical full ATLAS event data size;
5. The event format _should_ be modular;
6. The basic unit _should_ be a fragment. Fragments are: parts of an event coming from a ROD or ROB or the (Full) Event itself; _Please note that the term **Full Event** refers to the fragment with a preceding event header and containing **ROB** fragments. The number of fragments held internally may not represent the whole of the detector data for a particular Level-1/Global identifier._
7. The fragments _should_ have identical structure;
8. The event format _shall_ facilitate the identification of fragments;
9. The event format _shall_ provide an event header;
10. The event format _shall_ provide the event identifier and trigger type within the full event header;
11. The event format _shall_ provide a means of identifying whether the event has been corrupted during transmission within the Data Flow, e.g. DMA time-out, truncation etc;12. The event format _shall_ provide a means of identifying whether the event has been corrupted due to hardware problems, e.g. a bit error.

### 2.2 Function and purpose

The event format defines the structure of the data at various stages within the HLT and DAQ, and allows elements of the Data Flow and HLT processing tasks to access the data without resorting to the use of other resources, e.g. data bases. In addition, it defines additional data that is added to the detector data, by elements of the TDAQ, allowing processing tasks to quickly identify the type and origin of each event.

### 2.3 General format

The general format of a Full Event is shown in Figure 1. As can be seen it is built from fragments (see Requirement 6. in Section 2.1). A Full Event is an aggregation of ROB fragments. Each of the latter map on to a **single** ROD fragment. Each fragment type, except the ROD fragment, has a header which contains all the event formatting information need to decode it. Besides the generic header, ROB and Full Event fragments may contain a single 32-bit word trailer with a check-sum of its contents (see Section 6). For ROD and ROB fragments, hardware considerations have led to the combination of a header and a trailer, however, the general principles are similar and it is the combination of the header and trailer which provide the event formatting information required to decode it. Details of ROD fragments are given in Section 4.

Figure 1: The general event format.

The class diagram of the raw event format is shown in Figure 2. Referring to the latter, it can be seen that Full Events and ROB fragments are types of Fragments, which are characterized by a common Generic Header. Full Event fragments contain any number of ROB fragments each of which contains a single ROD fragment. Full Event fragments extend the Fragment type header with specific fields, as it will be shown in Section 3.

As can be seen from Figure 2 the proposed raw event format is modular and based on event fragments (see Section 2.1). All event fragments have the same structure, except the ROD fragment due to identified implementation issues. This fulfils Requirement 7. (see Section 2.1).

## 3 Header formats

### The Header

Figure 2: The class diagram of the raw event format.

The Header type is an aggregation of Generic and Specific parts, see Table 2. The Generic part is the same for Full Event and ROB fragments and slightly different for ROD fragments (see Section 4). The Specific part allows fragment specific information to be included in the header.

#### 3.1.1 The Generic component

The Generic component consists of the following elements:

1. _Start of header marker_: This marker indicates the start of a fragment header and is itself part of the header. Hence, it is the first word of a fragment. The value of this element will be unique for each type of fragment, but the structure shall be identical. The structure will allow the endianess of the fragment header to be determined;
2. _Total fragment size_: This element indicates the total size of the fragment, including the Header;
3. _Header size_: The element indicates the total size of the Header;
4. _Format version number_: This element gives the format version of the fragment;
5. _Source identifier_: This element identifies the origin of the fragment. It consists of a sub detector ID, and Module ID. The combination of these fields should allow the Source identifier to be unique across the whole of Atlas. The Module ID refers to the module which builds and adds the header to the event fragment;
6. _Number of status elements_: The value of this element is the number of status elements in the Header;
7. _Status element_: This element contains information about the status of the data within the fragment. The structure of this element is specific to the module which builds the header;

\begin{table}
\begin{tabular}{|c|} \hline
**Start of Header Marker** \\ \hline
**Total Fragment Size** \\ \hline
**Total Header Size** \\ \hline
**Format Version Number** \\ \hline
**Source Identifier** \\ \hline
**Number of Status Elements (N)** \\ \hline
**Status Element[0]** \\ \hline
**Status Element[N-1]** \\ \hline
**Check Sum Type** \\ \hline
**Specific Header[0]** \\ \hline
**Specific Header[M]** \\ \hline \end{tabular}
\end{table}
Table 2: The (generic) fragment header.

8. _Check Sum Type_: This element indicates if this fragment contain a check-sum attached to its trailer, as a single 32-bit word, depending on this value. This field can currently take the following values: 

A value of 0x0 indicates this fragment has no trailer and therefore no check-sum against its payload. A value different from zero indicates a check-sum is available. The algorithm applied for its calculation is defined by the table above. Check Section 6 for details and references.

#### The specific component

Following the Generic component of the header there is a fragment Specific component consisting of zero or more words, depending on the fragment type. See Section 5.9 for details.

## 4 ROD data format

The definition of the format of the data transferred between the ROD and ROB must take into account factors such as: the data is formatted in hardware and not necessarily by programmable devices; the information within the header may influence component cost and ROD performance; the differences in ROD designs.

To accommodate the differences in the ROD designs the data transferred from a ROD to a ROB should have both a Header and a Trailer as shown in Figure 3.

The Trailer contains the Number of data elements, Number of Status elements and the status block position. Some detector groups have voiced a preference for having the Status elements proceeding the Data elements. Instead of imposing an order, an additional element, Status block position, has been added to the trailer. The value of this element defines the relative order of the Data and Status elements. A value of zero indicates that the status block precedes the data block and a value of one indicates that the status block follows the data block. These two cases are shown in Figure 3 for reasons of clarity. The Data and Status elements are 32-bit integers.

The header is derived from that presented in Section 3.1 and, with the exception of the Source Identifier, the elements have the same meaning. For a ROD fragment the value contained in bytes 0 and 1 of the Source Identifier is the ROL number, unique to each ROL. Note, the value of the Start of Header Marker also identifies the byte order of the ROD fragment Data and Status elements.

Within the ROD fragment header five additional elements are explicitly defined, these are:

1. _Run Number_: An element whose value is unique during the lifetime of the experiment (see Section 5.4);
2. _Extended Level 1 ID_: The Extended L1ID [3] formed by the 24-bit L1ID generated in the TTCrx and the 8-bit ECRID implemented in the ROD;
3. _Bunch Crossing ID_: The 12-bit bunch crossing identifier generated in the TTCrx;

Figure 3: The ROD fragment format.

4. _Level 1 Trigger Type_: The 8-bit word generated by the Central Trigger Processor or LTP and transmitted by the TTC system [4]. The remaining 24-bits are unused and set to zero. Note, a value of zero indicates a ROL Test Block as described in [5];
5. _Detector event type_: This element allows additional information to be supplied on the type of event, particularly in the case of calibration events. It allows the detectors to specify the exact type of calibration event that they have generated.

The **first** status word shall indicate the global status of the fragment. A non-zero value of this element indicates that the data payload of the fragment could be corrupted, e.g. missing data and or bit errors, see Section 5.8.

## 5 Implementation

This section presents an implementation of the event format described in the previous sections. It defines the Start of Header Markers, the Fragment IDs, the sub-detector IDs and the elements specific to the different types of fragments. This implementation is for 32-bit machines and demands that the Generic Header, ROD Header and Trailer are aligned on four byte boundaries. All header and trailer elements are 32-bit integers. Note, future evolution of the event format may demand eight byte alignment.

In this implementation: the ROD and ROB header are built by the ROD and ROB respectively; the Event Header is built by the DCM. The implementation of the Event Format does not impose a specific order of the fragments. It follows that the user should not rely on any particular ordering information to be constant among different events: _e.g._ the first ROB fragment on an event may have source identifier set to Pixel Disk, module id. equals to 34, followed by a ROB fragment with source identifier set to LArg EM C-Side, module id. 5. For the next event, the sequence may be completely different with respect to detector identifiers or specific module identifiers.

The following points have also been taken into account:

* _Floating point types_ are not used in this implementation as they are not portable;
* _Byte ordering_: The endianness of the ROD fragment is defined in [6]. The fragments generated by TDAQ components shall be little endian, reflecting the fact that all processing nodes house little endian processors. The implementation of the Start of Header Marker allows the endianness of the fragment to be verified, see Section 5.1.
* _Alignment_: The implementation demands that all headers are aligned on 4-byte boundaries.

### 5.1 Start of Header Markers

Each fragment header begins with a Start of Header Marker. These markers fulfil Requirements 7, 8 and 9 as described in Section 2.1. The markers at each level of the event format are given in Table 3.

The asymmetry in the value of the Start of Header Marker allows for the byte ordering used in the fragment Header to be identified. Note, for the ROD fragment it refers to the byte order of the ROD fragment as a whole.

### 5.2 Source Identifiers

The structure of the Source identifier, as shown below, consists of three byte fields. The combination of these three fields allows the Source identifier to be unique across all sub-detectors. The values that the Sub-detector identifier may have are defined in Section 5.3. The value of the Module ID for a ROD fragment is the ROL number and is unique to each ROL. For other fragments, the value that may be assigned to the Module ID is free to be defined by the system or sub-system implementers concerned.

Byte 3 is optional and should be initialised to a value of zero. The value of this field _may_ be used by implementers of TDAQ processors to carry extra information about hardware connectivity, for **debugging purposes**.

### 5.3 Sub-Detector IDs

The values that the Sub-detector ID field may have are given in Table 4. Values not listed in this table are considered illegal.

\begin{table}
\begin{tabular}{|c|c|} \hline
**Fragment Type** & **Header Marker** \\ \hline _ROD_ & 0xee1234ee \\ \hline _ROB_ & 0xdd1234dd \\ \hline _Full Event_ & 0xaa1234aa \\ \hline \end{tabular}
\end{table}
Table 3: Start of Header Markers.

\begin{tabular}{|c|c|c|c|c|} \hline \multicolumn{2}{|c|}{**Detector**} & **ID** & \multicolumn{1}{c|}{**Detector**} & **ID** \\ \hline  & _Full Event_ & 0x00 & _Muon_ & _MDT Barrel A Side_ & 0x61 \\ \cline{2-5}  & _Offline_ & 0x01 & _MDT Barrel C Side_ & 0x62 \\ \hline _Pixel_ & _Barrel_ & 0x11 & _MDT Endcap A Side_ & 0x63 \\ \cline{2-5}  & _Disk_ & 0x12 & _MDT Endcap C Side_ & 0x64 \\ \cline{2-5}  & _B-layer_ & 0x13 & _RPC Barrel A Side_ & 0x65 \\ \cline{2-5}  & _IBL_ & 0x14 & _RPC Barrel C Side_ & 0x66 \\ \cline{2-5}  & _DBM_ & 0x15 & _TGC Endcap A Side_ & 0x67 \\ \hline _SCT_ & _Barrel A Side_ & 0x21 & _TCG Endcap C Side_ & 0x68 \\ \cline{2-5}  & _Barrel C Side_ & 0x22 & _CSC Endcap A Side_ & 0x69 \\ \cline{2-5}  & _Endcap A Side_ & 0x23 & _CSC Endcap C Side_ & 0x6a \\ \cline{2-5}  & _Endcap C Side_ & 0x24 & _MMega Endcap A Side_ & 0x6b \\ \hline _TRT_ & _Barrel A Side_ & 0x31 & _MMega Endcap C Side_ & 0x6c \\ \cline{2-5}  & _Barrel C Side_ & 0x32 & _TDAQ_ & _Calorimeter preproc._ & 0x71 \\ \cline{2-5}  & _Endcap A Side_ & 0x33 & _Calo Cluster proc. DAQ_ & 0x72 \\ \cline{2-5}  & _Endcap C Side_ & 0x34 & _Calo Cluster proc. RoI_ & 0x73 \\ \hline _LArg_ & _EMB A Side_ & 0x41 & _Calo JE proc. DAQ_ & 0x74 \\ \cline{2-5}  & _EMB C Side_ & 0x42 & _Calo JE proc. RoI_ & 0x75 \\ \cline{2-5}  & _EMB C Side_ & 0x43 & _Muon CTP Interface_ & 0x76 \\ \cline{2-5}  & _EMB C Side_ & 0x44 & _CTP_ & 0x77 \\ \cline{2-5}  & _HEC A Side_ & 0x45 & _(Deprecated) L2SV_ & 0x78 \\ \cline{2-5}  & _HEC C Side_ & 0x46 & _(Deprecated) SFI_ & 0x79 \\ \cline{2-5}  & _FCAL A Side_ & 0x47 & _SFO_ & 0x7a \\ \cline{2-5}  & _FCAL C Side_ & 0x48 & _(Deprecated) Level-2_ & 0x7b \\ \hline _TileCal_ & _Laser Crate_ & 0x50 & _HLT_ & 0x7c \\ \cline{2-5}  & _Barrel A Side_ & 0x51 & _LAr MET_ & 0x7d \\ \cline{2-5}  & _Barrel C Side_ & 0x52 & _Tile MET_ & 0x7e \\ \cline{2-5}  & _Extended A Side_ & 0x53 & _FTK_ & 0x7f \\ \cline{2-5}  & _Extended C Side_ & 0x54 & _Forward_ & _BCM_ & 0x81 \\ \cline{2-5}  & & _Lucid_ & 0x82 \\ \cline{2-5}  & & _ZDC_ & 0x83 \\ \cline{2-5}  & & _Alpha_ & 0x84 \\ \cline{2-5}  & & _AFP_ & 0x85 \\ \hline \end{tabular}

### Run number

This element is 32-bits. The run number is a 31-bit integer and the highest bit is zero.

### Total fragment and header size

These elements are each 32-bit integers and their values give the total size of the fragment and the size of the fragment header in units of 32-bit integers.

### Format version number

This element consists of two 16-bit fields, as shown below. The combined value of these fields identifies the fragment format version. The Major version number shall be the same for all fragments in the event that possess a Generic Header. This assertion excludes ROD fragments, which may ship with a different (older) version number. The Minor version number has a value dependent on the fragment type and will be used to identify the format of the specific part of the fragment header and in a ROD fragment the format of the sub-detector Data.

The implementation described in this document defines the Format Version Number to be 5.0-0.0 (0x05000000), i.e. Major version number is **5.0** and the Minor version number is 0.0. For ROD fragments, the Major version number is **3.1** and the Minor version is free to be chosen by the specific Sub Detector groups.

\begin{table}
\begin{tabular}{|c|c|c|} \hline _TDAQ_ & _Calo Topological_ & 0x91 \\ _proc._ & & \\ \cline{2-3}  & _Calo Digital proc._ & 0x92 \\ \cline{2-3}  & _Calo Feat. Extractor_ & 0x93 \\ \cline{2-3}  & _Calo Feat. Extractor_ & 0x94 \\ \cline{2-3}  & _Rol_ & \\ \hline \end{tabular}
\end{table}
Table 4: Sub-detector Ids.

## 5.7 Number of status elements

A value of zero indicates that there are no subsequent Status elements and therefore there are no known errors associated to the fragment.

### 5.8 Status elements

This element is a 32-bit integer. The **first** Status element shall be divided into two 2-byte fields labelled Generic and Specific, see below. The values and error conditions indicated by the Generic field are the same for all fragments, while the values and error conditions indicated by the Specific field have meanings specific to the fragment. A non-zero value of this element indicates that the event fragment has a problem, _e.g._ truncated. The information conveyed by the status element only refers to the fragment of which it is an element.

The remaining status elements **following** the first word of a fragment may have different formatting, to be defined by the implementers of the specific software or hardware that creates or manipulates these fragments.

The currently defined values and meanings of the Generic field of the first Status element are given in Table 5.

The analysis of the **first** status word should follow these principles:

1. If there are **no** status words in a fragment, then there are **no** known problems with that fragment;

\begin{table}
\begin{tabular}{|c|l|c|c|} \hline _Generic Field Value_ & \multicolumn{2}{|c|}{_Description_} \\ \hline
0 (0x00) & Unclassified \\ \hline
1 (0x01) & An internal check of the BCID has failed. \\ \hline
2 (0x02) & An internal check of the EL1ID has failed. \\ \hline
4 (0x04) & A time out in one of the modules has occurred. The fragment may be incomplete. \\ \hline
8 (0x08) & Data may be incorrect. Further explanation in the Specific field. \\ \hline
16 (0x10) & An overflow in one of the internal buffers has occurred. The fragment may be incomplete. \\ \hline
32 (0x20) & SW dummy fragment: the fragment was generated in a SW component. \\ \hline
64 (0x40) & Reserved \\ \hline
128 (0x80) & Reserved \\ \hline \end{tabular}
\end{table}
Table 5: Values and meaning for the Generic field of the first status element.

2. If there **are** status words associated with a fragment: 1. If the first status word is **all** zeroes (**both** generic **and** specific parts together) then there is **no** know problem with the fragment; 2. If either the generic **or** specific parts of the first status words are **not** zero, a problem might have occurred in which case the user is expected to understand the contents of the tables in this section.

#### ROB specific status

The meaning and values of the Specific field of the Status elements in the ROB header, for fragments generated in the Readout system, are given Reference [7].

ROB fragments generated in higher-level DataFlow components have bit 0x20 set in the Generic field. In this case, the Specific field bits should be interpreted based on Table 6.

#### HLT results the ROB specific status

Because HLT result is wrapped into a ROB fragments, the specific status bits defined in Reference [7] may also apply, where relevant, to this kind of fragment. In particular, the following protocol in decoding the HLT result ROB status should be used:

\begin{table}
\begin{tabular}{|l|l|c|} \hline
**Bit** & **Meaning** & **Agent** \\ \hline
16 & INCOMPLETE\_ROI & _HLTSV_ \\ \hline
17 & COLLECTION\_TIMEOUT & _DCM_ \\ \hline
18 & _Reserved (=0x0)_ & \\ \hline
19 & _Reserved (=0x0)_ & \\ \hline
20 & _Reserved (=0x0)_ & \\ \hline
21 & _Reserved (=0x0)_ & \\ \hline
22 & _Reserved (=0x0)_ & \\ \hline
23 & _Reserved (=0x0)_ & \\ \hline
24 & _Reserved (=0x0)_ & \\ \hline
25 & _Reserved (=0x0)_ & \\ \hline
26 & _Reserved (=0x0)_ & \\ \hline
27 & _Reserved (=0x0)_ & \\ \hline
28 & _Reserved (=0x0)_ & \\ \hline
29 & _Reserved (=0x0)_ & \\ \hline
30 & _Reserved (=0x0)_ & \\ \hline
31 & _Reserved (=0x0)_ & \\ \hline \end{tabular}
\end{table}
Table 6: Values and description of the Specific field in ROB fragments generated in the DataFlow system.

1. If an error is signalled in the generic part of the first status word of an HLT generated ROB, details are specified in the specific part of this word;
2. In case 1 holds, and all bits in the specific part are not set, the reported issue was detected by the HLT framework and more details **may** be available in the remaining status words attached to this fragment header;
3. In case 1 holds, and any bit in the specific part is set, the reported issue was detected by the Dataflow framework. The existing data in the result payload is either empty or dummy and cannot be interpreted by the HLT framework.

While decoding the HLT result, the HLT or Offline frameworks can use further information provided in the specific part of the first status word in the Full Event header to complement on the information provided by the HLT result fragment itself.

#### Full Event specific status

The meaning and values of the Specific field of the Status elements in the Full Event header are given in Table 7. For each of these values, but the PARTIAL_EVENT, the 0x8 (_Data may be incorrect_) bit in the Generic field shall be set. This table also describes the agents in the Data Flow system that can set these fields.

\begin{table}
\begin{tabular}{|l|l|c|} \hline
**Bit** & **Meaning** & **Agent** \\ \hline
16 & _Reserved (=0x0)_ & \\ \hline
17 & _Reserved (=0x0)_ & \\ \hline
18 & _Reserved (=0x0)_ & \\ \hline
19 & HLTSV\_DUPLICATION\_WARN & _HLTSV_ \\ \hline
20 & _Reserved (=0x0)_ & \\ \hline
21 & _Reserved (=0x0)_ & \\ \hline
22 & _Reserved (=0x0)_ & \\ \hline
23 & _Reserved (=0x0)_ & \\ \hline
24 & DCM\_PROCESSING\_TIMEOUT & _DCM_ \\ \hline
25 & HLTPU\_PROCESSING\_TIMEOUT & _HTLPU (**)_ \\ \hline
26 & DCM\_DUPLICATION\_WARN & _DCM_ \\ \hline
27 & DCM\_RECOVERED\_EVENT & _DCM_ \\ \hline
28 & PSC\_PROBLEM (*) & _HLTPU (**)_ \\ \hline
29 & DCM\_FORCED\_ACCEPT & _DCM_ \\ \hline
30 & _Reserved (=0x0)_ & \\ \hline
31 & _PARTIAL\_EVENT_ & _DCM_ \\ \hline \end{tabular}
\end{table}
Table 7: Values and description of the Specific field in the Full Event status element.

(*) Note: In the occurrence of a PSC Problem, indicated by bit 28, the PSC may use more status words following the first one to indicate the exact cause of the problem. This protocol remains private to agents that can effectively make use of this information - all being either on the HLT or Off-line software domains. Therefore, the meaning of the words following the first status word is not detailed in this document.

(**) Note: HLTPU is the only component with the knowledge necessary to set these flags. In certain Dataflow scenarios however, the HLTPU does not have access to the Full Event header. In this case, appropriate protocols must be developed within the Dataflow framework to ensure the information is properly propagated from the HLTPU to the closest component having (write) access to Full Event header.

### 5.9 Fragment specific elements

#### 5.9.1 Full Event specific elements

The Full Event specific elements are defined in Table 8. Each element in this table is padded to form a 32-bit word. The table also presents the required order of the specific elements and the definition is invariant with respect to the run type.

#### 5.9.2 Full Event specific status

* _Bunch crossing time_: This element is the bunch crossing time. It is two 32-bit integers encoding the GPS time of the bunch crossing as recorded by the Central Trigger Processor and is the number of seconds and nanoseconds since 1st January 1970 (in two separated fields). The Full Event fragment is built by the DCM, therefore the value of this element is copied from the Level 1 CTP fragment into these fields;
* _Global event ID LS/MS_: The global event ID is a 64-bit integer that must be unique within a run. The value is stored into two separate words, respectively representing the least significant (_LS_) and most significant (_MS_) halves of the number. The global event

\begin{table}
\begin{tabular}{|l|c|} \hline _Event Header words_ & _Definition_ \\ \hline Bunch crossing time (seconds)\({}^{\dagger}\) & 32-bit integer \\ \hline Bunch crossing time (nanoseconds)\({}^{\dagger}\) & 32-bit integer \\ \hline Global event ID LS\({}^{\dagger}\) & 32-bit integer \\ \hline Global event ID MS\({}^{\dagger}\) & 32-bit integer \\ \hline Run type & 32-bit integer \\ \hline Run number & 32-bit integer \\ \hline Luminosity block number\({}^{\dagger}\) & **16**-bit integer \\ \hline Extended Level 1 ID & 32-bit integer \\ \hline BCID & **12**-bit integer \\ \hline Level 1 trigger type & **8**-bit integer \\ \hline Compression type & 32-bit integer \\ \hline Uncompressed payload size & 32-bit integer \\ \hline \# Level 1 trigger info words & 32-bit integer \\ \hline
1st Level 1 trigger info word & 32-bit integer \\ \hline Nth Level 1 trigger info word & 32-bit integer \\ \hline (_Deprecated_) \# Level 2 trigger info words & 32-bit integer \\ \hline (_Deprecated_) 1st Level 2 trigger info word & 32-bit integer \\ \hline (_Deprecated_) Nth Level 2 trigger info word & 32-bit integer \\ \hline \# HLT info words & 32-bit integer \\ \hline
1st HLT info word & 32-bit integer \\ \hline Nth HLT info word & 32-bit integer \\ \hline
# Stream Tag words & 32-bit integer \\ \hline
1st Stream Tag word & 32-bit integer \\ \hline Nth Stream Tag word & 32-bit integer \\ \hline \end{tabular}
\end{table}
Table 8: Fragment specific header for the Full Event.

ID generation and propagation are responsibilities of the Dataflow components. These details however are out of the scope of this document;
* _Run type_: This element is 32-bits. A **preliminary** enumeration of Run Type is given in Table 9. 
\begin{tabular}{|l|l|} \hline
**Run Type** & **Value** \\ \hline Physics & 0x00000000 \\ \hline Calibration & 0x00000001 \\ \hline Cosmics & 0x00000002 \\ \hline Test & 0x0000000f \\ \hline Simulation & 0x80000000 \\ \hline \end{tabular}

* _Run number_: This element is 31-bits, the most significant bit is unused;
* _Luminosity block number_: This element is 16-bits;
* _Extended Level 1 ID_: The extended LVL1 ID [3] formed by the 24-bit L1ID generated in the TTCrx and the 8-bit ECRID implemented in the ROD;
* _BCID_: The 12-bit bunch crossing identifier generated in the TTCrx;
* _Level 1 trigger type_: An 8-bit word as generated by the Central Trigger Processor and transmitted by the TTC system [4]. The remaining 24-bits are un-used and set to zero;
* _Compression type_: This element specifies the compression technology optionally used for the payload of this header (see Section 7). The possible values are summarised in Table 10;
* _Uncompressed payload size_: This 32-bit element indicates the total size of the uncompressed payload in units of 4 bytes (32 bits);

* _# Level 1 trigger info words_: The number of Level 1 trigger info words, **excluding** this one;

\begin{table}
\begin{tabular}{|l|c|} \hline
**Compression Type** & **Value** \\ \hline None & 0x00000000 \\ \hline zlib & 0x00000001 \\ \hline Reserved & 0x0000000f \\ \hline \end{tabular}
\end{table}
Table 10: Currently accepted compression types values.

\begin{table}
\begin{tabular}{|l|c|} \hline
**Run Type** & **Value** \\ \hline Physics & 0x00000000 \\ \hline Calibration & 0x00000001 \\ \hline Cosmics & 0x00000002 \\ \hline Test & 0x0000000f \\ \hline Simulation & 0x80000000 \\ \hline \end{tabular}
\end{table}
Table 9: Enumeration of Run Type. The “simulation” flag (last, MSB bit), may be set **together** with any of the previous entries to indicate the data origin (Monte Carlo).

* _Level 1 trigger info_: A number (given by the previous element) of 32-bit words summarising the Level 1 trigger chain. The exact details of these words are not yet defined;
* _# Level 2 trigger info words_: This field is deprecated and left in place for back-compatibility reasons. From version 5.0 onward, it must be set to 0;
* _Level 2 trigger info_: This field is deprecated, no L2 trigger info words shall exist;
* _# HLT info words_: The number of HLT info words, **excluding** this one;
* _HLT info_: A number (given by the previous element) of 32-bit words summarising the HLT chain. The exact details of these words are not in the scope of this document;
* _# Stream tag words_: This is the number of encoded stream tag words, **excluding** this one;
* _Stream tag_: This element is a null-terminated C-string identifying to which data stream or data streams the event has been assigned. The composition of each stream tag is the following \(\circ\)\(\quad\)_name_: defines the name of the tag. It is a free string; \(\circ\)\(\quad\)_type_: defines the type of the tag. The allowed values are listed in Table 11; \(\circ\)\(\quad\)_obeys_lumiblock_: defines if the event obeys the luminblock boundaries or not. It is a boolean value. \(\circ\)\(\quad\)_peb_robs_: list of unique Source Identifiers used for Partial Event Building. The list is converted in a C-string, where each identifier is encoded in a 8-character hexagonal string representation of its value \(\circ\)\(\quad\)_peb_subdets_: list of unique Sub-Detector Identifiers used for Partial Event Building. The list is converted in a C-string, where each identifier is encoded in a 8-character hexadecimal string representation of its value

Whenever detector or simulated data is recorded, a Full Event header shall be used to wrap the various ROB fragments. In case Full Event fragments are produced directly from a ROS dump (_e.g._ when it records detector data for debugging purposes), fields marked with

\begin{table}
\begin{tabular}{|p{142.3pt}|} \hline
**Allowed stream tag types** \\ \hline _physics_ \\ \hline _express_ \\ \hline _calibration_ \\ \hline _debug_ \\ \hline _unknown_ \\ \hline _reserved_ \\ \hline _monitoring_ \\ \hline \end{tabular}
\end{table}
Table 11: Allowed values for the “type” field of a stream tag.

the symbol "\(\uparrow\)" at Table 8 will **not** be properly initialized due to the nature of this component. In this case:

* The _Run Type_ field will be set to "Test" (0xf);
* The _Bunch Crossing_ time entries should be both set to zero (0x0).

#### ROB specific header

No fragment specific elements are currently defined.

### ROD header and trailer

The initial implementation of the ROD header and trailer has been given in Section 4. These elements, including the Data and Status elements, are 32-bit integers, e.g. The _Level 1 Trigger type_ is an 8-bit value, therefore the remaining 24-bits are unused.

## 6 Optional Check-sum

### The ROBIN/ROD check-sum

The ROBIN hardware is able to perform a check-sum on its payload, the **whole ROD fragment**. It can, _optionally_, ship this check-sum as a single 32-bit value just after the ROB fragment itself, forming a single word trailer. The chosen algorithm is a CRC-16/CCITT sum [8], which can be easily executed in hardware.

Because it is a 16-bit CRC sum, it is executed over the most significant 16-bit word separately from the less significant part. Both CRC sums are then stored in the ROB trailer, at equivalent places.

### The Full Event fragment check-sum

The Full Event fragment may _optionally_ carry a check-sum trailer. This check-sum maybe calculated using either CRC-16/CCITT or Adler-32 [9]. The later algorithm requires less computational power, being better adapted for calculations within HLT or Off-line processors being therefore the recommended one in those cases.

Following the model in the ROBIN check-sum, the check-sum sitting in the Full Event Fragment trailer applies only to this fragment's payload, i.e., the ROB fragments it contains. In the case an Adler-32 check-sum is used, this technique allows for a "rolling" check-sum calculation to be deployed while the event is being constructed or extended. Event modifications (_e.g._ the suppression of parts of an event) would still require the check-sum to be re-computed.

## 7 ROB Data compression

The payload of a Full Event header can be optionally compressed to reduce the amount of binary data to be stored and conveyed. If this option is enabled, the union of all ROB fragments contained within the Full Event header is compressed using the selected compression technology. The resulting binary blob is then replaced to the header payload. The format of the compressed data depends on the utilized compression technology and it is therefore not documented here.

The compression operation does not affects the optional trailer, which is therefore preserved.

## 8 Version 4.0 Full Event Specific Status

As part of the transition from major version 4.0 to 5.0, the definition of the Full Event specific status element was updated. For reference, the major version 4.0 specific bits are reported in Table 12.

## References

[1] ATLAS TDAQ, ATLAS High-Level Trigger Data Acquisition and Controls Technical Design Report, CERN, Appendix B, CERN/LHCC/2003-022 (2003)

[2] C. Mazza, Software Engineering Standards, Prentice Hall, ISBN: 0-13-106568-8

[3] R. Spiwoks, Presentation given to the Front-end Electronics Co-ordination on 27/February/2002,

[4] Level-1 Trigger Group, Definition of the trigger-type word, CERN, EDMS: ATL-DA-0022

[5] R. McLaren, ROL Test Block, CERN, [https://edms.cern.ch/document/439294/1](https://edms.cern.ch/document/439294/1)

[6] R. McLaren, ATLAS Read-Out Drivers: Endianness, CERN, EDMS, ATC-TD-EC-0001

[7] Markus Joos, ROBIN Specific Status, CERN, [https://twiki.cern.ch/twiki/bin/view/Atlas/ROBINFragmentErrors](https://twiki.cern.ch/twiki/bin/view/Atlas/ROBINFragmentErrors)

[8] Cyclic redundancy check, [http://en.wikipedia.org/wiki/Cyclic_redundancy_check](http://en.wikipedia.org/wiki/Cyclic_redundancy_check)

[9] Adler-32, [http://en.wikipedia.org/wiki/Adler-32](http://en.wikipedia.org/wiki/Adler-32)

[10] Zlib, [http://www.zlib.net/](http://www.zlib.net/)

\begin{table}
\begin{tabular}{|l|l|l|} \hline
**Bit** & \multicolumn{1}{c|}{**Meaning**} & **Agent** \\ \hline
16 & L2\_PROCESSING\_TIMEOUT & _L2SV_ \\ \hline
17 & L2PU\_PROCESSING\_TIMEOUT & _L2PU_ \\ \hline
18 & SFI\_DUPLICATION\_WARN & _SFI_ \\ \hline
19 & DFM\_DUPLICATION\_WARN & _DFM_ \\ \hline
20 & L2PSC\_PROBLEM (*) & _L2PU_ \\ \hline
21 & _Reserved (=0x0)_ & \\ \hline
22 & _Reserved (=0x0)_ & \\ \hline
23 & _Reserved (=0x0)_ & \\ \hline
24 & EF\_PROCESSING\_TIMEOUT & _EFD_ \\ \hline
25 & PT\_PROCESSING\_TIMEOUT & _PT_ \\ \hline
26 & SFO\_DUPLICATION\_WARN & _EFD_ \\ \hline
27 & EFD\_RECOVERED\_EVENT & _EFD_ \\ \hline
28 & EFPSC\_PROBLEM (*) & _PT_ \\ \hline
29 & EFD\_FORCED\_ACCEPT & _EFD_ \\ \hline
30 & _Reserved (=0x0)_ & \\ \hline
31 & _PARTIAL\_EVENT_ & _SFI_ \\  & & _EFD_ \\  & & _SFO_ \\ \hline \end{tabular}
\end{table}
Table 12: Values and description of the Specific field in the Full Event status element.