**ATLAS-INDET-NOTE XXX**

**16 November 1998**

**Update of Inner Detector Performance Parameterisations.**

**Ernst-Jan Buis1, Reinier Dankers2, Armin Reichold3**

Footnote 1: email r96@nikhef.nl

Footnote 2: email r78@nikhef.nl

Footnote 3: email a.reichold@nikhef.nl

NIKHEF, Amsterdam, Netherlands.

**Stephen Haywood4**

Footnote 4: email s.haywood@rl.ac.uk

Rutherford Appleton Laboratory, Chilton, Didcot, United Kingdom.

**Giuseppe Francesco Tartarelli5**

Footnote 5: email Giuseppe.Francesco.Tartarelli@cern.ch

CERN, Genva, Switzerland.

**Nicola Labanca,6**

Footnote 6: email Nicola.Labanca@cern.ch

Dipartimento di Fisica dell' Universita' di Milano e I.N.F.N, Milano, Italy.

**Abstract**

This note describes the changes and additions made to the Inner Detector performance parameterisations previously discussed in ATLAS-INDET-NOTE 195. It also serves as a users' guide in conjunction with this note. Pion and electron smearing has been added and now includes tails as measured by full DICE-simulations. Efficiency routines for all particles, also based on DICE-simulation results, are available for several sets of standardised cuts. Pion smearing is also available for pions from the decays of V0s. These parameterisations can be used immediately within the context of ATLFAST or in a standalone mode. The main user routines have been given a new set of input parameters improving the consistency with ATLFAST.

[MISSING_PAGE_EMPTY:2]

Introduction

This note is intended as an update to the users of the ATLAS Inner Detector performance parameterisations and ATLFAST[2]. We recommend the novice reader to first study ATLAS-INDET-NOTE 195 as this explains in detail the principles and motivations for the software packages described here. The current package describes the track resolutions and efficiencies for pions, electrons, and muons as obtained by full DICE-simulations. The parameterisation for muons and electrons is only available for prompt particles with production vertices close to the beam. Pion smearing is also suitable for pions produced at large radii by the decays of long-lived particles such as neutral kaons, which play an important role in the reconstruction of exclusive B-decays. As in the previous version of the software, all charged particles other than electrons and muons are treated as pions.

## 2 Track Smearing

The previous version of this software already provided a framework for track smearing differentiated by particle type, but only had an implementation of muon smearing. The new version has separate implementations of pion and electron smearing. The concept of a separation between a Gaussian core and a non-Gaussian tail has been dropped. Muons are considered to have no tail to within the precision that a parametric description can achieve. Electrons are smeared by adding a parameterised bremsstrahlung process to a track that is then smeared like a muon track. Pions are described by the sum of two Gaussian distributions representing core and tail. The main routine for smearing is id_resol_YTX, which distributes the task to the particle specific routines.

### Muons

Muon smearing has remained essentially identical to the previous version. If a track falls outside the calibrated \(\boldsymbol{h}\)-\(p_{T}\) region the routines now optionally war1. In this case, smearing is done according to the resolutions on the edge of the nearest bin. There is no provision for tails in the muon distributions any more. All detector and track fitting options described previously remain the same. Muon smearing is done by the routine id_mul_resol and can like all other particle specific smearing routines, be used stand-alone.

Footnote 1: In the previous version the routines stopped the program.

### Electrons

The parameterisation of electron helix parameters is derived from full simulation. Electrons have been reconstructed using xKalman (from 97_6). Two simple working assumptions are made - neither is well founded, but empirically they work well:

1. Electrons undergo bremsstrahlung leading to new helix parameters, which in turn are smeared with the same detector resolutions as are applicable to muons.
2. Bremsstrahlung can be characterised in terms of a single radiation at a radius R\({}_{\text{brem}}\).

The parameterisations have been derived using \(\text{p}_{\text{T}}=20\) GeV electrons, but by reference to other datasets are valid in the range 1 to \(\sim\)40 GeV. In particular, the parameterisation was aimed at describing processes such as J/\(\psi\) ee.

The parameterisation has been derived for:

1. No vertex constraint
2. Uniform 2T B-field
3. Standard ATLAS b-tagging cuts, plus the requirement N(TRT_straw_hits) \(\geq\) 20.

4. The xKalman track-brem-recovery procedure is used, but no calorimeter-position bremmecovery is attempted.

To generate realistic distributions for the electron helix parameters, the following procedure is used:

#### Bremsstrahlung Radius

The bremsstrahlung radius R\({}_{\rm brem}\) is used as a "hidden" variable in the simulation of smeared electron tracks. According to the \(|\eta|\) (five bins) of the electron, a brem radius is selected at random from a distribution with 12 bins - the first of which corresponds to no significant radiation. This is assumed independent of p\({}_{\rm T}\).

#### \(p_{\rm T}\) Distribution

For each bin in \(|\eta|\) and R\({}_{\rm brem}\), a value of S\({}_{20}=p_{T}\)\(/\)\(p_{T}\)\({}^{\rm gen}\) is chosen randomly from a finely binned distribution derived from electrons with p\({}_{\rm T}=20\) GeV. To first order, it is assumed that this ratio is independent of p\({}_{\rm T}\). However, to allow for some dependence, the p\({}_{\rm T}\) distribution after brem is found from the generated value:

\(p_{T}\)\({}^{\rm brem}=\) S \(p_{T}\)\({}^{\rm gen}\)

where S = \(\alpha\)(1+\(\beta\)(S\({}_{20}\)-1))

with \(\alpha=\)0.994 and \(\beta=1+0.15\) log(p\({}_{T}\)\({}^{\rm gen}\)/20GeV). \(\alpha\) allows for some energy loss and \(\beta\) allows for deviations in \(p_{T}\) from 20 GeV.

#### Other Parameters in x-y Plane

It is assumed that the parameters in the R-z plane are unaffected by brem. The transverse impact parameter (d0) and azimuthal direction (\(\phi\)) are generated from the correlations with 1/p\({}_{\rm T}\). For example:

\(\Delta\)d0 = gradient \(\Delta\)1/p\({}_{\rm T}\)

Where gradient = \(\gamma\)(m\({}_{20}+\Gamma\) r\({}_{20}\))

where m\({}_{20}\) is the mean of a distribution, r\({}_{20}\) is the r.m.s, \(\Gamma\) is a Gaussian random number and \(\gamma\) allows for p\({}_{\rm T}\) 20 GeV.

#### Resolution Effects

After the simulation of the effects of bremsstrahlung, the effects of detector resolution are accounted for by smearing with the muon resolution with the conditions specified earlier.

For technical reasons, the parameterisation is tuned at 20 GeV. Examples of distributions for 1 GeV electrons are shown in Figure 2.2 and Figure 2.3. Very good agreement between full simulation and the ATLFAST simulation has been found for the J/\(\psi\) mass spectrum that can be seen in Figure 2.1.

Figure 2.1 Comparison between J/\(\psi\)\(\rightarrow\)e'e reconstruction for full simulation with xxalman (dotted line) and parametric simulation (solid line). (\(p\)\(>\)0.5 GeV/c and \(|\)**h\(|\)\(<\)2.5)**

Electron smearing is performed by the routine \(\tt{smeare}\), which in turn calls the muon smearing code.

### Pions

Pion smearing is based on input obtained from DICE simulations and reconstruction using the "xKalman" algorithm. The parameterisation is a function of \(\mathbf{h}\), \(p_{T}\) and \(R_{vert}\) (the last parameter has been introduced in order to provide a parameterisation also for pions not coming from the primary vertex, e.g. from long-lived particles such as \(\rm{K}^{0}\)_s_). The bin boundaries are given in Table 2.1. The detector configuration used to obtain this data is similar to the one used for the electrons, with the difference that a minimum of only four precision hits is required in the track selection.

The smearing algorithm assumes that the resolution of each track parameter can be described, in a given bin of \(\mathbf{h}\), \(p_{T}\) and \(R_{vert}\), as the sum of two Gaussian distributions of the 5-element track parameter vector \(\vec{\mathbf{x}}\):

\[F(\vec{\mathbf{x}})=\frac{f_{1}}{\sqrt{2\mathbf{p}\,\det\hat{\mathbf{C}}}}e^{-\frac {1}{2}\vec{\mathbf{x}}^{T}\hat{\mathbf{C}}^{-}\vec{\mathbf{x}}}+\frac{f_{2}}{ \sqrt{2\mathbf{p}\,\det\hat{\mathbf{C}}}}e^{-\frac{1}{2}\vec{\mathbf{x}}^{T}\hat{ \mathbf{T}}^{-}\vec{\mathbf{x}}},\]

where \(\hat{\mathbf{C}}\) and \(\hat{\mathbf{T}}\) are the covariance matrices of the _core_ and _tail_ Gaussians (by definition we have: \(\mathbf{C}_{i,i}<\mathbf{T}_{i,i}\)). The fit with this functional form to the residual distribution obtained from full simulation allows the extraction of \(f_{1}\), \(f_{2}\), \(\hat{\mathbf{C}}\) and \(\hat{\mathbf{T}}\). For simplicity, the fit is performed only to the impact parameter resolution. For the resolution of the other four track parameters and for the correlation terms, we assume that \(f_{i}\) and \(f_{2}\) are _universal,_ meaning that we can use consistently the values determined from the impact parameter fit. This assumption has been checked and found valid within the precision of this parametric description. This can be seen in Figure 2.4 which shows a comparisons between full GEANT simulation plus xKalman reconstruction and the parametric track simulation of this package. In this figures only tracks of \(p_{T}\)0.5 GeV/c and \(|\mathbf{h}|\)<2.5 were used and the agreement is seen to be good.

\(\hat{\mathbf{C}}\) and \(\hat{\mathbf{T}}\) are determined in the following way:

* \(\hat{\mathbf{C}}\) is determined from the average of the xKalman covariance matrix for all tracks falling in the bin under study;
* \(\hat{\mathbf{T}}\) is determined from the following expression (which derives from a generalisation in the five-dimensional track parameter space of the previous equation): \[\hat{\mathbf{T}}=\frac{(f_{1}+f_{2})\hat{\mathbf{S}}-f_{1}\hat{\mathbf{C}}}{f_ {2}},\]

\begin{table}
\begin{tabular}{|l|c|c|c|c|c|c|} \hline  & 1 & 2 & 3 & 4 & 5 & 6 & 7 \\ \hline \(\mathbf{h}\) & 0.0 & 0.2 & 0.4 & 0.7 & 1.0 & 2.5 & \\ \hline \(p_{T}\) & 0.5 & 1.5 & 3.0 & 5.0 & 9999.0 & & \\ \hline \(R_{vert}\) & 0.0 & 4.0 & 11.0 & 14.2 & 30.0 & 37.3 & 44.0 \\ \hline \end{tabular}
\end{table}
Table 2.1: Bin boundaries of the pion smearing data

Figure 2.4: Comparison between K\({}_{s}\)\(\rightarrow\)\(\pi^{+}\pi\) reconstruction for full simulation with xKalman (top histogram) and parametric simulation (bottom histogram).

where \(\hat{\mathbf{C}}\), \(\hat{\mathbf{T}}\) and \(\hat{\mathbf{S}}\) are 5\(\times\)5 matrices, and \(\hat{\mathbf{S}}\) is obtained by the relation:

\[\mathbf{S}_{i}=\frac{1}{N}\sum_{k=1}^{N}\left(\mathbf{\bar{p}}_{k}^{\mathit{ reco}}-\mathbf{\bar{p}}_{k}^{\mathit{mure}}\right)_{i}\left(\mathbf{\bar{p}}_{k}^{ \mathit{reco}}-\mathbf{\bar{p}}_{k}^{\mathit{mure}}\right)_{j},\]

where \(i,j=1,\ldots,5\), \(N\) is the total number of tracks in this bin and \(\mathbf{p}_{k}^{\mathit{reco}}\left(\mathbf{p}_{k}^{\mathit{mure}}\right)\) is the vector of the xKalman (true) helix parameters for the \(k^{\text{th}}\) track.

Pion smearing is done by the routine xxosmea and can be used in stand-alone mode, too. Tracks from the core (tail) of the distribution are smeared with \(\hat{\mathbf{C}}\left(\hat{\mathbf{T}}\right)\) by the muon smearing routines. Tracks are randomly assigned to the core with probability \(f_{1}/\left(f_{1}+f_{2}\right).\) The data for the smearing resides in external data files.

## 3 Efficiencies

Efficiency routines for reconstructing prompt muons, electrons and pions in the ID are supplied with this version of the code. The efficiencies have been obtained in a coherent manner, using xKalman from 97_6. Brem recovery at the track level has been used for electrons. The results from this version of the code are not as good as those from the 98_2 version or iPatRec. The efficiencies correspond to those for single particles and they are little affected by pile-up (see Section 5.1.1 of ID TDR). These efficiencies are not suitable for particles in jets.

The efficiencies, which are available, correspond to the probability for a track to be reconstructed and pass the appropriate basic quality cuts. In addition to cuts corresponding to those used for b tagging, the effect of cuts used for electron identification with the TR function may be simulated [3].

Efficiencies are provided for pions corresponding to electron efficiencies after basic quality cuts of 90% and 80%. The corresponding names of these cuts are TR_90 and TR_80 respectively. The TR effect is a threshold effect which depends on the particle velocity: it switches on for \(\beta\gamma\geq\) \(\sim\)10\({}^{3}\). Hence for particles with p (not p\({}_{\text{T}}\)) \(\geq\) \(\sim\)140 GeV, there is little discrimination between pions and electrons. The user code provides the combination of the effect of the quality cuts and TR cuts. It is assumed that the user will not try to use a TR_90 or TR_80 cut on a muon. This would lead to a program stop. The cuts whose effects can be simulated correspond to those provided by id_cuts1[4].

The names of the cuts and the corresponding data files are described in Table 3.1.

Footnote 1: id_cuts is the routine used to control track reconstruction cuts of fully simulated events with ATRECON or ATLASIM.

Efficiency data is stored in the above data files for each particle and each cut as two dimensional arrays of \(\boldsymbol{h}\) and \(p_{T}\). For the TR_XX cuts the logarithm of the efficiencies is stored. Efficiencies are in

\begin{table}
\begin{tabular}{|l|l|l|l|l|} \hline Cut name & bccuts & bplus & TR\_80 & TR\_90 \\ \hline Files for Muons & mu\_eff\_bcuts.dat & mu\_eff\_bplus.dat & not applicable & not applicable \\ \hline Files for Electrons & el\_eff\_bcuts.dat & el\_eff\_bplus.dat & trivial & trivial \\ \hline Files for Pions & pi\_eff\_bcuts.dat & pi\_eff\_bplus.dat & pi\_eff\_TR\_80.dat & pi\_eff\_TR\_90.dat \\ \hline explanation & b-tagging cuts: & b-tagging with & pion efficiency & same as TR\_80 \\  & 1 B-layer hit & additional TRT & after TR cuts for & but for an electron \\  & 2 Pixel hits & cuts: & an electron effi- & efficiency of 90\% \\  & 9 precision hits & 20 straw hits & & \\  & \(|\text{d}_{0}|\) 1 mm & & & \\ \hline \end{tabular}
\end{table}
Table 3.1: Description of the available cuts for efficiency routines of all particles. Note that probabilities obtained from the TR_80 and TR_90 cuts are including the effects of the bplus cuts although in the files for TR_80 and TR_90 only the probabilities excluding the bplus cuts are stored.

terpolated 2 dimensionally as long as they are in the calibrated range. The interpolation is linear in \(\mathbf{h}\) and logarithmic in \(p_{T}\). If the track parameters are outside calibrated efficiency an extrapolation method, as shown in Figure 3.1 and Figure 3.2, is used.

The efficiency distributions used to form the parameterisations for all particles can be found as gzipped, encapsulated postscript files in the documentation directory of the package. The names of these files are built as follows:

[Particle]_eff_[Cut]_p.eps.gz where:

[el, mu, pi];

Cut [bcuts, bplus, TR_80, TR_90]

The _p in the file name indicates that the file includes a preview of the eps in windows metafile format. The files without preview are also available in a sub directory of the documentation called ps_eps_no_preview.

## 4 Organisation and Installation

### Installing

This package is distributed as a gzipped tar file: idsemear_v5.tar.gz. The file is available from:

Figure 3.1: Description of the efficiency interpolation and extrapolation as a function of \(\mathbf{h}\) with the warning threshold

Figure 3.2: Description of the efficiency interpolation and extrapolation as a function of \(p_{T}\) with the various warnings and thresholds.

/afs/cern.ch/user/r/reichold/public. The program is compiled and runs a simple test job with identical results under the following operating systems:

* Digital Unix 4.0D
* HP-UX B.10.20
* Window NT 4.0 (using Developer studio 5.0 with the DEC Fortran compiler)

When the tar file is un-zipped and un-tared via the commands:

qunzip idsmear_v5.tar.gz; tar -xvf idsmear_v5.tar

it will have created a directory structure as shown in Figure 4.1.

#### Directories

* The make directory contains only links to the relevant source files and a make file to compile and link the package. The package is made by the command make, issued in the make directory. This will make a standard executable called Test_mu_main.exe in this directory.
* The executable should be run in the run directory into which it is linked. The run directory has subdirectories that mimic the way that ATLFAST organises its data directories. These are only filled with links that take the data files needed for the program from the top-level dat directory.
* Code relevant to specific particles resides in the directories with that particles name, i.e. electrons, muons and pions.
* Code that would be called directly from the user (or ATLFAST) together with the example of a main program resides in the atlfast directory.
* Code that is used by all particle-smearing routines but not by the user directly is place in the utilities directory.

If the user wished to build an executable with his or her own routines it is only necessary to link them into the make directory and remove unwanted links. After this either the command mkcmf1 will rebuild the makefile to include the new and remove the old files or the user can manually change the make file. Two examples of main programs (short and elaborate) for stand alone use of the package are given in the files mini_main.f and Test_mu_main.f. These latter of the two examples also includes an example ntuple.

If the package is to be used as a library together with ATLFAST the file kuchge.f from the utilities directory should not be included into the library (not linked into the make directory). This is necessary because it is a dummy version of the proper function kuchge from ATLFAST. kuchge in ATLFAST

Figure 4.1: The directory structure of the package

calls luchge from PYTHIA. The version of kuchge in this package does not do this to avoid having to link to PYTHIA. If the package is supposed to be run together with PYTHIA but without ATLFAST, the kuchge from this package should be modified (or replaced with the version from ATLFAST) so that it calls luchge from the PYTHIA library.

#### Standard Output

The standard executable will produce an HBOOK file called mu_smear.his, which contains an ntuple and some histograms. The histograms 10, 20, 30, 40 and 50 contain the pull distributions of the five track parameters as smeared by the package. Histogram 60 contains the efficiency and the ntuple 100 contains all track parameters (truth and smeared) and their resolutions as well as the binary and real values of the efficiency. The output directory contains histogram files for runs of 1000 electrons, muons and pions with \(p_{T}=5\) GeV fired at \(\eta\)=0. These can be used as a reference to check that the package works correctly.

## 5 Using the package

#### Preparation

This package uses the random number generator RM48 for all random numbers. RM48 is part of PACKLIB and is described in the CERNLIB short write up. It should be initialised with a random seed before the package is started. This insures that the results will be exactly repeatable in future runs. Initialisation should occur somewhere in the main program and not inside a subroutine to avoid duplicate initialisation. Initialisation is done as shown in the following code fragment:

 integer seed parameter (seed = 123456789) call RM49in(seed, 0, 0)

#### Main routines

After the initialisation the user will only have to call the main interface-subroutines (S) and functions (F), which are:

\begin{tabular}{|l|c|l|l|} \hline Name & Return & & Description \\  & Type & & \\ \hline Id\_set\_mu\_config & int & F & Sets and inquires the Inner Detector configuration \\  & & & used for muon smearing as described in [1] \\ \hline Id\_resol\_YTX & void & S & track smearing for all particles. \\ \hline Id\_eff\_prob & double & F & probability that the particle would pass all cuts \\ \hline Id\_eff & logical & F & true if a particle passed all tracking cuts \\ \hline \end{tabular}

Table 5.1 Main subroutines (S) and functions (F) that the user needs to call.

The arguments and return values of routines are explained in detail in appendix A. The main routine, Test_mu_main.f, gives an example of how to call them. The first step should always be to set the configuration of the Inner Detector for which the simulations should be run. This is done via:

Integer config, id_config parameter (id_config = l1 )! standard=l1.

\begin{table} \end{table}
Table 5.1: Main subroutines (S) and functions (F) that the user needs to call.

config = Id_set_mu_config(id_config) after this, calls to Id_resol_VTX can be made to smear tracks. By calling Id_eff_prob the user can determine the probability for the smeared particle to pass all specified cuts and this probability can be given to Id_eff to decide if or not the particle will pass.

Print LevelsAll routines of the package determine their print and debug levels by a call to Id_print_control. This routine holds two logical variables (warn and debug) for all subroutines. If warn for a given routine is true it will print all its warnings to standard output. If debug is true, routines will print varying levels of debug printout, allowing the user to trace their actions.

## 6 Acknowledgements

We wish to explicitly acknowledge that the results for the Inner Detector resolutions were obtained with a modified version of the program Presol. This program has been developed over several years by Alan Poppleton with contributions from many others. We would furthermore like to thank Elzbieta Richter-Was for helping with the interface to ATLFAST and her efforts to include the package as part of the official ATLFAST program. For numerous discussions and good advice, we would like to thank Bob van Eijk.

## References

* [1] E.J. Buis, R. Dankers, S. Haywood, A.Reichold: Parameterisation of the Inner Detector Performance, ATLAS INDET-NO-195, December 1997.
* [2] E. Richter-Was, D. Froidevaux and L. Poggioli: ATLFAST 1.0, a package for particle level analysis, ATLAS PHYS-NO-079, March 96.
* [3] This information is obtained from data generated by Maya Stavrianakou and analysed with code from Ulrik Egede.
* [4] id_cuts available from: [http://atlasinfo.cern.ch/Atlas/GROUPS/INNER_DETECTOR/PERFORMANCE/CODE/code.html](http://atlasinfo.cern.ch/Atlas/GROUPS/INNER_DETECTOR/PERFORMANCE/CODE/code.html)

## Appendix A Subroutine and Function Overview

In this section all subroutines and functions as well as include files are described with their arguments and purpose.

```
routine/file name
```

\begin{tabular}{l|l|c|c|c} \hline \multicolumn{1}{|c|}{**routine/file name**} & \multicolumn{3}{c|}{**Arguments**} & \multicolumn{1}{c|}{**Description**} \\ \cline{2-5}  & \multicolumn{1}{c|}{**Variable**} & \multicolumn{1}{c|}{**Dimension-Type-in/out**} & \\  & \multicolumn{1}{c|}{**Name**} & & & \\ \hline Id\_eff {r} & track & 5 & D & in & decides if track of particle ptype passes the cut\_(uses Id\_eff\_prob) \\ \hline Id\_eff\_prob {r} & track & 5 & D & in & returns the probability that track of particle ptype passes the cut\_(uses particle specific efficiency functions) \\ \hline Id\_el\_eff {r} & track & 5 & D & in & Like Id\_eff\_prob but for electrons only. \\ \hline \end{tabular}

```