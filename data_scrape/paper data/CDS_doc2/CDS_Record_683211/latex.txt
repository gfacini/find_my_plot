**ATLAS Internal Note**

**SOFT-NO-033**

**29 November 1996**

**ACTENT \(\lambda\)**

**ATGEN - Monte-Carlo interface using GENZ**

**ATGEN 2.0**

User's Guide

Version 2.00

November 29, 1996

A. Amorim 1

Footnote 1: LIP and CFNUL, Lisbon, Portugal.

ATLAS Software Group

**About this guide**

The reader who is an expert in the standard packages of high energy physics can sometimes find the matters here included as trivial. The ATLAS software has by now become an impressive accomplishment and to deal with most of the packages one has to understand the basic mechanisms at a level that makes this guide look naive. My only justification to include the well known material is to help the non-expert to get into the main concepts used in the ATLAS packages.

**Acknowledgements**

The author would like to thank all his colleagues who, by their encouragement, have made this a pleasant task. I am particularly graceful to A. Pereira for his suggestions for a "non-expert" manual and to all of those that have tested the code in its initial phase. The constant help of G. Poulard and the guidance and encouragement of M. Nessi, P. Nevski and D. Froidevaux are deeply acknowledged. I would also like to acknowledge the authors or responsibles for the different generators for useful live or e-mail discussions.

**Related Manuals**

The PYTHIA/JETSET manual[22]

The ISAJET manual[24]

The HERWIG manual[26]

The GENCL reference paper[27]

The NJETS reference notes (Stephane BASA)[28]

The VECBOS reference notes [29]

The ZEBRA manual[2]

The SLUG manual[17]

The GENZ manual[1]

The FFREAD manual[8]

The HBOOK manual[10]

The ATLFAST manual[31]

The COMIS manual[14]

###### Contents

* 1 Introduction
* 2 Installing ATGEN
	* 2.1 Running using the ATLAS software release
	* 2.2 Running the program on the ATLAS and CERNSP farms
	* 2.3 Installing the program as stand-alone
	* 2.4 Getting the new correction files for ATGEN
* 3 Running ATGEN
	* 3.1 Generating Events with ATGEN
	* 3.2 Reading Events From the ZEBRA File
		* 3.2.1 Read and write "Column-wise-ntuple" format files
		* 3.2.2 Programming Difficulties and Package Conflicts
* 4 The ATGEN WWW CGI interface.
* 5 Interfacing with the Physics Generators
	* 5.1 Interfacing with matrix-element type generators
* 6 ATGEN data-cards
	* 6.1 General Purpose Cards in ATGEN
		* 6.1.1 TASK
		* 6.1.2 TRIG
		* 6.1.3 RNDM

6.1.4 DEBU 22
6.1.5 ENER 23
6.1.6 PBEA 23
6.1.7 FRAME 23
6.1.8 BEAM 23
6.1.9 PROC 24
6.1.10 PTMI 24
6.1.11 PTMA 24
6.1.12 BACK 24
6.1.13 STRE 25
6.2 The cards relative to the PYTHIA and JETSET generators 25
6.2.1 The Specific PYTHIA cards 25
6.3 Cards relative to ISAJET and to the ISASUSY call. 27
6.4 Cards to drive the HERWIG generator 27
6.5 Cards to drive the NJETS generator 27
6.5.1 NJET 28
6.5.2 STRU 28
6.5.3 QCDS 29
6.5.4 WMAX 29
6.5.5 ETAM 29
6.5.6 ETMA 29
6.5.7 COST 30
6.5.8 COMP 30
6.6 Cards to drive the VECBOS Interface 30
6.6.1 IVEC 30
6.6.2 CVEC 31
6.7 Card to give parameters to the user routines
7 The ATGEN storing and retrieving of Cross Section data.

User Routines and User Tailoring
* 8.0.1 The use of the COMIS interpreter and compiler
* 8.0.2 Building a new executable.
* 9 The ATGEN Analysis and Associated data-cards
		* 9.0.1 JETA
		* 9.0.2 PARU
		* 9.0.3 MSTU
	* 9.1 Particle Lookup
		* 9.1.1 PART
		* 9.1.2 PARL
		* 9.1.3 IDPA
		* 9.1.4 IDMO
		* 9.1.5 IDST
	* 9.2 Event selection
		* 9.2.1 IDKI
		* 9.2.2 IDK2
* 10 The ATGEN interface to the fast simulation package ATLFAST
* 11 Interfacing with SLUG
* 12 ATGEN Benchmark results and tests
* 13 Considerations on Future Developments
* 14 New Features Introduced in the Version 2
		* 14.0.1 Event selection at generation phase
		* 14.0.2 Reconstructing decays with more than two particles
		* 14.0.3 To reconstruct the invariant mass for a jet system in a "big cone"
		* 14.0.4 New debugging options
		* 14.0.5 The matrix element generator for (W/Z) + jets: VECBOS
14.0.6 The conflict test program testrep
14.0.7 Read and write "Column-Wise ntuple" format files.
* **15 The ATGEN program structure** 15.1 Flow Diagram 15.2 Data Structures (COMMON Blocks)
* **A Description of the LUEN card for test-beam kinematics** 16
* **B The common block contents associated with the cards SSSM and SSPA**

**Bibliography**

## Chapter 1 Introduction

The ATGEN package is a system for integrating particle physics generators into a common framework. The main purpose is to provide the ATLAS physics community with a simple particle-level simulation tool that generates output compatible with the input format of the full detector simulator package of SLUG/DICE[18, 17]. In the interest of user friendliness it is kept also as a stand-alone program with a simple installing procedure described in Chap. 2.

A similar interface is also maintained inside the SLUG package [21]. In that case a different approach is used which is suitable for advanced users. It consists mainly of favouring the use of routines to deal directly with the ZEBRA banks instead of event COMMON blocks. In this case only one generator is used at each time by defining the appropriate SELECTS in CMZ[9]. The mechanism of conditional compilation also exists in ATGEN but the program is designed such that all generators can be available at the same time.

Presently the ATGEN program is an interface to the PYTHIA[22], JETSET[23], ISAJET[24], ISASUSY[25], HERWIG[26], GENCL[27], NJETS[28] and VECBOS[29] generators and is planned to include several other. The program can write and read ZEBRA[2] sequential files and is suitable to perform particle level analysis which are preliminary to the more complex and time consuming full event simulation by DICE/DICE95[18] and its reconstruction by ATRECON[20]. The interface with the ATLFAST[?] package includes in the particle-level analysis parametrisations of the main detector components and allows the study of these effects on the simulated events. The more recent approach to store and retrieve the events as "Column-Wise-Ntuples" as required by ATLSIM[19] is also implemented.

In the distribution of ATGEN the generator codes are included after being converted to a set of CMZ files. The corresponding correction files include the changes applied to the respective generators. In all cases the aim has always been to to keep these changes to a minimum but, in some cases, namely for matrix-elements type of generators, some non-trivial changes were required to allow the integration into a common package. This package is currently been ported to the CVS code management system.

Following the SLUG conventions, the ZEBRA files have the names of ZEBRA.O for output, ZEBRA.P to read the primary stream and ZEBRA.B for the secondary stream to add minimum bias events to the main event. In case of event storing in "Column-Wise-Ntuples" thecorresponding files have respectively the names "clwnt.out" and "clwnt.in".

The program is driven via data-cards using the FFREAD[8] package. In the case of ISAJET the specific input commands must be appended to the data-card file after the END statement.

The program input data-cards are rather diversified as a direct consequence of the large amount of switches required to tune the physics that one is studying. Due to this an WWW-interface has been developed in order to simplify the creation of the input of ATGEN. This interface is similar to a conference inscription and allows each of the fields to be written in a context directly linked to the documentation. Some examples of data-cards can be loaded on this interface and the user can also post her/his data-card in order to allow general access to all the community at a later stage. This is explained in detail in Sec. 4 The interface and and on-line version of this manual are linked in the page:

[http://www1.cern.ch/Atlas/GROUPS/SOFTWARE/DOCUMENTS/ATGENCGI/](http://www1.cern.ch/Atlas/GROUPS/SOFTWARE/DOCUMENTS/ATGENCGI/)

## Chapter 2 Installing AGEN

This package is part of the ATLAS software and is installed on the corresponding area (see Sec. 2.1). One can either use the executable and libraries as mentioned in Sec. 2.2 or one can do a complete installation following the steps described in Sec. 2.3

To make ATGEN as user friendly as possible I have included in the stand-alone installation all source files of both the program and used libraries. If one switches off the COMIS (Fortran interpreter used in PAW) linking options, the only external libraries that are required to be present on your computer are the CERN libraries PACKLIB MATHLIB and KERNLIB[15]. Extensive use of the CERNLIB executables PAW[11] and the CMZ[9] code manager should also be envisaged1. These libraries and executables may be obtained from the CERN software repository asis01.cern.ch by anonymous FTP2.

Footnote 1: A porting of the software maintenance system to CVS in currently underway

Footnote 2: A previous registration may be required. To register one can send a mail to cernlib@cern.ch

The program runs on the HP-Unix, IBM-6000, DEC-osf1(alpha), PC-linux and SUN workstations and the included scripts to build the executable for these machines are named atten.XXX.ins where XXX is the machine type. Extensive tests have been performed only in the HP-Unix, and PC-linux cases.

The default installation procedure will build a version of the ATGEN library ( libatgen.a) and executable (atgen.exe) that has no support for the COMIS compiler. This means that to include the user routines the usual compilation and linking procedure is required. To include the COMIS support one has to re-build the library and executable with the commands:

* cmz -b libatgen.comis.kumac
* atgen.hpux.comis.ins

where "hpux" must be replaced by the operative system in which the software is to run. The linking procedure here described requires also the presence of the CERN libraries: pawlib, graflib and grafx11. It involves also some machine specific linking options and libraries.

### Running using the ATLAS software release

The ATLAS software includes a series of CMZ macros which perform the installation of the different parts of the software. The software is located at CERN on a directory pointed by the $LHC_ROOT variable. The macros are located in the subdirectory macros and include macros to compile a library and to build the executables. A mechanism for selecting different versions was developed to use with GEANT and will be extended to the different generators. Different versions of the software may be located in the pro, new and dev subdirectories that are links to the two-month version system labelled 9x_x.

### Running the program on the ATLAS and CERNSP farms

All the libraries and executables are on the directory

/afs/cern.ch/user/a/aamorim/public/atgentest for HP-Unix

and

/afs/cern.ch/user/a/aamorim/public/atgenibm for IBM-RS600

available via AFS and accessible in the ALTAS/CERNSP machines. A simple start may consist of creating a directory and, in that directory, issuing the command:

aamorim/public/atgentest/makeatgen

This will create a series of links that will allow to run atgen.exe on your input data-card. Some Fortran (.f) files will also be copied in case the COMIS options are turned on.

If one wants to use the libraries located here but include corrections in the executable, he must copy the **atgen.cmz**, **atgen.corr**, **my.cmz and **atgen.hpux.ins** files to her/his directory. The atgen.hpux.ins script will then be able to create a new executable file in his directory.

### Installing the program as stand-alone

The ATGEN program is stand-alone which allows it to be installed independently of other packages with the exception of CERNLIB which is assumed to be present. The sequence of procedures necessary to build the libraries and the executables in your machine is described bellow:

1. Copying the file: You must open a subdirectory in your machine and copy there the **atgen.tar** file. This file is on /afs/cern.ch/user/a/aamorim/public/atgen.tar.gz on AFS, in particular on the ATLAS cluster.

2. Open the tar file: Uncompress the file by issuing the command: **gunzip****atgen.tar.gz** This Unix backup file should be opened using the command: **tar****xvf****atgen.tar** that will put in your directory all the source and script files necessary to do the installation among which are the files: MAKETAR INSTALL GENERATOR.HISTORY **atgen.cmz my.cmz pythia57.cmz jetset74.cmz isajet7.cmz herwig58.cmz gencl.cmz matele.cmz njets.cmz matele.cmz vecbos.cmz genz.cmz atlfast.cmz atgen.corr genz.corr isajet713.corr jetset7406.corr pythia5715.corr herwig.corr gencl.corr vecbos.corr genz.corr atlfast.corr
3. Building the libraries: In this step you compile all the libraries inside your directory by running the script INSTALL. Please check at the beginning of this file the CMZ alias that allows to switch between full compilation:

**CMZ="cmz"**

and only building the installation kumacs:

**CMZ="echo"**.

The compilation options must also be tuned at the beginning of the INSTALL script. These options will be stored in the "cmzsets.kumac" and "cmzmatele.kumac" files, respectively for general libraries and specifically for the case of matrix-element type

This installation will leave in your directory, besides the libraries themselves, the following files:

* The CMZ installation kumacs to compile all libraries.
* The directories XXX_src with the Fortran source files of the routines corresponding to the library XXX.
* The Unix scripts to compile the executable on each different type of machine.
* The data-card file examples with extension.datacard.
* The atgenman.tex file containing this manual that must be processed by LaTeX.
* The pick.kumac and pick.f files that are to be used in PAW to produce a PICK data-card for SLUG (see Chapter 11).
* The uanal.f, uinit.f and uval.f routines to be used directly by the COMIS interpreter/compiler.
4. Building the executable file:

An executable file (atgen.exe) must be created by using the appropriate Unix script file. On HP workstations this file is named atgen.hpux.ins and for the other tested environments a similar file is included. The COMIS option must be switched off ( and the associated libraries removed from the compilation statement) if one wants a stand-alone version of the code that requires less libraries.

The generalisation to other UNIX machines where the CERN library is available is very simple and correspond only to change the compilation statement in these files.3

Footnote 3: An utility to dump the ZEBRA files is included in atgen.tar. The zebdump.f file is a modified copy of the ATLAS utility with the same name available on CERNVM. The executable can be obtained using the enclosed zebdump.XXX.ins where XXX is the machine type.

### 2.4 Getting the new correction files for ATGEN

Some not very extensive corrections to both ATGEN and the generator libraries will become available very often. This makes it rather cumbersome to always repeat the installation procedure. The alternative choice is to copy the correction files atgen.corr or XXX.corr where XXX is the generator and version.

Following the choices for the ATLAS software maintenance separate correction files are kept for each library. To upgrade a specific page one has to copy the correction file, edit the specific kumac that builds that library adding the USE directive for that file and execute this kumac. A new library will be built that will be used when linking atten. If required a copy of the old library can be kept to check the compatibility of results.

In the case of ATGEN corrections one just needs to include the USE file in the atten.XXX.ins script that builds the executable and run it.

The new correction files will be available in the ATLAS software directories but for the time being they can be picked from the mentioned directory.

## Chapter 3 Running ATGEN

In this Chapter the simple procedures to run ATGEN are described. The Unix syntax is used which has to be changed in the case to VM/CMS of VMS syntax in non-Unix machines.

### 3.1 Generating Events with ATGEN

The ATGEN program reads the data-cards from the standard input and writes all messages to the standard output. To run the program one has only to give the input data-card and, if wanted, to redirect the output to a listing file. Some examples of data-card files are created during the installation procedure. These data-cards are described in detail in Chap. 6, in particular the TASK card controls the program task as event generation using a specific generator or reading back the events to do a new analysis (TASK=0).

The command

\[\text{atgen.exe $<$ wjjpyt.datacard $>$ listfile}\enspace,\]

for example, runs ATGEN using the **wjjpyt.datacard** file that generates events using PYTHIA and writes them on the ZEBRA.O output file.

The ATGEN program creates the following output files:

* at.hbook This hbook file may contain an ntuple (1) automatically generated by ATGEN using the PART card (Chap. 9) and all histogram and ntuple allocation performed in the user routines (see Chap. 8).
* ZEBRA.O The ZEBRA file is a binary file written in the machine independent format that contains the ZEBRA banks RUNNT and EVNT that contain the full event information.

### Reading Events From the ZEBRA File

The FZ file written by ATGEN contains information on all particles in each event. The output file ZEBRA.O can be used for input by renaming it to file ZEBRA.P and running ATGEN with a data-card including a TASK 0 card. This is a fast procedure to perform a new analysis on the already generated events.

This can be done, for example, by issuing the command:

\[\mbox{atgen.exe $<$ wjjread.datacard $>$ newlisting}\]

The **wjjread.datacard** is a demo file created by the INSTALL procedure that differs form the event generation data-card by the TASK 0 line. All CARDS to steer the generator options are irrelevant.

The zebdump utility included in the ATGEN release provides a simple way to examine the BANK headers in this file.

#### Read and write "Column-wise-ntuple" format files

The events can also be written or read back in the new format of "Column-wise-ntuples". The routines to perform the actual interface were modified from an original version developed by Pavel Nevski. The event data is packed in a rather loose way so that events without these limits should not appear. If these bound are overcome please inform us. The choice of event storage format is selected by the second number of the TASK (See Sec. 6.1.1) datacard and the input/output chosen names are respectively "clwnt.in" and "clwnt.out". An option is provided to read events in GENZ format and write them in Column-wise-ntuple format (TASK 0 2).

#### Programming Difficulties and Package Conflicts

There were several conflicts and incompatibilities among different packages, namely between NJETS and VECBOS (H. Kuijf was a common author).

These conflicts were almost impossible to debug so a PERL program called testrep was developed to find them in a systematic fashion. It is also included in ATGEN distribution. It checks for repeated Commons in deferents packages, different SUBROUTINE definitions and functions, as well as matches among these. Tests relative to CERNLIB libraries can also be included.

The command syntax is: testrep *_src \(>\) log

## Chapter 4 The ATGEN WWW CGI interface.

The construction of the input data-card can be greatly facilitated using the WWW CGI ( Common Gateway Interface ) data-card construction facility on: [http://atlasinfo.cern.ch/atlas-bin/atgen.cgi](http://atlasinfo.cern.ch/atlas-bin/atgen.cgi)

When entering for the first time the form one is able to choose to start from an empty data-card of from an already existing one. The button "list" allows to see the available data-cards. These can be loaded and altered to match one's requirements. When the changes have been made to the data-card this can be saved as a new file by filling the the user name and the file name and clicking "save". This procedure can also be used as an intermediate step in order to save the work already performed. For security reasons one is not allowed to overwrite an existing file. If you saved a file that you want to delete please send a mail to aamorim at cc.fc.ul.pt.

Next to the respective data-card field are always hyper-links to the appropriate manual pages. This is also the case for the generator manuals. After consulting the documentation one can go back to the data-card construction by issuing the browser "back" command. Sometimes, if there are problems with the "cache" of the browser one is asked the question: "Repost from data?". Answer yes to this question. The Mosaic browser is sometimes very slow if a large number of form fields are available. This problem is browser specific and does not happen in Netscape.

In the initial menu only the generic ATGEN options are available. By choosing the TASK of running a MC generator and clicking "Refresh", one has access to a button to activate the menu relative to the generator chosen. The buttons to activate the menu on ATGEN "analysis" or event selection ("select") are always present. If one of these sub-menus is activated one can recover the initial menu by clicking "refresh".

On the ATGEN analysis menu the number of particles that appear in the menu can be modified at any time by changes the value of the "N. of Particles used" and clicking "analysis".

The PYTHIA generator options menu has hyper-links to the CERN server where an HTML3 version of the manual is stored. Since most browsers do not understand the mathematics part of the HTML3, some of the formulas may not be properly displayed.

This interface has been build as the result of the specific problems involved in constructingthe input of ATGEN:

1. Large variety of cards involved in the different generators and analysis options.
2. The extensive information required is only explained in the lengthy manuals or papers.

and, it allows:

* The direct interface to documentation.
* The possibility to read and write the half done cards.
* It does not require the local storage and compilation of an sophisticated graphical interface that would require the installation of many tools.
* The information sent trough the network is simple HTML. This allows for slow connections.
* "PERL", the implementation language is simultaneous very simple and powerful in dealing with the statement syntax of the data-card.
* The Remote Engine program (run at the server) is opening only the appropriate options at each step.
* The version control is simple since it needs only to be updated on the server.

## Chapter 5 Interfacing with the Physics Generators

A log file of the generator source files that were picked for ATLAS is kept updated in file GENERATOR.HISTORY. In the present version it contains:

GENERATOR Int.ver cmz-file corr SOURCE Last Change My DATE ----------------------------------------------------- PYTHIA 5.7 pythia57 pythia5704 Sjostrand(torsjo.1920CERNVM) 7.4.94 25.5.94 JETSET 7.4 jetset74 jetset7402 Sjostrand(torsjo.1920CERNVM) 7.4.94 25.5.94 ISAJET 7.09 isajet7 isajet709 bnlux1.bnl.gov:/pub/isajet/... 23.4.94 14.6.94 GENCL 1 gencl gencl R. Hawkings(pubzp.1970CERNVM) 18.6.94 ISAJET 7.10 isajet710 isajet710 bnlux1.bnl.gov:/pub/isajet/... 29.7.94 22.8.94 JETSET 7.4 jetset74 jetset7403 Sjostrand(torsjo.1920CERNVM) 15.7.94 24.8.94 PYTHIA 5.7 pythia57 pythia5705 Sjostrand(torsjo.1920CERNVM) 15.7.94 24.8.94 PYTHIA 5.7 pythia57 pythia5705a Sjostrand(mail bug on W+W-BRAtio) 05.9.94 JETSET 7.4 jetset74 jetset7404 Sjostrand(torsjo.1920CERNVM) 26.8.94 24.11.94 PYTHIA 5.7 pythia5709 Sjostrand(torsjo.1920CERNVM)26.10.94 24.11.94 ISAJET 7.13 isajet713 isajet713 bnlux1.bnl.gov:/pub/isajet/...30.9.94 24.11.94 NJETS 2.1 njets... sbasa@atlas.cern.ch:/public/njets 4.4.95 05-20-94 JETSET 7.4 jetset74 jetset7406 Sjostrand(torsjo.1920CERNVM) 3.1.95 25.06.95 PYTHIA 5.7 pythia57 pythia5715 Sjostrand(torsjo.1920CERNVM) 25.4.95 25.06.95 VECBOS... vecbos vecbos Marina Cubal.(atlas/CDF)... 12.11.95

The generator source files were converted using the CMZ code manager and the following changes are introduced in the corresponding correction files:

* The HEPEVT common block that had 2000 lines in GENZ and HERWIG and 4000 lines in ISAJET, PYTHIA and JETSET was set to 10000 in all codes consistently. All real values are set (or converted) to single precision for compatibility with GENZ. This is a choice which has some advantages ( it allows the inclusion of a reasonable number of minimum-bias events ( the non-decayed particles only) and allows this common block to be used todo particle level analysis including pile-up. Since most generators have special input to include minimum bias events, a large enough common block is required to use this option. This option had not to be included in SLUG because the minimum bias events are added at the level of the KINE bank.
* In PYTHIA and JETSET I also set the length of the LUJETS common to 10000 in order to be able to copy events to this format at any time.
* In ISAJET I had to remove a +EOD line of all routines in the CMZ file. The FRAME common block had to be renamed to avoid conflicts with a routine with the same name in the CERN mathlib.
* In HERWIG I had to change the name of the internal routine iucomp due to a conflict with the standard cernlib routine with the same name.
* In GENCL I added user control on beam(target) type and momentum.
* The common subroutines in NJETS and VECBOS are stored in the file matele.cmz. A separated library with the same name was also constructed. Conflicting different routines with similar names were renamed in vecbos.cmz.
* Several changes have been included in the VECBOS main routine to allow user steering of the main parameters.
* Routine "vegas" in VECBOS was rewritten by introducing the appropriate entry points to allow an event loop outside this routine.

The change on the common block size forces a similar change in SLUG since one is also linking these libraries with SLUG. The output ZEBRA.O file is, however, compatible with previous versions since all information is contained in data banks.

All changes from the original programs are kept separately in one correction file for each generator. Generator upgrades that do not involve a change in the version will also be included in separate correction files. This makes it easy to choose among different patches at compilation time and also avoids keeping many versions of the same code.

### 5.1 Interfacing with matrix-element type generators

The ATGEN code is interfaced at present with the NJETS and VECBOS generators that are of the matrix-element type.

The cross section philosophy in which VECBOS lays had to be made compatible with the event philosophy more familiar to the use in experiments.

The generator works on two phases: initialisation and final. In the first phase a grid over the phase-space is constructed in order to have events of more uniform weighting on the final phase. Only the final phase events are hadronized.

Since the main purpose of this generator was to compute the cross section for processes where the scattering amplitude varies quite strongly on the final state phase-space, the natural choice is to use weighted events. The number of simulated events was not considered an important parameter but rather obtaining a converged value for the process cross section. The total number of events simulated is therefore not constrained.

To obtain cross-sections one must also sum over many possible final states. Due to the quantum nature of the amplitudes this involves the inclusion of interference terms between properly (anti)symmetric final states. Sums over the final state colours are also assumed in the computation of the scattering amplitudes.

Processes with different colour flows hadronize differently and therefore their amplitudes cannot be summed if an event per event analysis is to be performed afterwards. In VECBOS, gluons and quarks of several flavours are summed over to produce an n-jet final state. Their hadronization would however be quite different.

For the mean time we have hadronized the jets resulting from VECBOS as gluons. This by no means a good prescription. Since the W fragmentation is performed by JETSET the colour of the quarks resulting from the W is properly taken into account.

The beam leftovers and the corresponding underlying event is not considered at all which is another reason why the colour coupling must be unrealistic.

Most of what has been stated is also true for the NJETS generator since it shares the same programming philosophy.

[MISSING_PAGE_FAIL:21]

### General Purpose Cards in ATGEN

In this section, general purpose Cards, common to several generators, are introduced.

#### Task

CARD NUM type Description Defaults ------------------------------------------------------------ TASK 2 I Controls the ATGEN TASK to be performed D=0  1 I =0 Reads Events from ZEBRA.P  =1 Generates events using PYTHIA and stores in ZEBRA.0  =-1 Generates using PYTHIA but does not store  =2 Consider fragmented partons (like SLUG KINE 0) stores  =-2 " " " " does not store  =3 Generates events using ISAJET and stores  =-3 " " " " does not store  =4 CALLS ISASUSY followed by ISAJET and stores  =-4 " " " " does not store  =5 Uses HERWIG and stores the events  =-5 " " does not store  =6 Generates events using GENCL and stores  =-6 " " " and does not store  =7 Generates events using NJETS and stores  =-7 " " " " and does not store  =8 Generates events using VECBOS and stores  =-8 " " " and does not store  =+++ I am working on it and user requests are welcome.

2 I =0 Only GENZ activity D=0 . =1 Only CW-ntuple activity  =2 (with task(1)=0)Force reading from GENZ and write CW-ntuple  Otherwise Write GENZ and CW-ntuple  =3 Events from GENZ and background from CW-ntuple  =4 Events from CW-ntuple and background from GENZ

#### TRIG

CARD NUM type Description Defaults ------------------------------------------------------------ TRIG 4 I Total number of events. Validate conditions  1 I The total number of events to be processed. D=100.  If positive it counts also events that have not  passed the validation. If negative it counts onlyevents that have passed the validation.

(In using ISAJET the number of events generated is

 the minimum of this number and the corresponding one

 in the ISAJET command.

 In using VECBOS, this is the number of events fragmented

 but not Necessarily the events generated by VEGAS. If

 one sets this number to a large value all VEGAS events are

 kept.)

2 I The number of particles to be found in atgen analysis

 to validate the event. D=0.

3 I If not=0 several fragmentation tries are made for the

 same hard interaction. D=0.

 The maximum number of events before new hard scattering.

4 I The number of particles to be found in atgen analysis

 Before fragmentation. D=0.

 (The variable NVAL2 associated to this parameter is set to

 the symmetric negative value if only a new fragmentation

 is required)

See Chap. 14 for an example.

#### Rnbm

CARD NUM type Description Defaults

 RNDM 1 I Random number seed (Marsaglia number) D=54217137 (For PYTHIA and NJETS it has to be >=0 and <=900 000 000

#### Debu

CARD NUM type Description Defaults ------------------------------------------------------------ DEBU 3 I Debug card similar to SLUG. This controls the information

 output for each event. Debug that must be done

 once each run controlled by the PTAB card (bellow).

 1 I =0 No debug

 =1:3 print event listing using LULIST(1:3) D=0

 =4 print only ATGEN related information like hard/frag event

 =5 print HEPEVT using HEPDEB

 =11:14 print event using GNZPRINT(1,1:4)

 =21:24 " " " GNZPRINT(2,1:4)

 =31:34 print like in 11:14 and also like in 21:24

 =100 Do a 2dhisto (id=NEVENT*100) of the calorimeter cells(use h/plot id LEGO,CYL to obtain a cylindrical calorimeter lego plot. )
2 I First event to debug D=0
3 I Number of events to debug D=0 ------------------------------------------------ Example: DEBU 1 10 2  Prints the LULIST(1) information for events 10 and 11.

#### Ener

CARD NUM type Description Defaults ----------------------------------------------------- ENER=TARG 1 R Available energy in the given frame (CM for NJETS) D=14000. ( used in PYTHIA, NJETS and VECBOS)

#### Pbea

CARD NUM type Description Defaults ----------------------------------------------------- PBEA 2 R Beam momentum of the two colliding particles D=7000. 7000. ( used in HERWIG and GENCL)
1 R momentum of particle travelling in the Z direction
1 R (positive) momentum of particle in opposite direction

#### Fraume

CARD NUM type Description Defaults ----------------------------------------------------- FRAME 1 A Frame of collision ( used by PYTHIA now) D= 'CMS'

#### B Beam

CARD NUM type Description Defaults ----------------------------------------------------- BEAM 2 A Beam type (used in PYTHIA, HERWIG, GENCL, NJETS and VECBOS) 1 A Particle 1 type D='P,
2 A Particle 2 type D='P,

#### PROC

CARD NUM type Description Defaults ------------------------------------------------- PROC 1 I IPROC process number HERWIG and in NJETS D=3 NJETS PROCESS 1 ==> EXACT calculation 2 ==> Leading Order of multigluon scattering processes 3 ==> Special Helicity Approximation (SPHEL) 4 ==> MAXWELL 5 ==> ESFAG 6 ==> ESFAQ 7 ==> MCHEL 8 ==> |M|^2 = 1

#### PTMI

CARD NUM type Description Defaults ------------------------------------------------- PTMI 1 R PTMIN in HERWIG and in NJETS D='100.' for njets NJETS Minimal value of the transverse momenta of each partons (GeV). Allowed values are PTMI > 0.

#### PTMA 1 R PTMAX in HERWIG

CARD NUM type Description Defaults ------------------------------------------------- BACK 2 R Add min bias (READ OPERATION ONLY to avoid double-counting in SLUG ) 1 R Poisson mean of the number of min bias events to add D=0. 2 R =0 Only non-decayed particles in min-bias are added to HEPEVT D=0. =1 Events added directly from the GENCL generator =2 events read with all particles kept.

Example: BACK 20 0  a random number of events generated using a Poisson distribution  with average 20 is added to HEPEVT and LUJETS. Only the stable  particles in these events red from the secondary stream are kept.  BACK 4 1  a random number of events generated using a Poisson distribution  with average 4 is added to HEPEVT and LUJETS. These events are  generated using GENCL.

#### 6.1.13 Stre

CARD NUM type Description Defaults -------------------------------------------------------- STRE 1 I =0 all particles are kept in the primary event  D=0.  diff 0 only non-decayed particles are kept in main event

### The cards relative to the PYTHIA and JETSET generators

CARD NUM type Description Defaults -------------------------------------------------------- LUEN 8 R the parameters after KINE=3 in slug for test beam kinematics.

See Appendix A

CARD NUM type Description Defaults -------------------------------------------------------- PTAB 1 I diff 0 LULIST(11:13) at initialization if PYTHIA used D=0  prints all ISASUSY output if it is used =1 LULIST(12) =2 LULIST(13) =3 LULIST(11) =4 LULIST(11)+LLIST(12) =5 LULIST(11)+LLIST(12)+LULIST(13)

#### 6.2.1 The Specific PYTHIA cards

CARD NUM type Description Defaults -------------------------------------------------------- MSEL 1 I PYTHIA MSEL Pythia defaults  MSUB 200 I PYTHIA MSUB Pythia defaults  MSTP 200 I PYTHIA MSTP Pythia defaultsCKIN 200 R PYTHIA CKIN PYthia defaults MDM1 2000 I PYTHIA MDME(i,1) PYthia defaults MDM2 2000 I PYTHIA MDME(i,2) PYthia defaults MDC1 500 I PYTHIA MDCY(i,1) after *PYIN PYthia defaults MDC2 500 I PYTHIA MDCY(i,2) after *PYIN PYthia defaults MDC3 500 I PYTHIA MDCY(i,3) after *PYIN PYthia defaults BRAT 2000 R PYTHIA BRAT after *PYIN PYthia defaults KFP2 200 I PYTHIA KFPR(i,2) PYthia defaults MSTJ 200 I PYTHIA MSTJ  MSTU 200 I PYTHIA MSTU  PARJ 200 R PYTHIA PARJ  PARU 200 R PYTHIA PARU  PYthia defaults PMA1 500 R PYTHIA PMAS(i,1) PYthia defaults PMA2 500 R PYTHIA PMAS(i,2) PYthia defaults PMA3 500 R PYTHIA PMAS(i,3) PYthia defaults PMA4 500 R PYTHIA PMAS(i,4) PYthia defaults

CARD NUM type Description (from slug) please test!!! Defaults -----------------------------------------------------
*STABLE 20 List (in any order) LUND particle codes for those particles you wish to set stable. Sets both particle and anti-particles stable.
*FORCE 2 A specific particle can be forced to decay to states containing another specified particle.
1 PDG particle code to decaying particle (Sensitive to sign, ie. particle/antiparticle)
2 PDG code for daughter particle (Not sensitive to sign.)
*DMOD 10 (Real) Specify whole or part of a single decay channel's information. See JETSET array MDME.
1 KF ( ie. PDG ) code for decaying particle 2 IDC index of decay mode in decay table. This must be obtained by looking at the listing produced by a call to LULIST(12).
3 MDME(IDC,1)
4 MDME(IDC,2)
5 BRAT(IDC)(after *PYIN) if 0.0 or absent, take default 6-10 KFDK(1-5) (if=0.0 or absent, use default)
*PYIN 0 Card to call the PYINIT routine before some datacards are fed. Usefull for example if MDC1, MDC2, MDC3, or BRAT cards are used. Very nice idea from Simon Tardell.

Cards relative to ISAJET and to the ISASUSY call.

The ISAJET generator has a very sophisticated user interface that is used by appending it to the input datacard file to the end of the input datacard for ATGEN after the END command.

The ISASUSY package is now fully contained inside ISAJET and is called if one of the MSSM1, MSSM2, MSSM3 cards is included in the ISAJET input. The coupling and mass parameters that can be given to this routine are however quite limited and the following cards describe a complementary implementation that is included and that has more freedom in changing the parameters. After the ISAJET initialisation is performed, a modified version of SSMSSM is call to compute the supersymmetric parameters.

CARD NUM type Description Defaults ------------------------------------------------------------ SSSM 18 R The SSSM common in SSMSSM routine.

See Appendix B

CARD NUM type Description Defaults ------------------------------------------------------------ SSPA 33 R The SSPA common in SSMSSM (including the input parameters). See Appendix B

### 6.4 Cards to drive the HERWIG generator

This is really very preliminary and incomplete. It needs further improvement.

CARD NUM type Description Defaults ------------------------------------------------------------ (see atgen general cards).

### 6.5 Cards to drive the NJETS generator

The library PDFLIB [30] which is a compilation by H. Plothow-Besch Is used by NJETS to incorporate further Parton Density Functions.

#### Njet

(see also atgen general cards).

 CARD NUM type Description Defaults ----------------------------------------------------- NJET 1 I Number of Jets in the Final State. D=2

#### STRU

 CARD NUM type Description Defaults ----------------------------------------------------- STRU 1 I Structure functions available: 5 of them are directly D=1 incorporated in NJETS and the other call the library  PDFLIB :

 ----------------------------------------------------- Function incorporated

 1 ==> Duke Owens set 1 (1984)  2 ==> Duke Owens set 2 (1984)  3 ==> Eichten, Hinchliffe, Lane and Quigg set 1 (1984)  4 ==> Martin, Roberts and Sterling E (1988)  5 ==> Martin, Roberts and Sterling B (1988)

 ----------------------------------------------------- Function defined with PDFLIB

 6 ==> Martin, Roberts and Sterling SO' (1993)  7 ==> Kwiecinski, Martin, Roberts and Settling B- (1990)  8 ==> Martin, Roberts and Sterling BO-135 (1991)  9 ==> CTEQ Collaboration 2'L (1994)

 Any of the distributions in the PDFLIB compilation can be selected using STRU= 1000 * NGROUP +NSET.

 The structure function selected with STRU is used to compute the cross section SIGMA(n jets) and the contribution of each subprocesses to the final result given in the column CONT.

#### Qcds

CARD NUM type Description Defaults -------------------------------------------------  QCDS 1 I QCD scale Q used to compute the strong constant coupling.a D=5  This parameter is particularly important in the case of the  production of multi-jet events because more powers of  alpha_strong are involved in the calculation. 1 ==> PT average 2 ==> Total invariant mass 3 ==> Average invariant mass of 2 outgoing particles 4 ==> Mass of quarks 5 ==> PTmax in the event

#### Wmax

CARD NUM type Description Defaults -------------------------------------------------  WMAX 1 R To produce unweighted events: D=0.  0 ==> Weighted events  >0 ==> Weight used to produce an unweighted  sample (must be the maximum weight WTMAX).

To find WTMAX, it is necessary to run a first time NJETS.  At the end of the job, WTMAX can be found in the output  file (see appendix). By running a second time NJETS with  WMAX=WTMAX, unweighted events are this time produced.

#### ETAM

CARD NUM type Description Defaults -------------------------------------------------  ETAM 1 R Maximum parton pseudorapidity to accept. D=8.  Allowed values are ETAM > 0.

#### ETMA

CARD NUM type Description Defaults -------------------------------------------------  ETMA 1 R Cut on the sum of partons transverse momenta. D=NJET*PTMI

#### 6.5.7 Cost

CARD NUM type Description Defaults ------------------------------------------------- COST 1 R Cosine of minimum opening angle allowed between D=0.99 partons. This parameter requires that the outgoing partons are well separated in the phase space and assure the validity of perturbative QCD avoiding collinear divergences. Allowed values are 0.995 < COST < 1.0

#### 6.5.8 Comp

CARD NUM type Description Defaults ------------------------------------------------- COMP 1 I Compare different structure functions sets: D=0 0 ==> No 1 ==> Yes If a comparison between several functions is made, the functions incorporated in NJETS are automatically selected and only one defined with PDFLIB (by default CTEQ 2'L) is selected.

### 6.6 Cards to drive the VECBOS Interface

The VECBOS generator has several input parameter that were put on the following cards.

#### 6.6.1 Ivec

CARD NUM type Description Defaults ------------------------------------------------- IVEC 12 I Control the VECBOS generator. 1 I NJET Number of final state jets (0, 1, 2, 3 or 4) 2 I IVEC 1 W ( 2 Z,Gamma Fragmentation not implemented yet) 3 I IDECAY decay mode: W:1,2= el nu Z:1=e+e- 2=neutrinos =1 4 I IWHICH W: 1=W+, 2=W-, 3=both =3 ( =3 the fragmentation assumes equal fractions for W+,W-) 5 I ITMX1 Maximum number of iterations at initialisation phase =1 6 I NCALL1 Number of Calls at the initialisation phase. =100* I IIMANN1 Matrix element method used at initialisation phase.=1 ( =1: Exact, 2: M^2=1, 3: M^2=1/SHAT**NJET)
* I ITMX2 Maximum number of iterations at initialisation phase=1
* I NCALL2 Number of Calls at the Final phase.
* I IIMANN2 Matrix element method used at final phase. =1 ( =1: Exact, 2: M^2=1, 3: M^2=1/SHAT**NJET)
* I I IMQ To have a massless B Bbar pair in the final state =1 =0
* I IQCDDS QCD Dynamical scale: 1. PT-average 2: Total invariant mass 3. Average invariant mass of two jets 4. Mass of vector boson 5: Ptmax in the event

Comments:

One can switch the fragmentation according to the MSTP(111) parameter.

The subprocesses used (ISUB) are decided automatically in the VECBOS routine according to the final state specified.

The set of structure functions used are set to 4= kmrsd0 (0.215)

corresponding to option IUSE=4. I envisaging the use of PDFLIB for this generator.

The number of actually simulated events at the initialisation and final

phases is a complicated function of ITMX and NCAL defined on subroutine vegas. (See the TRIG datacard for comments).

#### CVEC

CARD NUM type Description Defaults ----------------------------------------------------- CVEC 8 R Cuts applyed to the generated events in VECBOS.
* I R PTVCUT 2 R PTMINJ 3 R PTMINL 4 R PTMIS 5 R ETAMAJ 6 R ETAMAL 7 R DELRJJ 8 R DELRJL

The beam energy and type are taken from the ENER(Sec. 6.1.5) and BEAM (Sec. 6.1.8) generic datacars.

### 6.7 Card to give parameters to the user routines

This is a card to allow the user to pass parameters to its analysis routines.

CARD NUM type Description Defaults ------------------------------------------------- UCAR 100 R User parameters for UINIT, UNAL UVAL UDETE routines D=0.

## Chapter 7 The ATGEN storing and retrieving of Cross Section data.

The cross section ntuple in file "xsec.hbook" contains one entry per run with 13 values.

The first value is the run number, the 2th to 5th values are user given parameter values. Values 6th to 9th are the subprocess cross sections while the 10th value is the total cross section. The 11th,12th and 13th values are respectively the number of events generated, validated and written on the atgen ntuple.

If the present run is generating events and has all parameters (including run number) up to the 5th with the same values of a previous run, then the previous run entry is deleted and replaced by the new values. If a run is reading events and has the same run number of a previous run, then the cross section values are copied from the corresponding previous entry.

These procedures are controlled via the data-card XSEC:

CARD NUM type Description Defaults ------------------------------------------------------------ XSEC 13 R Controls storing of cross sections on xsec.hbook D=0 1 R The first parameter used as run number (also in GENZ)D=0  2 R PAR 1 given by the user (some parameter like mtop..) D=0  3 R PAR 2 "...  4 R PAR 3 "...  5 R PAR 4 "...  6 R PAR 5 "...  7 R The first process number to store the cross section  8 R The second process number to store the cross section  9 R The third process number to store the cross section  13 R The ntuple number in xsec.hbook to which data are appended

In the case of the VECBOS generator, the only values stored are the XSEC(10) with thetotal cross section and XSEC(9) with the cross section computed at the initial mesh adjusting phase.

In order to plot the cross section (ex: xsec) as a function of some parameter (ex: par1) one can use the paw command:

n/plot 99.par1 xsec

and after realizing the number of entries needed one can create an histogram (id) with that number of entries and do the command:

n/plot 99.par1 xsec!! c (id)

a similar procedure can be applied to the dependence on two parameters using two dimensional histograms.

## Chapter 8 User Routines and User Tailoring

In the patch (directory) ATUSER in ATGEN.CMZ there are 4 dummy routines that must be changed if the user wants to do specific jobs:

-UINIT(NTOT,TAGS) Define NTUPLES and call HBOOKN. It is called in the beginning of the run. The Ntuple 1 is already used by ATGEN if the PART analysis data-card is used. The NTOT value provides the number of ntuple entries booked by ATGEN and TAGS points to the ntuple label string array. Entries after NTOT are free to be used. This procedure allows a better functionality inside PAW than having two separate ntuples. Hbook file at.hbook is already open.

-UANAL(NTOT,X) called for each event. The user can either fill the atten ntuple after the NTOT entry or fill her/his ntuple 1. ATGEN provides some utility routines that can be used inside UANAL:

Footnote 1: The event number can be picked from the NEVHEP variable in the HEPEVT common block

function integer NFPAR(TAG) Return the line in LUJETS common block corresponding to the particle found by atten analysis routines with PARL 'TAG'. Ex: npar=NFPAR('j1') gives the LUJETS line of the particle corresponding to PARL 'j1'

SUBROUTINE ATBIGC(REAL*8 PNINV(4),REAL R) Return in PNINV the four vector resulting to apply a Big Cone Algorithm with radius R cente:wq red around the four vector in PNINV given as input.

-UVAL(IRET) if the user sets IRET different from 0 the event is dropped ( not written). called for each event. The variable NVAL2 (in the commons of $ATGKEEP) associated to the fourth parameter in the TRIG data-card must be set to the symmetric negative value if only a new fragmentation is required.

-UDETE(I,IRET) a user routine to apply some detector effect to the particle index I of the ATGEN analysis routines. Called from the ATGEN analysis routine associated with the card PART for each particle in the events specified in the PART card. It is called before UANAL.

At any moment in UNAAL the user has available to do the analysis:  - the GENZ routines that fetch information from the zebra banks.  - the HEPEVT standard event common block  - the LUJETS pythia common block, regardless of the specific generator used.  - the UKEEP vector with the real parameters fed by the UCAR card.

#### The use of the COMIS interpreter and compiler

A COMIS[14] interface has been implemented for the user routines UVAL UINIT and UNAAL. The COMIS corresponding routines are supposed to be on the files uval.f, uinit.f and uanal.f.

**To avoid linker conflicts the subroutines inside these files are named respectively UVALCS, UNITCS and UNAALCS.**

The calls to these routines or to the ones linked directly in the executable is controlled by the data-cards:

CARD NUM type Description Defaults -----------------------------------------------------
*UVAL 1 I Controls the UVAL calls D=0  =0 only the internal routines are called  =1 Both the internal routine and the comis one are called  =2 Only the comis routine is called  =3 like =1 but dynamically linked)  =4 like =2 but dynamically linked)  =5 Neither the internal nor the comis routines are called  CARD NUM type Description Defaults -----------------------------------------------------
*UNII 1 I Controls the UINIT calls D=0  =0 only the internal routines are called  =1 Both the internal routine and the comis one are called  =2 Only the comis routine is called  =3 like =1 but dynamically linked)  =4 like =2 but dynamically linked)  =4 like =2 but dynamically linked)  =5 Neither the internal nor the comis routines are called  CARD NUM type Description Defaults -----------------------------------------------------
*UNA 1 I Controls the UNAAL calls D=0  =0 only the internal routines are called  =1 Both the internal routine and the comis one are called  =1 Both the internal routine and the comis one are called  =2 Only the comis routine is called  =2 Only the comis routine is called  =3 like =1 but dynamically linked)  =4 like =2 but dynamically linked)=5 Neither the internal nor the comis routines. are called

#### Building a new executable.

Besides these specific routines the user has an almost infinite freedom to change the program by using the MY.CMZ file. In fact all the routines that that were copied from ATGEN.CMZ to the MY.CMZ file and then changed will be recompiled and linked with ATGEN when the script atten.XXX.ins is executed2.

Footnote 2: This script will build an ATGEN executable without COMIS support. In case the COMIS support has been included, by generating the library libatgen.a with the libatgen.comis.kumac macro, the executable has to be build in accordingly by the atten.XXX.comis.ins script.

If a change in one of the external libraries is to be included, one may use the same procedure by copying it from the library CMZ file to MY.CMZ. This routine will then be compiled and loaded to the object file, preventing the old one with the same name to be used.