ATLAS-DAQ-NO-45

26 June 1995

## Ideas for error detection and recovery in ATLAS readout systems

Nick Ellis

This note addresses issues of error detection and recovery in ATLAS readout systems. It is widely accepted that a bunch-crossing identification (BCID) number should be added to the data as early as possible in the readout chain [1]. By comparing the BCID numbers in the data from different groups of readout channels in a given event with a reference value received via the trigger, timing and control (TTC) system, one will detect "synchronisation errors". Such synchronisation errors can occur, for example, if a front-end (FE) unit misses a level-1 (LVL1) trigger accept signal. It is suggested that it may be possible to perform error recovery as well as error detection by using the BCID numbers, requiring much less frequent global reset signals.

### Motivation

While it is our intention to build a trigger/DAQ and readout system for ATLAS that is highly reliable, it would be naive to think that readout errors will not occur. Depending on the rate of readout errors, and on how and where we deal with them, they may result in significant deadtime for the experiment -- 100% deadtime in the worst case! This is not a trivial matter -- in at least one \(\mathrm{p\overline{p}}\) experiment, a major source of deadtime was due to time spent in recovering from errors.

In relation to the above, one should be careful when making comparisons with existing experiments at LEP in which (after several years of operation during which initial problems have been solved) readout errors happen infrequently. At LHC, both the trigger rate and the number of FE units is enormously higher than at LEP. Hence, even if the probability of error per FE unit, per LVL1 trigger is the same as at LEP, the absolute overall error rate could be substantial. Issues that could affect the error rate in the (on-detector) FE units include the high (40 MHz) clock rate, the hostile radiation environment and the fact that the electronics will not be accessible for repair.

We will provide a general-reset signal that restarts all the FE units for the whole of ATLAS. This will be used to bring all the FE systems into a correct and coherent state at the start of each DAQ "run" or at other (infrequent) intervals. It can also be used following a (serious) problem in the readout/DAQ system to recover from the problem and restart data-taking. The response of each of the FE systems to a general-reset signal should be as quick as possible, and we expect to impose a requirement on this. However, in view of the number of events in the pipelines and buffers at any given time, and the complexity of the actions that have to be performed to reset all the FE and readout systems, a general reset is bound to be a relatively slow operation.

In view of the above, we propose a scheme in which one can detect and recover from errors locally, without introducing any global deadtime. Note that such errors might only affect a tiny fraction of the detector channels of a given subdetector.

### Principle of the error-detection and error-recovery scheme

In the following, we consider the case of synchronisation errors that occur between the on-detector and off-detector electronics of a given subdetector. It is proposed [1] that the BCID counters in front-end systems should be reset once per turn of the machine (88 \(\mathrm{\upmu s}\)). In this case, the correct match between the BCID counters in the on detector and off-detector electronics will be quickly re-established following an error. This provides some additional security in the error-detection system compared to one in which the BCID counter is reset only rarely.

We now consider the possibility of recovery following a synchronisation error.

Consider as an example the loss of a LVL1 trigger signal for a group of FE channels. The off-detector electronics will attempt to put together the different event fragments carrying the same LVL1 trigger number -- note that some of these fragments will come from the wrong event (the LVL1 trigger following the reference one). The off-detector electronics will detect an error because some of the BCID numbers will not match the reference one. At this point, the data can either be discarded or flagged as having a synchronisation error.

Having detected an error of this kind (or perhaps several such errors in a row), the off-detector electronics could switch into an "error-recovery" mode in which it would attempt to match event fragments using the BCID number. There are several possibilities for implementing such a system -- a simple example will be outlined below. Having got back into synchronisation, the off-detector electronics could switch back into "normal" mode. Thus, one would recover from such synchronisation errors "on-the-fly" without sending any reset of any kind and without introducing any global deadtime. One might lose the data from the group of FE channels concerned, but this would probably correspond to a very small fraction of the detector and would in any case be flagged in the event record.

An advantage of having a powerful local error recovery mechanism is that one might be able to reset electronics locally, if necessary inhibiting LVL1 triggers locally during the operation. Following a reset, the on-detector BCID counter would be zero -- i.e. not correspond to the off-detector counters. However, the BCID counter gets reset once per turn, so that it is brought into agreement with the off-detector electronics at most 88 \(\upmu\)s after the local reset occurs. At least in principle, the off-detector system can then get back on the air again using the recovery procedure outlined above, without causing any disturbance to the global trigger/DAQ system or the rest of the detector electronics.

Some relatively complicated electronics might be required to implement such an error recovery procedure. However, it should be understood that almost all of this complexity lies in the off-detector electronics. The requirements on the on-detector electronics are as follows:

1. The data must be accompanied by a BCID number that is reset to zero every turn for a particular bunch in the machine.
2. The data must be presented in sequential order and/or be accompanied with a LVL1 trigger number (used to match event fragments in the sub-event building).

There is not a hard requirement on the number of bits for the BCID number, but the error-recovery mechanism will work better if the number of bits is not too small. At the input to the readout cards, it is proposed [1] to use a 12-bit number which gives a unique label to each bunch in the machine. However, at earlier stages in the readout chain it may be appropriate to use a smaller number of bits -- the higher-order bits can be added at an intermediate point in the chain, e.g. in the detector-specific, off-detector electronics.

**Comments on implementation**

Consider, as an example, the case of detector-specific off-detector electronics that receives data from a number of FE units. A BCID number is sent with the data from each FE unit for each event. In the simplest case, no LVL1 trigger number is sent, but the events are sent in sequence -- the first event to be sent after a general reset is LVL1 trigger number 1. The off-detector electronics also receives the BCID number directly from the TTC system. In normal operation, the BCID number of each event fragment agrees with the reference one, and the event is accepted and labelled with the LVL1 trigger number as given by the TTC system.

In case a synchronisation error is detected (i.e. the BCID number from one or more of the FE units does not match the reference one), the event, still labelled with the LVL1 trigger number given by the TTC system, is flagged as having an error. The off-detector electronics then switches into error-recovery mode.

In error recovery mode, the off-detector electronics accepts a BCID number from the TTC system1. Event fragments from the FE units are discarded until the BCID number matches the reference one, at which point it is assumed that error-recovery has been successful. To safeguard against corrupted data, one might only reset the error flag after several further events have been assembled without encountering a further error.

Footnote 1: It might be best to discard the first few LVL1 triggers to make sure that the desired data are still upstream of the off-detector electronics.

Clearly, given the limited number of bits for the BCID counters, it could happen that one will "accidentally" get a correct match of BCID numbers (i.e. match fragments from different physical bunch crossings that happen to have the same BCID number). However, if this occurs, the following LVL1 trigger is very likely to result in an error which would restart the error-recovery procedure.

For some detectors, the LVL1 trigger number from the FE units may be used to match event fragments in the off-detector electronics. The error-recovery scheme can be adapted to such readout systems, for example by introducing registers that contain an offset between the LVL1 trigger number in the on-detector FE unit and the reference one from the TTC system.

**Closing remarks**

Whether or not an error recovery system such as the one described above will be possible in practice requires further study. However, we can keep open this possibility if we design on-detector electronics with a BCID number that is reset often (once per turn seems natural) and which has a reasonably large number of bits (12 bits allows one to label each bunch in the machine uniquely, but one can manage with considerably fewer bits for the early stages of the readout chain).

**References**

[1] Draft document: Trigger and DAQ Interfaces with Front End Systems -- Requirements Document.