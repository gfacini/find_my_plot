# The ATLAS MUON Spectrometer Simulation Using G4

A.Rimoldi\({}^{1}\)

 J.F.Laporte\({}^{2}\)

 A. Dell'Acqua\({}^{3}\)

 M.Virchaux\({}^{4}\)

 L.Chevalier

###### Abstract

The aim of this note is to present the first use of Geant4 tool in the muon spectrometer simulation. Emphasis is put on comparisons of Geant4 against Geant3 about aspects related to the geometrical acceptance calculations for the muon precision chamber system, and on the first reconstruction through Muonbox and visualization through Persint of muons/geantinos generated in Geant4.

Even if preliminary, these exercises made us confident for the use of this new tool in the simulation of the global ATLAS spectrometer, as well as for the testbeam setups of the various ATLAS subdetectors. This last point was stated in note [4-1] on the Muon simulation in the OO era.

## 0.1 Introduction

The aim of this note is to present the first use of Geant4 tool in the muon spectrometer simulation. Emphasis is put on comparisons of Geant4 against Geant3 about aspects related to the geometrical acceptance calculations for the muon precision chamber system, and on the first reconstruction through Muonbox and visualization through Persint of muons/geantinos generated in Geant4.

Even if preliminary, these exercises made us confident for the use of this new tool in the simulation of the global ATLAS spectrometer, as well as for the testbeam setups of the various ATLAS subdetectors. This last point was stated in note [4-1] on the Muon simulation in the OO era.

### 0.2 Environment

The various Technical Proposals of the ATLAS experiment were based on the use of Geant 3.21 with the hadronic physics obtained using external packages modelled on the LEP energy scale.

The simulation program of ATLAS, named DICE (Detector Integration for a Collider Experiment), was extensively used by the whole ATLAS community, but the new requirements for the physics at the LHC energy scale lead to the choice of a new tool, Geant4, modelled to cope to these needs.

Geant4, born in 1998, provides a complete set of tools for all the domains of detector simulation: geometry, tracking, detector response, run, event and track management, visualization and user interface. It exploits advanced software engineering techniques and Object Oriented technologies and hence provides the possibility of validating the physics results at the LHC scale.

On this basis we started the new simulation in the OO era with preliminary exercises aimed at testing the new tool in a real environment.

## 3.0 The present exercises

### 3.1 Exercise 1: The Geometrical Acceptance as an exercise of comparison between Geant4 vs. Geant3

The present running version of the simulation program using GEANT4 in a complete C++ environment reads the geometry through an ASCII database. This database is simplified with respect to the standard ASCII database used in the TDR (named AMDB [4-2] which stands for Atlas Muon DataBase) and it is called AMDB' and it contains all the features requested for a detailed simulation of the geometrical acceptance calculations.

The language used for coding is standard C++. The precision chamber system is easily made sensitive throughout the exercise and it is fully described as in AMDB standard database vs.2.8. A two/three dimensional view of the simulated detector is shown in Figure 3.1 Asymmetries in the global MDT system are included as well as the complex design of chambers in the feet area (part b of the same figure).The forward MDT part of the apparatus is also described and shown in Figure 3-2.

The use of parametrization is explicitly avoided to speed up the procedure of calculating the geometrical acceptance figure; in particular sensitive planes replace the drift tube layers with the same envelope dimensions and the correct geometrical positions.

After definition of the appropriate sensitive detectors, hits are stored and information from their position is used. The definition for space points is done as in the previous studies (Ref.[4-3], [4-4], [4-5]) and the standard categories of events are analyzed. Then, a comparison with the previous studies in Geant3 is made. Encouraging results show a good agreement between the acceptance distributions obtained with the two tools in the same \(\eta\) domain.

Figure 3-3 shows the geometrical acceptance calculations for the three superpoints category as a function of \(\eta\) for the precision chamber sample in Geant3 compared with the same results obtained with Geant4. Good agreement between the two samples is observed. The simulation in Geant4 stops before the region of the CSC detector, which is not yet included in the new simulations.

The same comparison Geant3 vs. Geant4 is made for the one superpoint category. Figure 3-4 shows the two obtained results. As in the previous histogram a good agreement between the two distributions is seen in the \(\eta\) regions covered by the two exercises.

Figure 3-2: Three dimensional view of the forward part of the MDT spectrometer

This comparison is restricted to the geometrical acceptance evaluation for the precision chamber system. In the near future also the trigger chamber system will be included in this comparative evaluation.

Figure 3.4: Comparison Geant3 vs. Geant4 of the geometrical acceptance calculations for the one superpoint category. Full line refers to the sample in Geant3, dotted line to the one in Geant4 simulation. No CSCs are yet included in the new simulation.

Figure 3.3: Geometrical acceptance calculation for the three superpoint category. Full line in the interval 0<\(\eta\)<2.7 shows the geometrical acceptance for the sample in Geant3, dotted line refers to the same three superpoints category obtained with Geant4

### 3.2 Exercise 2: Simulation, reconstruction and visualization of a muon traversing the muon system

The goal of this exercise was to develop a Geant4 simulation of the ATLAS Muon Spectrometer as complete as possible from the geometry point of view1 and to produce simulated data usable as inputs for the actual reconstruction code.

Footnote 1: The simulation has been restricted to the MDT and RPC chambers but the TGC chambers can be added easily.

In the current software, the description of the Muon Spectrometer geometry is centrally provided by a Detector Description, AMDB, to any Muon applications being simulation code or reconstruction code. Thus the interfacing of the simulation to the reconstruction relies only on the scheme of the identification of the volumes. In other words, the simulation code has just to attach to each hit or digit produced in some active element, the identifier of this element to completely specify its output. Then any application, e.g. reconstruction, which needs to use this output, can obtain the Detector Description about the element identifier to get all geometrical data concerning this element. The consistency of the Identifier scheme is thus the main issue.

AMDB is presently the only Detector Description completely describing the Muon Spectrometer. It has been largely used for all ATLAS TDRs. In particular its Identifier scheme has been thoroughly tested and proven to be consistent. For this exercise, we decided to use AMDB to build the Geant4 geometry of the Muon Spectrometer and to make full use of its Identifier scheme to reach the point where the passage of a particle through the detector, the hits and the digits can be simulated and the track can be reconstructed.

#### 3.2.1 Description of the G4Muon application

The code of the G4Muon application is organized in three sets of classes: the first set allows to access AMDB in C++, the second set allows to handle volumes features, and the last set deals with volumes building.

#### 3.2.1.1 AMDB in C++

The corresponding set of classes is described by the UML diagram of Figure 3-5. The constructor of the AmdbManager class instantiates an object of the AmdbFortran class. These two classes are singleton classes. The constructor of the AmdbFortran class executes FORTRAN code reading the external AMDB Ascii file. This code fills commons which are mapped by C structures. The access to these structures is provided by the methods of the AmdbFortran class. These methods are used in AmdbManager to set the objects of the other classes shown in the figure. It should be emphasized that these latter classes do not know about the methods of AmdbFortran. These classes handle informations on station position (Station class), on size and component content of a station (StationDefinition class), on relative positioning, shapeand sizes of station components (StationComponent class) and on inner structure of these components (InnerStructure class).

#### 3.2.1.2 G4Muon Helper Classes

The corresponding set of classes is described by the UML diagram of Figure 3-6. These classes have been designed to handle volumes features, separating shape, sizes and content attributes (G4MuonVolume class, G4MuonSolid class, G4MuonComposition class) and position attributes (G4MuonPositionnable class, G4MuonPositionedVolume class, G4MuonParametrizedVolume class, G4MuonTransformation class). These classes allow to handle volumes trees. Two classes, G4MuonVolumeList and G4MuonPositionnableList are handling sets of G4MuonVolume and G4MuonPositionnable objects. The ConstructVolume and PositionVolume methods are constructing and positioning volumes in the Geant4 sense, i.e producing LogicalVolumes and PhysicalVolumes. The G4MuonVolume and G4MuonPositionnable classes, as well as the related classes, are thus Geant4 Helper Classes interfacing some Geant4 tools. In particular, the G4MuonParametrizedVolume class makes easier the use of the Geant4 volume parametrization and implements some solutions of the volume identification issue when Geant4 replicated volumes are used. It should be stressed that none of the G4Muon Helper Classes knows about AMDB. They are designed to be independent on any Detector Description.

#### 3.2.1.3 G4Muon classes for volumes building and positioning

The G4Muon Helper Classes and the AMDB classes are used by the set of classes shown on Figure 3-7 which effectively build and position Muon Spectrometer chambers. The G4MuonBuilder singleton class is the only class to be known to use the G4Muon application. The user will demand the creation and the positioning of all Muon Spectrometer chambers by calling the method PlaceMuonVolumes.

Figure 3-5: Classes allowing to access AMDB in C++

The constructor of the G4MuonBuilder class instantiates an object of the AmdbManager singleton class making all geometrical informations available. In the PlaceMuonVolumes method, all AmdbStation objects are successively addressed. Each of these objects carries all geometrical informations needed to build the volume of a Muon Spectrometer chamber that could be positioned. This is performed by an object of the class G4MuonFactoryStation which has been instantiated by G4MuonBuilder. The ProvidePositionnable method of this object has as argument a AmdbStation object and returns a pointer to a G4muonPositionnable object. In a similar way, the G4MuonFactoryStation object demands to the G4MuonFactoryMDT, G4MuonFactoryRPC, and G4MuonFactorySPA objects to provide pointers to G4muonPositionnable objects corresponding respectively to the MDT, RPC and Spacer components of the station volume. All these G4MuonFactory classes store the created volumes in G4MuonVolumeList and G4MuonPositionnableList objects and consult them in order to avoid to build objects having being already created.

Once a pointer has been returned to G4MuonBuilder by the ProvidePositionnable method of the G4MuonFactoryStation class, a call to the PositionVolume of the pointed object is done. This leads to a cascade of calls to the ConstructVolume or PositionVolume methods of the objects constituting the tree of G4MuonVolume and G4MuonPositionnable objects which has been built by the G4MuonFactory objects above. This cascade of calls effectively builds the tree of Geant4 volumes. The Figure 3-8 shows examples of the Geant4 geometry which has been defined.

#### 3.2.1.4 Digitization

Thanks to the G4Muon Helper Classes described above, it is very easy to set the sensitivity of any volumes. Geant4 gives then access to hits in the sensitive volumes and a preliminary rough digitization can be implemented. This has been done for MDT tubes and RPC strips. At the level of sophistication of digitization aimed in this exercise, to compute a drift time from the information provided by Geant4 is trivial. The key point is the recovering of the Detector Description Identifier of a volume from the information provided by Geant4. Indeed useful Geant4 tools

Figure 3-6: G4Muon Helper classes.

such as the Geant4 volume parametrization can made this recovering very painful or even effectively impossible if one relies on copy number of replicated volumes. One of the aims of this exercise was to explore this issue and to set mechanisms to make this recovering possible and easy, whatever Geant4 replication mechanisms are used or not. As mentioned in the introduction of this section, it is then possible to reduce the digits to the pair of the simulated signal and the AMDB volume identifier.

Figure 3.7: G4Muon classes for volumes building and positioning.

Figure 3.8: Examples of Geant4 Geometry built by G4muon

#### 3.2.1.5 Reconstruction

In the current software, the list of Muon digits of Geant3/DICE events can be easily "dumped" into an Ascii file. Indeed, it is sufficient to write down the AMDB Identifier and, in the case of MDT digits, the drift time. Then, the Muon Reconstruction, i.e Muonbox, can be run in a fully standalone mode, i.e outside the ATRECON framework. Since the digits produced by the G4Muon application have the same format than those of the Geant3/DICE simulation, it is possible to produce such ascii file of digits and thus to reconstruct in the Muon Spectrometer a track simulated by the Geant4 simulation. We have done this exercise and the reconstructed track, visualized by the Persint package, is shown on the Figure 3-9.

Figure 3-9: Persint visualization of a track simulated with G4Muon and reconstructed by Muonbox

### 3.3 Conclusions

In our first exercise we realized a simulation of the global MDT system both in GEANT3 and in GEANT4 and we found an agreement between the two simulations. More detailed studies, also for what concerns the trigger system and specific physics channels, are under evaluation.

For what concerns the second exercise we found that, except for the TGC chambers, the complete Muon Spectrometer layout used for the Physics TDR can be simulated in the G4Muon application. Furthermore simulated events can be reconstructed by the actual Muon Reconstruction. In the present implementation of G4Muon, the digitization is very simplified for both MDT and RPC. This, however, can be easily improved and the main issue of the recovering of the volume Identifiers been solved, improved digitization does not require fundamental structural changes.

## 4.0 References

* [