**AGDD-Geant4 description**

**of the EM Barrel Presampler**

_D. Benchekroun\({}^{(1)}\)_, _J. Collot\({}^{(2)}\)_

(1) Universite Hass an II, Faculte des sciences An Chock, Casablanca, Maroc

(2) Institut des Sciences Nucleaires, Grenoble, France

**Abstract**

The AGDD is used to describe the barrel presampler geometry in the XML language. A C++ application has been developped to parse the AGDD file and create the corresponding Geant4 geometry.

## 1 Introduction

During the last years, great importance has been given, within the ATLAS collaboration, to the detailled description of the detector geometry. In order to permit an easy modification of the geometry, it has been decided to store the ATLAS geometry in ASCII files written in an explicitly readable language. In the ATLAS Generic Detector Description (AGDD) group [1], the eXtended Mark-up Language (XML) has been chosen since it allows to express structural data in text files. The main motivation of the AGDD package is to provide a detector description independant of any specific application using it. It is also a convention on how to write XML files containing a set of simple and understandable instructions to build and assemble elementary volumes. The connection to specific applications is done by the Generic Model [1], a C++ code, which parses the AGDD files and allow us to create the C++ objects corresponding to the XML elements.

The geometry of each ATLAS sub-detector is complicated, but can be derived from a limited number of fundamental parameters. AGDD and the Generic Model offer the possibility to fully describe a detector starting from an XML file containing the fundamental parameters of the geometry, and then generate an expanded AGDD file which can be used by the simulation, reconstruction and visualisation packages.

In this note, we explore the possibility of describing the electromagnetic barrel presampler [2] using the AGDD and the Generic Model. Since the AGDD-XML geometry description cannot be directly used for the detector simulations, a special effort must be done to convert the XML file to a Geant4 geometry. The last section of this note is dedicated to the translation of the AGDD-XML geometry description to a Geant4-C++ geometry, by a special C++ code based on the Generic Model.

## 2 AGDD description of the barrel presampler

In spite of the simplicity of the AGDD introductions, the description of a detector geometry using AGDD becomes unmaintainable in the case of a complicated geometry with many duplications of parameters. This problem can be overcome if we try to use a description procedure starting from a limited set of fundamental parameters and creating automatically the explicit description of the geometry.

### Geometry parameters

The barrel presampler consists of an azimutal duplication of indentical sectors. Each sector is made of 8 modules with different characteristics (there are eight different types of modules). To make the description of this geometry, which looks at first sight complicated, easy to understand and to maintain, we can simply reduce it to a set of fundamental parameters. These parameters are stored in an AGDD-XML file which is fully consistent and sufficient to generate the expanded view.

The geometry parameters are divided in different XML elements : electrode dimensions, characteristics of the different modules types and the sector parameters. As an example of these elements, we give below the elements containing the parameters of the electrodes and the different module types (the number of cathodes and anodes, their inclinaison angles...).

The different materials used in the detector description are also introduced in the parameter file. The description of these materials (simple elements or composites) is given in a separate XML file. The user has the possibility to add his own materials to this file, the material definition has the same structure in AGDD and Geant4.

<parameters name="psbarrellec">  <real name="SmallLength" value="275.6" unit="mm" />  <real name="BigLength" value="277.5" unit="mm" />  <real name="Thicknessa" value="0.330" unit="mm" />  <real name="Thicknessc" value="0.270" unit="mm" />  <real name="Height1" value="14.16" unit="mm" />  <real name="Height3" value="12.91" unit="mm" />  </parameters>

<parameters name="psbarrelmodules">  <real name="width" value="279.9" unit="mm" />  <real name="LAr_thickness" value="13.0" unit="mm" />  <real name="LAr_th2" value="12.715919" unit="mm" />  <real_array name="NbofAnodes" unit="none" values="  56, 64, 72, 80, 88, 104, 128, 86" />  <real_array name="NbofCathodes" unit="none" values="  56, 64, 72, 80, 88, 104, 128, 87" />  <real_array name="Pitch" unit="mm" values="  4.987, 4.621, 4.46, 4.46, 4.6, 4.6, 4.6, 4.6, 4.6, 4.6, 4.4, 4.4" />  <real_array name="Length" unit="mm" values="  285., 299.23, 322.3, 356.8,  404.8, 478.4, 563.2, 380.6" />  <real_array name="Angle" unit="degree" values="  25., 12., 0.0, 0.0, 0.0, 0.0, 0.0" />  <real_array name="Pos0" unit="mm" values="  4.2, 3.1, 2.1, 0.9, 0.9, 0.95, 1.05, 0.95" />  </parameters>

### The full geometry XML file

A C++ code based on the Generic Model has been developped to parse the parameter file and automatically generate the corresponding full geometry file. The code has been written in such a way that all modifications of the barrel presampler geometry can be done in the parameter file with no needs to re-compile the code.

Starting from the fundamental parameters, the code generates the derived parameters. The solid volumes, which are the basic geometry units, are created and used in compositions to create more complicated structures. As an example of composition, shown below is a composition used to create a presampler module :* [3] <composition name-"module1" envelope="env_module1"> <posXY% volume-"Prep11" X Y Y Z="0 0 -8.757" /> <posXY% volume-"Prep21" X Y Z="0 0 7.007" /> <mposY volume-"cath01" ncopy="56" dY="4.987" Y0="-138.151" % X="-1.757" 0" rot="25 0 0" /> <mposY volume-"ano1" ncopy="56" dY="4.987" Y0="-135.665" % X="-1.757" 0" rot="25 0 0" />

One can remark that in this case the composition is built within an envelope (specified with "envelope="env-xxx"). However, in the present AGDD version, it is not necessary to define the volume corresponding to the composition. If the composition envelope is specified, the volumes are positioned with respect to the envelope coordinate sytem. If the envelope is not specified, the coordinate system is defined implicitly. As we will see in the next section, the use of envelopes is the main difference between the AGDD and Geant4 geometry descriptions. Shown in Figure 1 and 2 are graphics generated by the program PERSINT [3] of a presampler module, a sector and a half-barrel.

The same procedure has been used by C. Lester in the AGDD description of the SCT [4]. A pre-xml file containing the fundamental parameters is parsed by a C++ code to generate the xml file with the fundamental and derived parameters which is itself parsed by a second code giving the final XML geometry file.

An AGDD-XML description has been also performed for the Hadronic End-Cap Calorimeter [5], it this case the explicit geometry description has been written directly.

## 3 From AGDD to a Geant4 geometry description

### AGDD and Geant4 comparison

The usefulness of the full geometry XML file depends on the possibility to convert it into a geometrical C++ code, which can be directly used for the Geant4 detector simulations. To build the Geant4 geometry corresponding to the AGDD description, one has to develop a tool which allows us to map the AGDD instructions out the Geant4 instruction set. When comparing AGDD to Geant4, one can remark that :* The materials and volumes (Box, Tube...) descriptions have the same structures in the two approaches. Hence, the translation of this part will be trivial.
* Volumes positioning : in Geant4, the volumes are always positioned in a mother volume. In the AGDD method, one starts by describing the smallest volumes which will be subsequently used in compositions to create more complicated structures. The AGDD composition has in principle no Geant4 equivalent, but it can be considered as being close to the concept of Geant4 mother volume. If one always specifies an envelope volume for each composition, then the composition is built by positioning elementary volumes inside the envelope considered as a mother volume in Geant4.

Figure 1: View of presampler module (top) and sector (bottom)

Figure 2: View of a half-barrel with 32 identical azimut al sectors

### Agdd-XML to Geant4-C++ translation

In the Generic Model, a C++ class is associated to each AGDD object. Thus, the parameters of AGDD files are available as public data members of C++ objets. The application developped for this work is based in a set of methods, each method has been coded to parse an XML element and convert it in a Geant4 geometry. The different classes used in this code are derived from the AGDD-Visitor class used in the Generic model. The results of the parsing is written in a file which will be the C++ geometry file of the Geant4 simulations. A similar application has been developped in [6] and tested on the Muon System.

In the first step, the file containing the materials (simple elements and composites) is parsed, the Geant4 corresponding materials are created. In the next step, the AGDD geometry file is parsed.

The definition of each solid (Box, Tube, Trapeziod...) is translated from AGDD to the Geant4 format. Since each defined solid will be later positioned, the corresponding Logical Volume (which is specific to Geant4) is created with the proper material. Shown below is an XML element defining a trapezoid and the corresponding Geant4 definition resulting from the parsing :

```
<trdname="catho1"material="cathoedMat" Xmp_Ymp_Z="275.6277.50.270.2714.16"/>
```

```
<tddoublexmin_trd1=137.8*mm; <tddoublexmax_trd1=138.75*mm; <tddoubleymin_trd1=0.135*mm; <tddoubleymax_trd1=0.135*mm; <tddoubleztrd1=7.08*mm; <tdrd4 cathol  = newG4Trd("catho1",xmin_trd1,xmax_trd1,ymin_trd1,ymax_trd1,z_trd1); <tdLogicalVolume*LV_catho1 = newG4LogicalVolume(catho1,CathodeMat,"catho1",0,0,0);
```

For the compositions, we decided to impose that each composition must be built within an envelope, which is a solid already defined. The envelope of the composition will be considered as the common mother volume of the volumes used in the composition. For each composition, the code starts by updating the mother volume : the old mother volume given by the envelope of the previous composition is replaced by the new mother volume given by the envelope ofthe current composition. This envelope is considered as the common mother volume for all the positioning operations until the composition is completely built. The code also verifies that the envelope of each composition is defined, if not, the parsing is stopped.

For the positioning, different methods have been developped to translate the positioning procedures used in AGDD (PosXYZ, MPosX...) to Geant4 equivalents, principally based on the G4PVPlacement method (the simplest positioning method in Geant4). The placed volume can be a defined composition, in this case the corresponding envelope is placed with its content.

Actually, the code parses most of the AGDD syntax. The presampler geometry generated by this code has been included in the LAr Electromagnetic Barrel Module0 geometry which is used for the Geant4 simulations. Figure 3 shows the volumes tree from the AGDD description (drawn by PERSINT) and from the corresponding Geant4 description (from Geant4).

It it important to point out that, with the adopted method, all the modifications of the geometry are reported in the AGDD file containing the geometry fundamental parameters, the next steps allow to automatically generate the AGDD-XML file containing the fully detailed geometry description which is subsequently translated in a Geant4 geometry code.

Figure 3: Tree of volumes in a portion of the barrel presampler AGDD geometry given by persint (left) and the corresponding Geant4 tree (right).

Conclusions

The use of AGDD for the barrel presampler geometry description has been investigated in this note. An AGDD file where the parameters of the geometry are stored is the most fundamental file of this description. Simple C++ applications using the Generic model enable us to parse this file, create the detailled geometry file [7] and eventually translate it into a Geant4 geometry [8]. All the steps are done in such a manner that the modifications of the geometry are only introduced in the AGDD parameter file making this geometry description easy to maintain. The results given by such a method demonstrate the usefulness of AGDD for complex geometry description.

The code developped for the AGDD-Geant4 translation may be completed, to read the full AGDD syntax which is not presently used for the presampler. It will also be interesting to use the same method for the description of other ATLAS components (Accordion Electromagnetic Calorimeter, Cryotats...).

## References

* [1] ATLAS Generic Detector Description [http://atlas.web.cern.ch/Atlas/GROUPS/DATA](http://atlas.web.cern.ch/Atlas/GROUPS/DATA) BASE/detector_description
* [2] M.L. Andrieux et al. Accepted for publication in Nucl. Inst. and Meth. in Phys. Res. A (2001).
* [3] The PERSINT Graphical Package [http://atlasinfo.cern.ch/Atlas/GROUPS/MUON/persint.html](http://atlasinfo.cern.ch/Atlas/GROUPS/MUON/persint.html)
* [4] C. Lester (private communication)
* [5] G. Karapetian, Atlas Internal Note, ATL-LARG-2001-005.
* [6] J.F. Laporte et al. ATLAS Internal Note, ATL-SOFT-2001-002.
* [7] The AGDD files of the presampler geometry can be found at : /afs/cern.ch/user/d/driss/public/XML/
* [8] The C++ application can be found at : /afs/cern.ch/user/d/driss/public/XML/build/GeoBuild.cxx