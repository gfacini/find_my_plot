**ATLAS Internal Note**

**DAQ-NO-092**

**22 May 1998**

**The Sub-farm DAQ for the ATLAS DAQ Prototype -1**

**G Ambrosini\({}^{\rm b}\), H-P.Beck\({}^{\rm a}\), D.Francis\({}^{\rm b}\), M.Joos\({}^{\rm b}\), G.Lehmann\({}^{\rm a}\), L.Mapelli\({}^{\rm b}\), G.Mornacchi\({}^{\rm b}\), M.Niculescu\({}^{\rm b,c}\), J.Petersen\({}^{\rm b}\), D.Prigent\({}^{\rm b}\), J.Rochez\({}^{\rm b}\), R.Spiwoks\({}^{\rm b}\), L.Tremble\({}^{\rm b}\), T.Wildish\({}^{\rm b}\)**

**a. Laboratory for High Energy Physics, University of Bern, Switzerland.**

**b. CERN, Geneva, Switzerland.**

**c. Institute of Atomic Physics, Bucharest, Romania.**

**NoteNumber : 044**

**Version : 1.0**

**Date : 15 June 1997**

**Reference : [http://atddoc.cern.ch/Atlas/Notes/044/Note044-1.html](http://atddoc.cern.ch/Atlas/Notes/044/Note044-1.html)**

## 1 Introduction

### Purpose of the document

This note presents the general concepts of the sub-farm DAQ for the ATLAS DAQ prototype-1. In particular a high level design of the sub-farm DAQ is defined

### Overview of the document

A definition of the boundaries between the sub-farm DAQ and the other prototype -1 systems is presented first. This is followed by the definition of the sub-farm DAQ function and by a set of requirements that must be fulfilled by a sub-farm DAQ design.

A logical model for the sub-farm DAQ is presented and the architectures onto which this logical model should map are outlined.

## 2 Definitions and Relation with rest of system

### Definitions, acronyms and abbreviations

See reference [3].

### Boundaries

The relationship between the sub-farm DAQ and other (sub-) systems is shown in Figure 1:. Specifically, the sub-farm DAQ shares a boundary with the Back-End DAQ (B/E), the Event Building sub-system (EB), an Event Handling system (EH) and mass storage.

The precise boundary and interface between the sub-farm DAQ and the Back-End is detailed elsewhere [1], likewise the boundary and interface with the Event Building sub-system [2]. The boundary and interface between the sub-farm DAQ and mass storage is to be defined.

The sub-farm DAQ, as shown in Figure 2: consists of a DAQ-unit and an LDAQ. The DAQ-unit receives and buffers event data coming from the event building sub-system and subsequently forwards the event data to its associated event handling unit. The DAQ-unit also receives and records, to mass storage, the data (not necessarily the raw data) associated to the events accepted by the event handling unit.

The sub-farm DAQ needs only to consider a high-level view of the event handling system. This latter is viewed by the sub-farm DAQ as an event transformation system (for example events are filtered out). It is assumed that the event handling system consists of: processing elements (both hardware and software aspects), a supervisor and a communications link between these elements. To communicate with the elements of the event handling unit the sub-farm DAQ may use the event handling units communications link.

## 3 Purpose and function

The sub-farm DAQ is responsible to channel all event data coming from the event builder through the EH system. Events transformed by the EH system are then passed by the sub-farm DAQ to the mass storage system. These functions, related to the flow of all the event data, are supported by the sub-system called DAQ-Unit.

It is also the responsibility of the sub-farm DAQ to provide other data acquisition functions in addition to the main flow of data:

* A function to perform the local control of the sub-farm DAQ.
* A function to allow user programs to request a statistical sample of the events flowing through the sub-farm DAQ. The sampling of events before and after the EH system must be provided.
* The interface to the back-end DAQ functions, in particular the configuration data bases.

The above functions are supported by the sub-system called the local DAQ (LDAQ), a sub-system common to also the read-out crate and the event builder[1]. The sub-farm LDAQ should also allow for additional functions, for example belonging to the EH system, to be integrated.

## 4 Requirements

The sub-farm DAQ should fulfil the following requirements:

1. It must fulfil the sub-farm DAQ functionality as defined in section 3.

2. It must be capable of integrating with different sub-farm architectures such as symmetric multiprocessor (SMP) systems or clusters of networked PC's.

3. It must integrate with different mass storage recording schemes such as a local mass storage system or a centralised data recording system.

4. It must integrate with different EH systems. The event filter is the obvious target but other ones, such as calibration programs, should be taken into consideration as well.

5. It must support the bypass of the EH system. That is a direct transfer of event data, flowing in from the event builder, to the mass storage system.

Figure 1: Sub-farm DAQ context diagram6. The sub-farm DAQ must be configurable from an external data base. The data base will include configuration information both in terms of the sub-farm architecture and in terms of the related EH system.

## 5 Sub-farm DAQ logical model

### General description

The view of event data falling through the data acquisition system is the one used in the other dataflow sub-systems: the read-out crate and the event builder. We apply the same to the sub-farm DAQ: events received from the event builder are "sent to" and "received from" the EH system. An interface is provided for events to "be sent to" and "be received from" the EH system.

Figure 2: depicts this view of the data flow within the sub-farm.

Figure 1: The relationship between the Sub-farm and other systems.

Based on the above view, we identify the following elements in the sub-farm DAQ (see Figure 2:): a local DAQ (LDAQ) sub-system, the sub-farm input (SFI) element, the EH system, the sub-farm output (SFO) element.

The interfacing between the SFI, respectively the SFO, and the event handling system is provided by two Application Program Interfaces (APIs). One interfaces the SFI with the event handling system distributor, the second interfaces the event handling system collector t the SFO.

### The sub-farm LDAQ

The sub-farm LDAQ is the dataflow sub-system which supports those data acquisition functions which are not related to the flow of all the event data. It is decsribed in its own document [1],and such description applies to the sub-farm DAQ also. Here we make a number of remarks which are typical of the sub-farm environment:

* The monitoring function provided by the LDAQ is complementary to any other monitoring function provided by the EH. In particular the LDAQ monitoring element only allows for statistical sampling of events before or after the EH has operated.
* The EH may need a supervisor task (for example to monitor and control its processing elements). While the supervisor could be completely hidden inside the EH system, we may propose the solution where the EH supervisor is another LDAQ element (just as the local control). The LDAQ therefore provides the framework for the integration of the EH supervisor.

### The SFI element

The sub-farm interface (SFI) element is an instance of an I/O module and consists of a buffer, where full events are built, and a number of I/O tasks.

* The event builder destination task (which is under the responsibility of the event builder sub-system).
* The SFI output task which transfers full events, through the EH distributor API, to the EH system.
* The LDAQ task, interfacing to the LDAQ control element and providing support for the local control and monitoring (to allow the statistical sampling of events before any action of the event handling system takes place) LDAQ elements.

At the moment we make the following assumption on the SFI behavior:

1. Events are transfered to the EH in the raw data format as received from the event builder. No conversion of event format is performed by the SFI. It is the responsibility of the EH system. This latter both has the knowledge of the required event format and may be capable to perform to exploit its internal parallelism to perform format conversions. If, for technical reasons, the EH system cannot make the necessary format conversion then this could be done in the SFI.

2. Full events are buffered in the SFI before being "sent" to the EH. Our preference is to remove events from the SFI buffer as soon as the distributor API reports that the event has been transfered to the EH. It is the EH responsibility to make sure that events are not lost in case of EH failures. If this proves to be technically unfeasible, a different scheme for releasing buffers in the SFI could be envisaged.

### The EH system

The EH system is outside of the scope of sub-farm DAQ. Its role, as far as this latter is concerned, is that of receiving events from the SFI element, transforming the events (e.g. filtering events out and changing their format) and finally sending the transformed events to the SFO element.

The interface between the SFI and EH (the distributor) and this latter and the SFO (the collector) is provided as an API whose implementation depends on the internals of the EH and is therefore also out of the scope of the sub-farm DAQ.

### The SFO element

The sub-farm output (SFO) is an instance of an I/O module. It consists of a buffer and a number of tasks:

* The input task: it receives, via the EH collector API, events produced by the EH and buffers them.
* The output task: it extracts events from the SFO buffer and sends them to the Mass Storage system. Events may be transfered to different Mass storage system streams according to the indication of the Event Handler; for example events may have been categorised by the event filter and recorder according to the filter response.
* The LDAQ task, interfacing to the LDAQ control element and providing support for the local control and monitoring (to allow the statistical sampling of events after the event handling system has operated) LDAQ elements.

We make the following assumption on the SFO behavior:

1. The SFO receives event data from the EH and sends them to the recording system without any further transformation in its format (we may nevertheless foresee the the SFO may add status information to the event).
2. Different data recording mechanisms will be supported thorugh a recording system API. Recording system examples are: a local tape unit and central data recording as provided by central services.

### The distributor and collector APIs

As already mentioned the fan-out of event data from the SFI and the fan-in of transformed data to the SFO are performed by a data distributor and a data collector respectively. These two elements, which strongly depend on the internals of the EH system, are the responsibility of this latter.

Access to the distributor or the collector, element is provided to the sub-farm DAQ by a distributor or collector, API whose definition has to be agreed between the sub-farm DAQ and EH designers.

A required characteristic of these APIs is that they can be collapsed together to provide a bypass of the EH system (i.e. directly outputting full events onto the mass storage system). This means that the two APIs should reflect the push-like view of the flow of events in the sub-farm DAQ.

### Example configurations

The proposed sub-farm DAQ outline may support different sub-farm configurations to fit experiment, detector or development team requirements.The possibility of inserting different EH systems inside a sub-farm DAQ, provided they implement the distributor and collector APIs, is the basis for the flexibility of the sub-farm DAQ model proposed in this paper. A few example configurations illustrate the above concepts.

* A full sub-farm including an event filter. This is the configuration of the final ATLAS experiment which includes an event filter implemented on a multiprocessor/multicomputer system.
* An EH consisting of a calibration task. This is a possible configuration which may be needed in a test beam where the full sub-farm may be collapsed into a single processor.
* A sub-farm including an EH bypass. This is a configuration typical for a test lab where the dataflow for prototype -1 is being tested.

## 6 Architectures

Possible architectures and implementations of the sub-farm are shown in Figure 3: and labelled a), b), c) and d). Sub-farm (a) is a pure VME based implementation. All elements (LDAQ, DAQ-unit and event handling unit) are based on single board computers. In addition one or more suitable intra-crate links (e.g. VME, a P2 technology) is used to implement communications between the elements. In (a) the SFI and SFO are shown as separate elements, however, an architecture in which these two elements are collapsed into a single element having the combined functionality is not excluded.

Sub-farm (b) is a mixture of VME and workstation's and or PC's. The LDAQ and DAQ-unit are implemented in VME. The DAQ-unit consists of one or more SFI elements, each of which is linked, via a suitable communications link, to a event handling unit. The latter is a set of processing elements implemented on workstations and or PC's and a suitable communications link. In (b) the SFO functionality has been collapsed into the SFI. However, implementations are not excluded where the SFO functionality exists on all processing elements or is concentrated on a single workstation (or PC).

A implementation of the sub-farm based purely on workstations and or PC's is shown in (c). The SFI and LDAQ are shown to be implemented on a single PC and the SFO another PC. However, again, different scenarios can be envisaged (e.g. a PC per element). The event handling unit is the same as that of sub-farm (b).

The final architecture that can be envisaged to-day is shown in (d). All elements (LDAQ, DAQ-unit and event handling unit) are implemented on the nodes of a symmetric multi-processing machine. Communications between the nodes is based on the internal communications link and the native communications package.

Figure 3: Possible Sub-architectures.

**7 References**

[1] The LDAQ in the ATLAS DAQ prototype -1. Technical note Nr.40.

[2] A logical model for event building in DAQ -1. Technical note in preparation.

[3] Definitions, acronyms and abbreviations in ATLAS DAQ prototype -1. Technical note in preparation.