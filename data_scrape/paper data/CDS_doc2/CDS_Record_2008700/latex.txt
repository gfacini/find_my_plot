**An imaging algorithm for vertex reconstruction for ATLAS Run-2**

The ATLAS Collaboration

The reconstruction of vertices corresponding to proton-proton collisions in ATLAS is an essential element of event reconstruction used in many performance studies and physics analyses. During Run-1 of the LHC, ATLAS has employed an iterative approach to vertex finding. In order to improve the flexibility of the algorithm and ensure continued performance for very high numbers of simultaneous collisions in future LHC data taking, a new approach to seeding vertex finding is being developed inspired by image reconstruction techniques. This note provides a brief outline of how reconstructed tracks are used to create an image of likely vertex collisions in an event and presents some preliminary results of the performance of the algorithm in simulation approximating early Run-2 conditions.

(c) 2015 CERN for the benefit of the ATLAS Collaboration.

Reproduction of this article or parts of it is allowed as specified in the CC-BY-3.0 license.

## 1 Introduction

The reconstruction of primary vertices from individual proton-proton collisions is essential for physics analysis with the ATLAS detector. Accurately reconstructing the number and positions of interactions is used for many techniques designed to lessen the effects of "pile-up" from many additional collisions in the detector on reconstructed objects from a hard-scatter collision of interest. During Run-1 of the LHC, ATLAS employed an iterative approach to vertex finding and fitting. This algorithm performed well for up to 40 inelastic collisions in one LHC bunch crossing. To quantify the amount of pile-up, the variable "\(\mu\)" is used, equalling the average number of interactions per bunch crossing. During Run-2 and beyond, the amount of pile-up will become even higher. A new approach inspired by imaging algorithms, as suggested elsewhere [1], is in development for future running and is expected to perform better than the iterative algorithm at very high \(\mu\). This new algorithm attempts to simultaneously identify all likely vertex locations in one LHC bunch crossing by using all tracks as input to a three-dimensional imaging algorithm (similar to those used in many medical imaging applications). These locations are then used as seeds to the vertex finding and fitting process. This note presents a brief description of this algorithm along with some examples of its performance.

The results shown are obtained from simulations of the ATLAS detector [2], which is a large multi-purpose particle detector at the LHC. Monte Carlo generated collision events are processed through a GEANT4 [3] simulation of the ATLAS detector [4]. Minimum bias events for pile-up interactions are generated using the PYTHIA8 [5] Monte Carlo generator. To examine the vertex algorithm performance for collisions with a large number of tracks, top-antitop pair production events generated with POWHEG [6; 7; 8; 9] interfaced to PYTHIA6 [10] have been used. All interactions are simulated at a centre of mass energy of 13 TeV under conditions expected in early LHC Run-2 during 2015. The input to the vertex reconstruction algorithms are reconstructed tracks in the Inner Detector, with an approximate pseudorapidity coverage of \(|\eta|<2.5\).1

Footnote 1: The ATLAS experiment uses a right-handed coordinate system with its origin at the nominal interaction point (IP) in the centre of the detector and the \(z\)-axis along the beam direction. The \(x\)-axis points from the IP to the centre of the LHC ring, and the \(y\)-axis points upward. Cylindrical coordinates \((r,\phi)\) are used in the transverse \((x,y)\) plane, \(\phi\) being the azimuthal angle around the beam direction. The pseudorapidity is defined in terms of the polar angle \(\theta\) as \(\eta=-\ln\tan(\theta/2)\)

In general, the process of vertex finding and fitting in ATLAS is divided into three major steps - seeding, track assignment, and fitting. The procedure and performance of the iterative algorithm are described in Ref. [11]; a rough outline of the procedure is as follows:

1. The impact parameters \(z_{0}\) with respect to the beam spot of all tracks are used to produce a single seed at the location of the estimated mode in \(z\)[12], using an iterative method to find the most likely value.
2. Tracks compatible with the seed are grouped together for fitting.
3. The adaptive vertex fitting algorithm [13] is used to estimate the position and uncertainty of the vertex.
4. Tracks that are not already fit to vertices are then used to repeat the process from the seeding step.

The iterative algorithm is primarily tuned to avoid splitting tracks from a single interaction vertex into multiple reconstructed vertices. However, as the amount of pile-up increases, merging of tracks from two close-by interactions into a single reconstructed vertex becomes more common. Since seeds are produced one at a time, and the tracks from the two interactions may all be close enough together to becompatible with a common vertex, the first seed created can result in a vertex merging the tracks from the two interactions together. These tracks are then removed from consideration, and no second seed will be found. It is then impossible to reconstruct a second vertex for these two interactions. As pile-up increases this results in a negative quadratic dependence of the number of reconstructed vertices as a function of \(\mu\). The primary motivation for the development of the imaging algorithm has been to implement a seeding strategy that will identify all probable vertex locations in a single pass. By producing two seeds for cases in which two close-by collisions took place before proceeding to track assignment and fitting, merging can be avoided by assigning tracks to both seeds, although the rate of split vertices may be higher.

## 2 Imaging algorithm description

In the imaging algorithm all seeds are output in a single step. The procedure is as follows:

1. A three-dimensional binned histogram to be filled by the image is created containing the configurable volume in which vertex finding will be done. In this note, the \(x\) and \(y\) dimensions of the box are 4 mm long and the the \(z\) dimension is 400 mm.
2. Helical track trajectories are linearised and back-projected into the histogram using a voxel ray-tracing algorithm [14]; the histogram content in each traversed bin is incremented by the path length of the linearised track in that bin. The resulting image is shown in Figure 0(a).
3. The back-projected track image is transformed into frequency space using the FFTW3 [15] library.
4. A filter composed of two major parts is multiplied with the frequency space histogram. The image is reconstructed by applying a filter [16], adapted for the angular acceptance of the ATLAS tracking detector. It is the inverse of the Fourier transform of the detector angular acceptance. In addition, a four-term Blackman-Harris window filter [17], which smoothly scales down higher frequencies up to a specified cutoff frequency in each of the \(x\), \(y\), and \(z\) directions, is used to lessen the effect of high frequency variations. These variations can result, for example, in additional image peaks along outgoing track paths.
5. The filtered frequency space image is then back transformed to position space, giving a final image as shown in Figure 0(b).
6. The resulting image is then passed to a separate clustering algorithm where all seeds are identified from peaks in the image.

In this note, two example configurations of the imaging seeding algorithm are used to compare to the iterative algorithm. The only difference between the two is in the choice of the number of bins to be used for the image histogram in the \(z\)-direction. In one, 1024 bins are used to cover a 400 mm range, while the other uses 2048 bins for the same range. Each uses 16 bins in the \(x\) and \(y\) directions, which was found to be an acceptable trade-off in terms of processing speed and performance. These are chosen to provide example points where different minimum \(z\) separations between image peaks are possible. But many more configurations can be made with different numbers of bins, ranges, and window filters. The interplay with the algorithm used to identify seeds is key here.

Development of a final clustering algorithm to produce vertex seeds is still ongoing; the results given in this note come from a simple, fast one-dimensional projection algorithm. Because of the modular nature of the seeding procedure, it is straightforward to substitute a more sophisticated image processingFigure 1: Illustration of the image reconstruction of part of a single simulated \(t\bar{t}\) event using POWHEG and PYTHIA6, including pile-up, centred on the bin with the largest content in the reconstructed 3D histogram image. Slices are made through this peak in the \(zy\) and \(xy\) planes (at \(x=15\) and \(z=0\)), and the axes are labeled both with the actual bin numbers used in the algorithm and the corresponding spatial extents. The results of the track back-projection step are shown in Figure 0(a); the bin content represents the sum of track path lengths in each bin. In Figure 0(b) the full reconstructed image after Fourier transformation into frequency space, filtering, and back transformation is shown; this histogram is used as input to image processing algorithms to identify likely vertex locations that appear as peaks in the image. In addition to the interaction resulting in the highest peak (centred at \(z=0\)), several other interactions are visible in the reconstructed image.

algorithm in the future to improve performance. The projection algorithm was chosen for a first pass because the magnitude of the track position uncertainties is large compared to the beam spot size and it is difficult to separate vertices in the \(x\) and \(y\) directions in the image. The three-dimensional vertex image is therefore projected onto the \(z\)-axis; a view of the same event as in Figure 1 with a larger \(z\)-range is pictured in Figure 2. To identify seeds in this projection, all local maxima above a configurable threshold are found. The lower of two peaks is eliminated if the minimum value between it and the other peak is greater than 90% of its value. The resulting set of vertex seeds is then used to perform the vertex finding and fitting.

The main difference with respect to the vertex finding for the iterative algorithm, is that the imaging algorithm produces all seeds simultaneously instead of one-by-one. This allows each track to be assigned to the closest seed to its trajectory. Each resulting group of tracks is then fit with the same adaptive fitting algorithm. So if, for example, two close-by vertices produce two seeds, both are likely to have some tracks assigned to them and two final reconstructed vertices can be found.

## 3 Performance studies

A comparison of the performance of the imaging algorithm with the iterative one for single interactions (no additional pile-up in the event) is found in Table 1. For single interactions, the most important metrics are the overall efficiency (was a vertex reconstructed at all for an event), and the split rate (in

Figure 2: Image of a portion of a simulated event (the same \(t\bar{t}\) event imaged in Figure 1), after performing the full image reconstruction including transforms and filtering and then projecting onto the \(z\)-direction. The \(z\)-bin numbers have been changed from relative to absolute numbering; the peak at \(z=0\) in Figure 1 corresponds to the one at \(z\approx 920\). To avoid noise at large values of \(x\) and \(y\), only bins within a \(1\sigma\) box in \(xy\) are used in the projection. Using the full image, the standard deviation in \(x\) and \(y\) is calculated – its width is driven by the smearing of the method rather than the width of the true vertex distribution. To illustrate seeding, a simple clustering method using local maxima is shown. Overlayed is a line corresponding to the threshold required for considered maxima, as well as the locations of vertex seeds found. In this example, local maxima for which the highest adjacent local minimum is at least 90% of the maximum height are discarded.

what fraction of events are two or more vertices reconstructed). Minimum bias events, with fewer tracks than \(t\bar{t}\), are less efficient but less prone to splitting. The imaging algorithm with 1024 \(z\)-bins produced similar performance to the iterative algorithm; with 2048 bins more split vertices are produced. In the future, an additional algorithm may be used to recombine these extra split vertices with the full vertex fit information.

The advantage of the larger number of bins is that vertices can be reconstructed at smaller \(z\) separations than in the iterative algorithm, as demonstrated in Figure 3. This decreases the amount of merged vertices, reducing the quadratic losses as a function of \(\mu\) as shown in Figure 4. The total number of reconstructed vertices in a minimum bias sample as a function of \(\mu\) is described by a linear slope, \(\varepsilon\), and additional quadratic losses due to merging, \(m\):

\[N_{\rm vtx}^{\rm reco}=c_{0}+\varepsilon\mu\left(1-m\mu\right) \tag{1}\]

While the 1024 bin configuration had very similar single interaction performance to the iterative algorithm, it produces slightly more merging losses at higher \(\mu\). The 2048 bin configuration shows fewer losses, as expected from the behaviour seen in the \(\Delta z\) distribution; with \(m=0.005\) versus \(m=0.008\), at \(\mu=40\) on average the iterative loses 32% of vertices that would otherwise be efficient per event, while the imaging algorithm loses 20%.

The other facet to performance involves the time taken to process each event. In Figure 5, the total time per event to perform the seeding step is compared between the iterative algorithm and the imaging algorithm with 2048 \(z\)-bins. Overall, the imaging seeding is slower up to very high values of \(\mu\). The imaging seeding time is dominated by the time spent performing Fourier transforms and applying the filter to reconstruct the image, which depends on the number of bins used in the image histogram. It shows only a weak dependence on the value of \(\mu\), while the iterative approach increases quadratically.

\begin{table}
\begin{tabular}{l c c c c} \hline \hline  & \multicolumn{2}{c}{Minimum bias} & \multicolumn{2}{c}{\(t\bar{t}\)} \\  & Efficiency [\%] & Split rate [\%] & Efficiency [\%] & Split rate [\%] \\ \hline Iterative & 81.8 & 0.04 & 100.0 & 0.38 \\ Imaging 1024 \(z\)-bins & 81.5 & 0.2 & 100.0 & 0.96 \\ Imaging 2048 \(z\)-bins & 80.3 & 4.3 & 100.0 & 9.5 \\ \hline \hline \end{tabular}
\end{table}
Table 1: Comparison of algorithm performance for simulated events with a single interaction (either PYTHIA8 minimum bias or POWHEG+PYTHIA6 \(t\bar{t}\)). The efficiency to reconstruct any number of vertices for a single interaction, and the rate at which single interactions are split to form multiple vertices are shown for the iterative algorithm and for two example configurations of the imaging algorithm with 1024 or 2048 \(z\)-bins in the image. The seeding part of the algorithm has not been adjusted to produce the same efficiency or split rate for the two image sizes.

Figure 3: Distance in the \(z\) direction between all pairs of vertices in simulated events with pile-up, zoomed in on the region near \(0\,\mathrm{mm}\). The histogram is normalized by a Gaussian fit excluding the region \(|\Delta z|<5\,\mathrm{mm}\), giving the fraction of all pairs actually reconstructed. The dip at low separation comes from merging separate collisions into one reconstructed vertex; the small peak near \(\Delta z=0\) for the iterative algorithm includes contributions from splitting. The enhancement above 1 for imaging results from splits as well, but because of the binning used they are not produced at extremely small separations. The imaging algorithm with 2048 \(z\)-bins allows more closely spaced vertex pairs to be reconstructed since two seeds can be identified prior to track assignment.

Figure 4: Comparison of the number of reconstructed vertices as a function of the number in-time pile-up collisions, \(\mu\), for PYTHIA8 minimum bias events. The iterative algorithm is compared to the imaging algorithm using both 1024 and 2048 \(z\)-bin setups. The number of reconstructed vertices, \(N_{\rm vtx}\) is parameterised with a linear term \(\varepsilon\), multiplied by a quadratic loss term \(m\): \(N_{\rm vtx}^{\rm reco}=c_{0}+\varepsilon\mu\,(1-m\mu)\).

Figure 5: Comparison of the time spent creating vertex seeds in each PYTHIA8 minimum bias event as a function of \(\mu\), as measured on a machine with a HEPSPEC scaling factor of about 13. This does not include the time spent assigning tracks to each seed or performing the final vertex fit. The imaging algorithm time is dominated by the time spent transforming and filtering to reconstruct the image, and shows a weaker dependence on the number of in-time pile-up events from the other steps of the algorithm. The total time spent reconstructing vertices, excluding seeding, ranges from \(<1\,\)ms at \(\mu=0\) to \(\simeq 50\,\)ms at \(\mu=40\).

## 4 Conclusion

An imaging algorithm has been developed for ATLAS in order to produce seed positions for vertex finding and fitting. It uses all tracks in the event to provide simultaneously a full set of seeds, instead of the previous approach of iteratively producing single new seeds and fitting them. This approach is highly configurable in both the imaging itself and the identification of vertex seeds from the image. Preliminary performance studies in simulation corresponding to early LHC Run-2 show that it is possible to improve the separation of close-by collisions and lessen the effects of merging in vertex reconstruction. While the algorithm has a larger overhead in the processing time per event, the scaling as a function of the number of pile-up collisions is better than the iterative approach. With future development and optimization still to come, this algorithm shows promise for vertex seeding as the number of simultaneous collisions increases.

## References

* [1] S Hagebock and E von Toerne, _Medical Imaging Inspired Vertex Reconstruction at LHC_, Journal of Physics: Conference Series **396**.2 (2012) 022021, url: [http://stacks.iop.org/1742-6596/396/i=2/a=022021](http://stacks.iop.org/1742-6596/396/i=2/a=022021).
* [2] ATLAS Collaboration, _The ATLAS Experiment at the CERN Large Hadron Collider_, JINST **3** (2008) S08003.
* [3] GEANT4 Collaboration, S. Agostinelli et al., _Geant4-A Simulation toolkit_, Nucl. Instrum. Meth. **A 506** (2003) 250.
* [4] ATLAS Collaboration, _The ATLAS Simulation Infrastructure_, Eur. Phys. J. **C 70** (2010) 823, arXiv: 1005.4568 [hep-ex].
* [5] T. Sjostrand, S. Mrenna and P. Z. Skands, _A brief introduction to PYTHIA 8.1_, Comput. Phys. Commun. **178** (2008) 852, arXiv: 0710.3820 [hep-ph].
* [6] J. M. Campbell et al., _Top-pair production and decay at NLO matched with parton showers_ (2014), arXiv: 1412.1828 [hep-ph].
* [7] P. Nason, _A New method for combining NLO QCD with shower Monte Carlo algorithms_, JHEP **0411** (2004) 040, arXiv: hep-ph/0409146 [hep-ph].
* [8] S. Frixione, P. Nason and C. Oleari, _Matching NLO QCD computations with Parton Shower simulations: the POWHEG method_, JHEP **0711** (2007) 070, arXiv: 0709.2092 [hep-ph].
* [9] S. Alioli et al., _A general framework for implementing NLO calculations in shower Monte Carlo programs: the POWHEG BOX_, JHEP **1006** (2010) 043, arXiv: 1002.2581 [hep-ph].
* [10] T. Sjostrand, S. Mrenna and P. Z. Skands, _PYTHIA 6.4 Physics and Manual_, JHEP **0605** (2006) 026, arXiv: hep-ph/0603175 [hep-ph].
* [11] ATLAS Collaboration, _Performance of the ATLAS Inner Detector Track and Vertex Reconstruction in High Pile-Up LHC Environment_, ATLAS-CONF-2012-042, 2012, url: [https://atlas.web.cern.ch/Atlas/GROUPS/PHYSICS/CONFNOTES/ATLAS-CONF-2012-042](https://atlas.web.cern.ch/Atlas/GROUPS/PHYSICS/CONFNOTES/ATLAS-CONF-2012-042).
* [12] T. Robertson and J. D. Cryer, _An iterative procedure for estimating the mode_, J. Amer. Statist. Assoc. (1974) 1012-1016.